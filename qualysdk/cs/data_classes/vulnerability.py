"""Contains the csVuln dataclass"""

from dataclasses import dataclass
from datetime import datetime
from typing import Union

from .software import csSoftware
from ...base.base_class import BaseClass
from ...base.base_list import BaseList

@dataclass
class csVuln(BaseClass):
    """
    Represents a vulnerability in Qualys Container Security.
    """

    #NOTE: there are more fields from other API calls that have not been added yet.
    # They will be added at a later date.

    qid: int = None
    result: str = None
    software: BaseList[csSoftware] = None
    lastFound: Union[str, datetime] = None
    firstFound: Union[str, datetime] = None
    typeDetected: str = None
    scanType: Union[list[str], BaseList[str]] = None
    source: str = None
    reason: str = None
    imageResult: str = None
    containerResult: str = None
    containerSha: str = None

    def __post_init__(self):
        # Parse the software field into its components:
        if self.software:
            bl = BaseList()
            for software in self.software:
                bl.append(csSoftware.from_dict(software))
            setattr(self, "software", bl)
            
        if self.scanType:
            bl = BaseList()
            for scan_type in self.scanType:
                bl.append(scan_type)
            setattr(self, "scanType", bl)

        for dt_field in ["lastFound", "firstFound"]:
            if getattr(self, dt_field):
                if isinstance(getattr(self, dt_field), str):
                    setattr(self, dt_field, datetime.fromtimestamp(int(getattr(self, dt_field)) / 1000))

    def __str__(self):
        return str(self.qid)
    
    def __int__(self):
        return self.qid
    
    def __float__(self):
        return float(self.qid)
    
    def __gt__(self, other):
        try:
            return self.qid > int(other.qid)
        except:
            return self.qid > int(other)
        
    def __ge__(self, other):
        try:
            return self.qid >= int(other.qid)
        except:
            return self.qid >= int(other)
        
    def __le__(self, other):
        try:
            return self.qid <= int(other.qid)
        except:
            return self.qid <= int(other)
    
    def __lt__(self, other):
        try:
            return self.qid < int(other.qid)
        except:
            return self.qid < int(other)