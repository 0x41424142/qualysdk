{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"qualysdk - A Python SDK for Interacting With Qualys APIs","text":"<p>This SDK attempts to make it much easier to interact with Qualys's various API endpoints, across as many modules as I can find time to code.</p> <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import get_host_list\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Pull 4 pages of hosts, with \"All/AGs\" details &amp; tags:\nhosts = get_host_list(auth, details=\"All/AGs\", show_tags=True, page_count=4)\n&gt;&gt;&gt;[VMDRHost(12345), ...]\n</code></pre>"},{"location":"#current-supported-modules","title":"Current Supported Modules","text":"Module Status GAV (Global AssetView) \u2705 See GAV documentation page for supported calls VMDR \u2705 See VMDR documentation page for supported calls PM (Patch Management) \u2705 See Patch Management documentation page for supported calls WAS \u2705 See WAS documentation page for supported calls TC (TotalCloud) \u2705 See TotalCloud documentation page for supported calls. Connectors Not Started Cloud Agent \u2705 See Cloud Agent documentation page for supported calls CS (Container Security) \u2705 See CS documentation page for supported calls CERT (Certificate View) \u2705 See CERT documentation page for supported calls ADMIN (Administration) \ud83d\udea7 In Progress. See Administration documentation page for supported calls. Asset Management &amp; Tagging \u2705 See Tagging documentation page for supported calls SQL Data Uploads \u2705 See SQL documentation page for supported uploads/DBs"},{"location":"#documentationget-started","title":"Documentation/Get Started","text":"<p>For more detailed information on the package, including how to get up and running, please see the documentation.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This SDK tool is an independent project and is not an official product of Qualys. It has been developed and maintained solely by the names listed in the GitHub contributors list. Qualys has neither endorsed nor approved this SDK.</p> <p>Users of this SDK are advised to use it at their own risk and discretion.</p> <p>For official tools and support, please refer to the official Qualys resources and documentation.</p>"},{"location":"admin/","title":"Administration APIs","text":"<p>Administration APIs return data on user management and other administrative tasks within your environment.</p> <p>After running: <pre><code>from qualysdk.admin import *\n</code></pre> You can use any of the Administration endpoints currently supported:</p>"},{"location":"admin/#administration-endpoints","title":"Administration Endpoints","text":""},{"location":"admin/#administration-rbac-endpoints","title":"Administration RBAC Endpoints","text":"API Call Description <code>get_user_details</code> Query the administration details of a user or users by their admin user ID. <code>search_users</code> Search for users in the Qualys platform by ID, username, or role name. <code>update_user</code> Update a user's roles/scopes and tags by admin ID."},{"location":"admin/#administration-logs-endpoints","title":"Administration Logs Endpoints","text":"<p>TODO</p>"},{"location":"admin/#get-administration-user-details","title":"Get Administration User Details","text":"<p><code>get_user_details</code> retrieves the details of a user or users by their admin user ID. These details include the users email, name, username, roles, scopes, and tags.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>user_id</code> <code>Union[int, str, list[int], list[str]]</code> The ID(s) of the user(s) to retrieve details for. Can be a single ID, a list of IDs, or a list of IDs. \u2705 <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.admin import get_user_details\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n# Get details for a single user by ID:\nuser = get_user_details(auth, user_id=12345678)\n&gt;&gt;&gt;User(\n    id=12345678,\n    username='jdoe',\n    firstName='John',\n    lastName='Doe',\n    emailAddress='jdoe@example.com',\n    title='Software Engineer',\n    scopeTags=[\n        AdminDataPoint(id=1, name='Production'),\n        AdminDataPoint(id=2, name='Development'),\n    ],\n    roleList=[\n        AdminDataPoint(id=1, name='Role1'),\n        AdminDataPoint(id=2, name='Role2'),\n    ]\n)\n\n# Get details for multiple users by ID:\nusers = get_user_details(auth, user_id=[12345678, 87654321])\n&gt;&gt;&gt;[\n    User(\n        id=12345678,\n        username='jdoe',\n        firstName='John',\n        lastName='Doe',\n        ...\n    ),\n    User(\n        ...\n    )\n]\n</code></pre>"},{"location":"admin/#search-users-by-id-username-or-role-name","title":"Search Users by ID, Username, or Role Name","text":"<p><code>search_users</code> searches for users in the Qualys platform by their admin ID, username, or role name. This is useful for finding users based on specific criteria so their roles and scopes can be updated.</p> <p>NOTE: To get all users, set <code>user_id</code> to <code>1</code> and <code>user_id_operator</code> to <code>'GREATER'</code>.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>user_id</code> <code>Union[int, str]</code> The ID of the user to search for. \u274c <code>user_id_operator</code> <code>Literal['EQUALS', 'GREATER', 'LESSER']</code> The operator to use when searching by user ID. Defaults to 'EQUALS'. \u274c <code>username</code> <code>str</code> The username of the user to search for. Search for multiple users by providing a comma-separated string or a list of strings. \u274c <code>username_operator</code> <code>Literal['CONTAINS', 'IN', 'EQUALS', 'NOT EQUALS', 'GREATER', 'LESSER', 'NONE', 'IS EMPTY']</code> The operator to use when searching by username. Defaults to 'EQUALS'. \u274c <code>role_name</code> <code>str</code> The name of the role to search for. Can be a single string, comma-separated string or a list of strings. \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.admin import search_users\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Search for a user by ID:\nuser = search_users(auth, user_id=12345678)\n&gt;&gt;&gt;User(\n    id=12345678,\n    username='jdoe',\n    firstName='John',\n    ...,\n)\n\n# Search for users by username:\nusers = search_users(auth, username='jdoe')\n&gt;&gt;&gt;[\n    User(\n        id=12345678,\n        username='jdoe',\n        firstName='John',\n        ...,\n    ),\n    User(\n        id=87654321,\n        username='jdoe2',\n        firstName='Jane',\n        ...,\n    )\n]\n\n# Search for users that have a specific role:\nusers = search_users(auth, role_name='Role1')\n&gt;&gt;&gt;[\n    User(\n        id=87654321,\n        username='jane',\n        firstName='Jane',\n        roleList=[\n            AdminDataPoint(id=2, name='Role1'),\n        ],\n        ...\n    ),\n    User(\n        id=12345678,\n        username='jdoe',\n        firstName='John',\n        roleList=[\n            AdminDataPoint(id=1, name='Role1'),\n        ],\n        ...\n    )\n]\n</code></pre>"},{"location":"admin/#update-user-roles-and-tags","title":"Update User Roles and Tags","text":"<p><code>update_user</code> updates a user's roles and tags by their admin ID. This is useful for managing user permissions and organization within the Qualys platform.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>user_id</code> <code>int</code> The ID of the user to update. \u2705 <code>add_role_ids</code> <code>list[int]</code> A list of role IDs to add to the user. \u274c <code>add_role_names</code> <code>list[str]</code> A list of role names to add to the user. \u274c <code>remove_role_ids</code> <code>list[int]</code> A list of role IDs to remove from the user. \u274c <code>remove_role_names</code> <code>list[str]</code> A list of role names to remove from the user. \u274c <code>add_tag_ids</code> <code>list[int]</code> A list of tag IDs to add to the user. \u274c <code>add_tag_names</code> <code>list[str]</code> A list of tag names to add to the user. \u274c <code>remove_tag_ids</code> <code>list[int]</code> A list of tag IDs to remove from the user. \u274c <code>remove_tag_names</code> <code>list[str]</code> A list of tag names to remove from the user. \u274c <p>Note that at least one of the add or remove parameters must be provided!</p> <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.admin import update_user, search_users\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#First, lets search for the user we want to update:\nuser = search_users(auth, username='jdoe')\n&gt;&gt;&gt;User(\n    id=12345678,\n    username='jdoe',\n    ...\n)\n\n# Now we can update the user by their ID:\nupdate_user(\n    auth=auth,\n    user_id=user.id,\n    add_role_names=['New Role'],\n    add_tag_names=['New Tag'],\n    remove_role_names=['Old Role'],\n    remove_tag_names=['Old Tag']\n)\n&gt;&gt;&gt;SUCCESS\n</code></pre>"},{"location":"admin/#qualysdk-rbac-cli-tool","title":"<code>qualysdk-rbac</code> CLI tool","text":"<p>The <code>qualysdk-rbac</code> CLI tool is a command-line interface for the RBAC (Role-Based Access Control) portion of the SDK. It allows you to quickly search users tags, scopes/roles, and update them as needed. You can optionally save the results to a file in JSON format.</p>"},{"location":"admin/#usage","title":"Usage","text":"<pre><code>usage: qualysdk-rbac [-h] -u USERNAME -p PASSWORD [-P {qg1,qg2,qg3,qg4}] {get_user_details,search_users,update_user} ...\n\nCLI script to quickly perform user permissions operations in the administration module using qualysdk.\n\npositional arguments:\n  {get_user_details,search_users,update_user}\n                        Action to perform\n    get_user_details    Get the details of a specific user from the Qualys administration module.\n    search_users        Search for users in the admin module.\n    update_user         Update an existing user's tags/scope.\n\noptions:\n  -h, --help            show this help message and exit\n  -u, --username USERNAME\n                        Qualys username\n  -p, --password PASSWORD\n                        Qualys password\n  -P, --platform {qg1,qg2,qg3,qg4}\n                        Qualys platform\n</code></pre>"},{"location":"admin/#get-user-details","title":"Get User Details","text":"<pre><code>usage: qualysdk-rbac get_user_details [-h] [-o OUTPUT] user_id\n\npositional arguments:\n  user_id              The administration ID of the user to retrieve details for\n\noptions:\n  -h, --help           show this help message and exit\n  -o, --output OUTPUT  Output (json) file to write results to\n</code></pre>"},{"location":"admin/#search-users","title":"Search Users","text":"<pre><code>usage: qualysdk-rbac search_users [-h] [-r ROLE] [-i USER_ID] [--id-operator {EQUALS,GREATER,LESSER}] [-qU QUALYS_USERNAME] [-a] [-o OUTPUT]\n\noptions:\n  -h, --help            show this help message and exit\n  -r, --role ROLE       The role of the user(s) to search for\n  -i, --user-id USER_ID\n                        The user ID to search for\n  --id-operator {EQUALS,GREATER,LESSER}\n                        The operator to use for the user ID search\n  -qU, --qualys-username QUALYS_USERNAME\n                        The username to search for\n  -a, --all             If set, will return all active users. Shorthand for `--user-id=1` &amp; --id-operator='GREATER'.\n  -o, --output OUTPUT   Output (json) file to write results to\n</code></pre>"},{"location":"admin/#update-user","title":"Update User","text":"<pre><code>usage: qualysdk-rbac update_user [-h] [--add-tag-ids ADD_TAG_IDS [ADD_TAG_IDS ...]] [--add-tag-names ADD_TAG_NAMES [ADD_TAG_NAMES ...]] [--add-role-ids ADD_ROLE_IDS [ADD_ROLE_IDS ...]]\n                                 [--add-role-names ADD_ROLE_NAMES [ADD_ROLE_NAMES ...]] [--remove-tag-ids REMOVE_TAG_IDS [REMOVE_TAG_IDS ...]]\n                                 [--remove-tag-names REMOVE_TAG_NAMES [REMOVE_TAG_NAMES ...]] [--remove-role-ids REMOVE_ROLE_IDS [REMOVE_ROLE_IDS ...]]\n                                 [--remove-role-names REMOVE_ROLE_NAMES [REMOVE_ROLE_NAMES ...]]\n                                 user_id\n\npositional arguments:\n  user_id               ID of the user to update\n\noptions:\n  -h, --help            show this help message and exit\n  --add-tag-ids ADD_TAG_IDS [ADD_TAG_IDS ...]\n                        List of tag IDs to add to the user. Use like: --add-tag-ids 123 456 789\n  --add-tag-names ADD_TAG_NAMES [ADD_TAG_NAMES ...]\n                        List of tag names to add to the user. Use like: --add-tag-names tag1 tag2 tag3\n  --add-role-ids ADD_ROLE_IDS [ADD_ROLE_IDS ...]\n                        List of role IDs to add to the user. Use like: --add-role-ids 123 456 789\n  --add-role-names ADD_ROLE_NAMES [ADD_ROLE_NAMES ...]\n                        List of role names to add to the user. Use like: --add-role-names role1 role2 role3\n  --remove-tag-ids REMOVE_TAG_IDS [REMOVE_TAG_IDS ...]\n                        List of tag IDs to remove from the user. Use like: --remove-tag-ids 123 456 789\n  --remove-tag-names REMOVE_TAG_NAMES [REMOVE_TAG_NAMES ...]\n                        List of tag names to remove from the user. Use like: --remove-tag-names tag1 tag2 tag3\n  --remove-role-ids REMOVE_ROLE_IDS [REMOVE_ROLE_IDS ...]\n                        List of role IDs to remove from the user. Use like: --remove-role-ids 123 456 789\n  --remove-role-names REMOVE_ROLE_NAMES [REMOVE_ROLE_NAMES ...]\n                        List of role names to remove from the user. Use like: --remove-role-names role1 role2 role3\n</code></pre>"},{"location":"authentication/","title":"Auth Classes","text":"<p><code>qualysdk</code> supports both HTTP Basic Authentication (used mainly for VMDR-based calls) as well as JWT Authentication. </p> <p>Pro Tip: Both <code>BasicAuth</code> and <code>TokenAuth</code> can be used as context managers!</p> <p>Heads Up!: By default, auth classes assume your Qualys subscription is on the <code>qg3</code> platform. If this is not the case, simply pass <code>platform='qg&lt;n&gt;'</code> where n is 1-4 when creating the object.</p> <p>When calling an API endpoint, just pass your <code>TokenAuth</code> or <code>BasicAuth</code> object and the tool will handle the rest (or yell at you if you pass the wrong type, shown below):</p> <pre><code>#Example of using the wrong auth type\nfrom qualysdk.auth import BasicAuth\nfrom qualysdk.gav import count_assets #GAV expects JWT auth\n\nwith BasicAuth(&lt;username&gt;,&lt;password&gt;, platform='qg1') as auth:\n    count = count_assets(auth, filter='operatingSystem.category1:`Linux`')\n    ...\n\n&gt;&gt;&gt;qualysdk.exceptions.Exceptions.AuthTypeMismatchError: Auth type mismatch. Expected token but got basic.\n</code></pre> <p>Head's Up!: Automatic rate limit respecting, described below, is not available for Patch Management API calls. Qualys does not return the headers necessary to determine rate limit windows for these endpoints.</p> <p>Both authentication objects also support automatic rate limit respecting. The SDK will warn you as you get close to an API endpoint's limit and automatically sleep until the limit is lifted, continuing the call afterwards:</p> <pre><code>Warning: This endpoint will accept 3 more calls before rate limiting you. qualysdk will automatically sleep once remaining calls hits 0.\nWarning: This endpoint will accept 2 more calls before rate limiting you. qualysdk will automatically sleep once remaining calls hits 0.\nWarning: This endpoint will accept 1 more calls before rate limiting you. qualysdk will automatically sleep once remaining calls hits 0.\nWARNING: You have reached the rate limit for this endpoint. qualysdk will automatically sleep for 51 seconds and try again at approximately 2024-01-01 19:59:49.500542.\n</code></pre>"},{"location":"authentication/#tokenauth-specific-notes","title":"<code>TokenAuth</code>-specific Notes","text":"<p>Qualys configures JWT tokens to expire 4 hours after they are created. When you make an API call using a <code>TokenAuth</code> object, <code>qualysdk</code> will automatically check if the token is expired and refresh it if necessary before making the call. This is especially useful if <code>qualysdk</code> throttles itself due to hitting your subscription's rate limit, where after sleeping for a variable amount of time (determined by the <code>X-RateLimit-ToWait-Sec</code> header) it will try the call again:</p> <pre><code># Example of being rate limited and qualysdk refreshing the token automatically:\n&gt;&gt;&gt;Warning: This endpoint will accept 2 more calls before rate limiting you. qualysdk will automatically sleep once remaining calls hits 0.\n...\n&gt;&gt;&gt;WARNING: You have reached the rate limit for this endpoint. qualysdk will automatically sleep for &lt;int&gt; seconds and try again at approximately &lt;datetime stamp&gt;.\n...\n# After throttle is lifted:\n&gt;&gt;&gt;Token is 4+ hours old. Refreshing token...\n</code></pre>"},{"location":"authentication/#other-notes-on-auth-classes","title":"Other Notes on Auth Classes","text":"<p>Both <code>BasicAuth</code> and <code>TokenAuth</code> also have <code>from_dict</code> class methods, which allows for the creation of these objects from dictionaries:</p> <pre><code>from qualysdk.auth import BasicAuth\nauth = BasicAuth.from_dict({'username':&lt;username&gt;, 'password':&lt;password&gt;})\n</code></pre> <p>You can also create an object using a JSON string using <code>from_json_string</code>:</p> <pre><code>from qualysdk.auth import BasicAuth\nauth = BasicAuth.from_json_string('{\"username\":&lt;username&gt;, \"password\":&lt;password&gt;}')\n</code></pre> <p>You can also export using <code>to_json_string</code>. If <code>pretty=True</code>, the string will be pretty formatted:</p> <pre><code>from qualysdk.auth import BasicAuth\nauth = BasicAuth.from_dict({'username':&lt;username&gt;, 'password':&lt;password&gt;})\n\n#No formatting:\nauth.to_json_string()\n&gt;&gt;&gt;'{\"username\": &lt;username&gt;, \"password\": &lt;password&gt;, \"token\": null, \"auth_type\": \"basic\", \"platform\": &lt;platform&gt;}'\n#With formatting:\nauth.to_json_string(pretty=True)\n&gt;&gt;&gt;{\n    \"username\": &lt;username&gt;,\n    \"password\": &lt;password&gt;,\n    \"token\": null,\n    \"auth_type\": \"basic\",\n    \"platform\": &lt;platform&gt;\n}\n</code></pre>"},{"location":"authentication/#auth-class-hierarchy","title":"Auth Class Hierarchy","text":"<p>The <code>qualysdk.auth</code> module has a class hierarchy that looks like this:</p> <pre><code>graph\nA[qualysdk.auth.base.BaseAuthentication]--&gt;B(qualysdk.auth.basic.BasicAuth)\nB --&gt; C(qualysdk.auth.token.TokenAuth)</code></pre>"},{"location":"authentication/#checking-your-subscriptions-rate-limit","title":"Checking Your Subscription's Rate Limit","text":"<p>Both <code>BasicAuth</code> and <code>TokenAuth</code> objects allow you to check your subscription's configured rate limits on the fly. To do this, call the <code>get_ratelimit()</code> method:</p> <pre><code>from qualysdk import TokenAuth\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\nauth.get_ratelimit()\n&gt;&gt;&gt;{'X-RateLimit-Limit': 1000, 'X-Concurrency-Limit-Limit': 10}\n</code></pre>"},{"location":"callschema/","title":"The CALL_SCHEMA Dictionary","text":"<p>TL;DR: The <code>CALL_SCHEMA</code> is VERY important! </p> <p>CALL_SCHEMA is a backend <code>frozendict</code> dictionary that the package automatically uses to correctly set up the underlying <code>qualysdk.base.call_api()</code> function. <code>call_api</code> in turn then sets up the appropriate <code>requests.Request()</code> call using an endpoint's schema.</p> <p>The schema stores information such as what HTTP methods the endpoint accepts, the authentication type the endpoint expects, its path, acceptable kwargs when calling an API (and whether a kwarg should be sent as a URL parameter, in a POST form, or using the requests' library's <code>json=</code> feature), what Qualys URL structure to use (gateway vs. qualysapi), and more.</p> <p>The schema also allows all API calls to raise an exception if the user passes in a kwarg that is not valid for an endpoint.</p> <p>There are also some values that do not influence program behavior, but are \"good-to-knows\" for users. See below.</p>"},{"location":"callschema/#querying-the-call_schema","title":"Querying the CALL_SCHEMA","text":"<p>If you want to take a look at what an endpoint (or what an entire module's collection of endpoints!) expects, you can do so programmatically:</p> <p>Pro Tip!: use <code>schema_query(...pretty=True)</code> to return a beautified string of the query results.</p> <pre><code>from qualysdk import schema_query\n\n#Get one specific endpoint's schema:\nprint(schema_query(module='gav', endpoint='query_assets'))\n&gt;&gt;&gt;{'endpoint': '/am/v1/assets/host/filter/list', 'method': ['POST'], 'valid_params': ['filter', 'excludeFields', 'includeFields', 'lastModifiedDate', 'lastSeenAssetId', 'pageSize'], 'valid_POST_data': [], 'use_requests_json_data': False, 'return_type': 'json', 'pagination': True, 'auth_type': 'token'}\n\n#Get an entire module's worth of endpoint schemas, \n# which includes the module-level url_type:\nprint(schema_query(module='gav', pretty=True))\n&gt;&gt;&gt;{\n    \"url_type\": \"gateway\", #Used by call_api() to determine which URL format to use.\n    \"count_assets\": {\n        \"endpoint\": \"/am/v1/assets/host/count\",\n        \"method\": [\n            \"POST\"\n        ],\n        \"valid_params\": [\n            \"filter\",\n            \"lastSeenAssetId\",\n            \"lastModifiedDate\"\n        ],\n        \"valid_POST_data\": [],\n        \"use_requests_json_data\": false,\n        \"return_type\": \"json\",\n        \"pagination\": false,\n        \"auth_type\": \"token\"\n    },\n    \"get_all_assets\": {\n        ...\n    }\n}\n</code></pre>"},{"location":"cert/","title":"Certificate View APIs","text":"<p>Certificate View APIs return data on certificates in the subscription.</p> <p>After running: <pre><code>from qualysdk.cert import *\n</code></pre> You can use any of the endpoints currently supported:</p>"},{"location":"cert/#certificate-view-endpoints","title":"Certificate View Endpoints","text":"API Call Description <code>list_certs</code> Lists all certificates in the subscription that match given kwargs."},{"location":"cert/#list-certificates-api","title":"List Certificates API","text":"<p><code>list_certs</code> returns a list of certificates in the subscription that match the given kwargs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> Number of pages to pull \u274c <code>certId</code> <code>str</code> The ID of a certificate to return \u274c <code>certId_operator</code> <code>Literal[\"IN\", \"LESSER\", \"IS_EMPTY\", \"GREATER\", \"GREATER_THAN_EQUAL\", \"IS_NOT_EMPTY\", \"EQUALS\", \"NOT_EQUALS\", \"LESS_THAN_EQUAL\", \"CONTAINS\"] = \"IS_NOT_EMPTY\"</code> The operator to use for the certId \u274c <code>hash</code> <code>str</code> The hash of a certificate to return \u274c <code>hash_operator</code> <code>Literal[\"IN\", \"LESSER\", \"IS_EMPTY\", \"GREATER\", \"GREATER_THAN_EQUAL\", \"IS_NOT_EMPTY\", \"EQUALS\", \"NOT_EQUALS\", \"LESS_THAN_EQUAL\", \"CONTAINS\"] = \"IS_NOT_EMPTY\"</code> The operator to use for the hash \u274c <code>validFromDate</code> <code>str</code> The date the certificate is valid from \u274c <code>validFromDate_operator</code> <code>Literal[\"IN\", \"LESSER\", \"IS_EMPTY\", \"GREATER\", \"GREATER_THAN_EQUAL\", \"IS_NOT_EMPTY\", \"EQUALS\", \"NOT_EQUALS\", \"LESS_THAN_EQUAL\", \"CONTAINS\"] = \"GREATER\"</code> The operator to use for the validFromDate \u274c <code>wasUrl</code> <code>str</code> The URL of the site the certificate lives on, according to the WAS module \u274c <code>wasUrl_operator</code> <code>Literal[\"IN\", \"LESSER\", \"IS_EMPTY\", \"GREATER\", \"GREATER_THAN_EQUAL\", \"IS_NOT_EMPTY\", \"EQUALS\", \"NOT_EQUALS\", \"LESS_THAN_EQUAL\", \"CONTAINS\"] = \"IS_NOT_EMPTY\"</code> The operator to use for the wasUrl \u274c <code>certificateType</code> <code>Literal[\"Leaf\", \"Intermediate\", \"Root\"]</code> The type of certificate \u274c <code>pageSize</code> <code>int &gt; 0 (default=10)</code> The number of certificates to return per page \u274c <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.cert import list_certs\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get all certificates:\ncerts = list_certs(auth)\n\n# Get all certificates that match a given piece of a hash\n# and are valid afer a certain date:\ncerts = list_certs(auth, hash='1234', hash_operator='CONTAINS', validFromDate='2024-01-01')\n&gt;&gt;&gt;[\n    Certificate(\n        id=12345678, \n        certhash='111222333444...', \n        keySize=2048, \n        serialNumber='12345...', \n        validToDate=datetime.datetime(2030, 1, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),\n        ...\n    ),\n    ...\n]\n</code></pre>"},{"location":"cert/#qualysdk-cert-cli-tool","title":"<code>qualysdk-cert</code> CLI tool","text":"<p>The <code>qualysdk-cert</code> CLI tool is a command-line interface for the Certificate View portion of the SDK. It allows you to quickly pull down results from Certificate View APIs and save them to an XLSX file.</p>"},{"location":"cert/#usage","title":"Usage","text":"<pre><code>usage: qualysdk-cert [-h] -u USERNAME -p PASSWORD [-P {qg1,qg2,qg3,qg4}] {list_certs} ...\n\nCLI script to quickly perform Certificate View (CERT) operations using qualysdk\n\npositional arguments:\n  {list_certs}          Action to perform\n    list_certs          Get a list of certificates according to kwargs.\n\noptions:\n  -h, --help            show this help message and exit\n  -u, --username USERNAME\n                        Qualys username\n  -p, --password PASSWORD\n                        Qualys password\n  -P, --platform {qg1,qg2,qg3,qg4}\n                        Qualys platform\n</code></pre>"},{"location":"cert/#list-certificates","title":"List Certificates","text":"<pre><code>usage: qualysdk-cert list_certs [-h] [-o OUTPUT] [--kwarg key value]\n\noptions:\n  -h, --help           show this help message and exit\n  -o, --output OUTPUT  Output xlsx file to write results to\n  --kwarg key value    Specify a keyword argument to pass to the action. Can be used multiple times\n</code></pre>"},{"location":"cloud_agent/","title":"Cloud Agent APIs","text":"<p>Cloud agent APIs return data on cloud agents in your subscription, as well as manage them.</p> <p>After running: <pre><code>from qualysdk.cloud_agent import *\n</code></pre> You can use any of the endpoints currently supported:</p>"},{"location":"cloud_agent/#cloud-agent-endpoints","title":"Cloud Agent Endpoints","text":"API Call Description <code>purge_agent</code> Purges a cloud agent from the subscription. <code>bulk_purge_agent</code> Purges multiple cloud agents from the subscription. <code>list_agents</code> Lists all cloud agents in the subscription that match given kwargs. <code>launch_ods</code> Launches an On-Demand Scan on a single cloud agent. <code>bulk_launch_ods</code> Launches an On-Demand Scan on multiple cloud agents."},{"location":"cloud_agent/#list-agents-api","title":"List Agents API","text":"<p><code>list_agents</code> returns a list of cloud agents in the subscription that match the given kwargs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> Number of pages to pull \u274c <code>asset_id</code> <code>str</code> Singular asset ID \u274c <code>qwebHostId</code> <code>int</code> QWEB Host ID \u274c <code>lastVulnScan</code> <code>str</code> Date string formatted like ```YYYY-MM-DD[THH:MM:SSZ] \u274c <code>lastComplianceScan</code> <code>str</code> Date string formatted like ```YYYY-MM-DD[THH:MM:SSZ] \u274c <code>informationGatheredUpdated</code> <code>str</code> Date string formatted like ```YYYY-MM-DD[THH:MM:SSZ] \u274c <code>os</code> <code>str</code> Operating System \u274c <code>dnsHostName</code> <code>str</code> DNS Hostname \u274c <code>address</code> <code>str</code> IP Address \u274c <code>vulnsUpdated</code> <code>str</code> Date string formatted like ```YYYY-MM-DD[THH:MM:SSZ] \u274c <code>name</code> <code>str</code> Host's Qualys Name \u274c <code>created</code> <code>str</code> Date string formatted like ```YYYY-MM-DD[THH:MM:SSZ] \u274c <code>type</code> <code>str</code> Host Type \u274c <code>netbiosName</code> <code>str</code> NetBIOS Name \u274c <code>netbiosNetworkID</code> <code>str</code> NetBIOS Network ID \u274c <code>networkGuid</code> <code>str</code> Network GUID \u274c <code>trackingMethod</code> <code>Literal['NONE', 'IP', 'DNSNAME', 'NETBIOS', 'INSTANCE_ID', 'QAGENT']</code> Tracking Method \u274c <code>port</code> <code>int</code> Query ports \u274c <code>installedSoftware</code> <code>str</code> Query installed software \u274c <code>tagName</code> <code>str</code> Query by tag name \u274c <code>tagId</code> <code>int</code> Query by tag ID \u274c <code>update</code> <code>str</code> Date string formatted like ```YYYY-MM-DD[THH:MM:SSZ] \u274c <code>activationKey</code> <code>str</code> Activation Key \u274c <code>agentConfigurationName</code> <code>str</code> Agent Configuration Name \u274c <code>agentConfigurationId</code> <code>float</code> Agent Configuration ID \u274c <code>agentVersion</code> <code>str</code> Agent Version \u274c <code>lastCheckedIn</code> <code>str</code> Date string formatted like ```YYYY-MM-DD[THH:MM:SSZ] \u274c <code>lastVulnScan_operator</code> <code>Literal['GREATER', 'LESSER']</code> Operator for last vuln scan \u274c <code>lastComplianceScan_operator</code> <code>Literal['GREATER', 'LESSER']</code> Operator for last compliance scan \u274c <code>informationGatheredUpdated_operator</code> <code>Literal['GREATER', 'LESSER']</code> Operator for information gathered updated \u274c <code>vulnsUpdated_operator</code> <code>Literal['GREATER', 'LESSER']</code> Operator for vulns updated \u274c <code>created_operator</code> <code>Literal['GREATER', 'LESSER']</code> Operator for created \u274c <code>agentConfigurationName_operator</code> <code>Literal['EQUALS', 'CONTAINS']</code> Operator for agent configuration name \u274c <code>agentVersion_operator</code> <code>Literal['EQUALS', 'LESSER', 'GREATER']</code> Operator for agent version \u274c <code>lastCheckedIn_operator</code> <code>Literal['GREATER', 'LESSER']</code> Operator for last checked in \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.cloud_agent import list_agents\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\nlist_agents(auth, os='Windows')\n&gt;&gt;&gt;[CloudAgent(id=123456789, ...), ...]\n</code></pre>"},{"location":"cloud_agent/#purge-agent-api","title":"Purge Agent API","text":"<p><code>purge_agent</code> purges a cloud agent from the subscription. Returns a <code>str</code> indicating success or an error message.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>asset_id</code> <code>str</code> Singular asset ID \u2705 <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.cloud_agent import purge_agent\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\npurge_agent(auth, asset_id='123456789')\n&gt;&gt;&gt;SUCCESS\n</code></pre>"},{"location":"cloud_agent/#bulk-purge-agent-api","title":"Bulk Purge Agent API","text":"<p><code>bulk_purge_agent</code> purges multiple cloud agents from the subscription. Returns a <code>str</code> indicating success or an error message.</p> <p>Head's Up!: It is HIGHLY recommended to only use the <code>asset_ids</code> parameter for accuracy.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>asset_ids</code> <code>List[str]</code> List of asset IDs \u274c, but recommended! <code>names</code> <code>List[str]</code> List of asset names \u274c <code>created</code> <code>str</code> Date string or datetime object formatted like ```YYYY-MM-DD[THH:MM:SSZ] \u274c <code>updated</code> <code>str</code> Date string or datetime object formatted like ```YYYY-MM-DD[THH:MM:SSZ] \u274c <code>created_operator</code> <code>Literal['GREATER', 'LESSER']</code> Operator for created date \u274c <code>updated_operator</code> <code>Literal['GREATER', 'LESSER']</code> Operator for updated date \u274c <code>tagName</code> <code>list[str]</code> List of tag names \u274c <code>agentUuid</code> <code>list[str]</code> List of agent UUIDs \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.cloud_agent import bulk_purge_agent\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\nbulk_purge_agent(auth, asset_ids=['123456789', '987654321'])\n&gt;&gt;&gt;SUCCESS\n</code></pre>"},{"location":"cloud_agent/#launch-on-demand-scan-on-a-single-agent-api","title":"Launch On-Demand Scan on a Single Agent API","text":"<p><code>launch_ods</code> launches an On-Demand Scan on a single cloud agent. Returns a <code>str</code> indicating success or an error message.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>asset_id</code> <code>str</code> Singular asset ID \u2705 <code>scan</code> <code>Literal['inv', 'vuln', 'pc', 'udc', 'sca', 'swca']</code> Scan type \u2705 <code>overrideConfigCpu</code> <code>bool</code> Override configuration profile's CPU throttling limits \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.cloud_agent import launch_ods\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\nlaunch_ods(auth, asset_id='123456789', scan='inv')\n</code></pre>"},{"location":"cloud_agent/#launch-on-demand-scan-on-multiple-agents-api","title":"Launch On-Demand Scan on Multiple Agents API","text":"<p><code>bulk_launch_ods</code> launches an On-Demand Scan on multiple cloud agents. Returns a <code>str</code> indicating success or an error message.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>scan</code> <code>Literal['inv', 'vuln', 'pc', 'udc', 'sca', 'swca']</code> Scan type \u2705 <code>overrideConfigCpu</code> <code>bool</code> Override configuration profile's CPU throttling limits \u274c <code>asset_ids</code> <code>Union[str, List[str]]</code> List of asset IDs or comma-separated string of asset IDs \u274c, but recommended! <code>names</code> <code>Union[str, List[str]]</code> List of asset names or comma-separated string of asset names \u274c <code>tagName</code> <code>str</code> Comma-separated string of tag names \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.cloud_agent import bulk_launch_ods\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\nbulk_launch_ods(auth, asset_ids=['123456789', '987654321'], scan='inv')\n</code></pre>"},{"location":"containersecurity/","title":"Container Security APIs","text":"<p>Container security APIs return data on containers, images, registries, and more in your subscription, as well as manage them.</p> <p>After running: <pre><code>from qualysdk.cs import *\n</code></pre> You can use any of the endpoints currently supported:</p>"},{"location":"containersecurity/#container-security-endpoints","title":"Container Security Endpoints","text":"API Call Description <code>list_containers</code> Lists all containers in the subscription that match given kwargs. <code>get_container_details</code> Returns detailed information about a single container instance. <code>get_software_on_container</code> Returns a list of software installed on a container - vulnerability counts by severity, software name, version, and more. <code>get_container_vuln_count</code> Returns a <code>dict</code> of vulnerability counts by severity for a container. <code>get_container_vulns</code> Returns a list of vulnerabilities for a container."},{"location":"containersecurity/#container-api-calls","title":"Container API Calls","text":""},{"location":"containersecurity/#list-containers-api","title":"List Containers API","text":"<p><code>list_containers</code> returns a list of containers in the subscription that match the given kwargs. This method uses the <code>/containers/list</code> endpoint to fetch all containers in the subscription, overcoming the limit that the <code>/containers</code> endpoint has.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> Number of pages to pull \u274c <code>filter</code> <code>str</code> Filter string using Qualys container security QQL \u274c <code>paginationQuery</code> <code>str</code> Pagination query string. The SDK handles this argument automatically \u274c <code>limit</code> <code>int</code> Number of records to return per page \u274c <pre><code>from qualysdk import TokenAuth\nfrom qualysdk.cs import list_containers\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n# Get 4 pages of running containers:\ncontainers = list_containers(auth, page_count=4, filter='state:`RUNNING`')\n&gt;&gt;&gt;[Container(imageId=12345, ...), ...]\n</code></pre>"},{"location":"containersecurity/#get-container-details-api","title":"Get Container Details API","text":"<p><code>get_container_details</code> returns detailed information about a single container instance, specified by the <code>containerSha</code> argument. For containers pulled with qualysdk, the <code>containerSha</code> is accessible via the <code>Container.sha</code> dataclass attribute.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>containerSha</code> <code>str</code> Sha hash of a container \u2705 <pre><code>from qualysdk import TokenAuth\nfrom qualysdk.cs import get_container_details, list_containers\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;)\n# Get a BaseList of containers:\ncontainers = list_containers(auth, page_count=1)\n# Get the details of the first container:\ndetails = get_container_details(auth, containers[0].sha)\n</code></pre>"},{"location":"containersecurity/#get-software-on-container-api","title":"Get Software on Container API","text":"<p><code>get_software_on_container</code> returns a list of software installed on a container, specified by the <code>containerSha</code> argument. For containers pulled with qualysdk, the <code>containerSha</code> is accessible via the <code>Container.sha</code> dataclass attribute.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>containerSha</code> <code>str</code> Sha hash of a container \u2705 <code>filter</code> <code>str</code> Filter string using Qualys container security QQL \u274c <code>sort</code> <code>str</code> Sort string using Qualys container security QQL \u274c <code>isDrift</code> <code>bool</code> Whether to include drifted software \u274c ``` <pre><code>from qualysdk import TokenAuth\nfrom qualysdk.cs import get_software_on_container, list_containers\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;)\n# Get a BaseList of containers:\ncontainers = list_containers(auth, page_count=1)\n# Get the software on the first container:\nsoftware = get_software_on_container(auth, containers[0].sha)\n&gt;&gt;&gt;[\n    csSoftware(\n        name='nginx',\n        version='1.21.6',\n        scanType='DYNAMIC',\n        packagePath=None,\n        fixVersion=None,\n        vulnerabilities_severity5Count=1,\n        vulnerabilities_severity4Count=2,\n        vulnerabilities_severity3Count=3,\n        vulnerabilities_severity2Count=4,\n        vulnerabilities_severity1Count=5,\n        containerSha='sha256:1234567890abcdef...',\n    ),\n    ...\n]\n</code></pre>"},{"location":"containersecurity/#get-container-vulnerability-count-api","title":"Get Container Vulnerability Count API","text":"<p><code>get_container_vuln_count</code> returns a dict of vulnerability counts by severity for a container, specified by the <code>containerSha</code> argument. For containers pulled with qualysdk, the <code>containerSha</code> is accessible via the <code>Container.sha</code> dataclass attribute.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>containerSha</code> <code>str</code> Sha hash of a container \u2705 <pre><code>from qualysdk import TokenAuth\nfrom qualysdk.cs import get_container_vuln_count, list_containers\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;)\n# Get a BaseList of containers:\ncontainers = list_containers(auth, page_count=1)\n# Get the vulnerability count for the first container:\nvuln_count = get_container_vuln_count(auth, containers[0].sha)\n&gt;&gt;&gt;{\n    'severity5Count': 1,\n    'severity4Count': 2,\n    'severity3Count': 3,\n    'severity2Count': 4,\n    'severity1Count': 5,\n}\n</code></pre>"},{"location":"containersecurity/#get-container-vulnerabilities-api","title":"Get Container Vulnerabilities API","text":"<p><code>get_container_vulns</code> returns a list of vulnerabilities for a container, specified by the <code>containerSha</code> argument. For containers pulled with qualysdk, the <code>containerSha</code> is accessible via the <code>Container.sha</code> dataclass attribute.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>containerSha</code> <code>str</code> Sha hash of a container \u2705 <code>filter</code> <code>str</code> Filter string using Qualys container security QQL \u274c <code>isDrift</code> <code>bool</code> Whether to include drifted software \u274c <pre><code>from qualysdk import TokenAuth\nfrom qualysdk.cs import get_container_vulns, list_containers\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;)\n# Get a BaseList of containers:\ncontainers = list_containers(auth, page_count=1)\n# Get the vulnerabilities for the first container:\nvulns = get_container_vulns(auth, containers[0].sha)\n&gt;&gt;&gt;[\n    csVuln(\n        qid=123456,\n        title='Vulnerability Title',\n        severity=4,\n        patchAvailable=True,\n        cveids=['CVE-2023-12345'],\n        ...\n    ),\n    ...\n]\n</code></pre>"},{"location":"gav/","title":"Global AssetView APIs","text":"<p>Global AssetView APIs return data on hosts within your Qualys subscription. </p> <p>Pro Tip: To see all available GAV QQL filters, look here!</p> <p>After running:</p> <p><pre><code>from qualysdk.gav import *\n</code></pre> You can any of the 4 GAV endpoints:</p>"},{"location":"gav/#gav-endpoints","title":"GAV Endpoints","text":"API Call Description <code>count_assets</code> Count assets based on the <code>filter</code> kwarg, which is written in Qualys QQL. <code>get_asset</code> Get a specific host based on the <code>assetId</code> kwarg. <code>get_all_assets</code> Pull the entire host inventory (or a few pages of it with <code>page_count</code>), in file sizes of <code>pageSize</code>. Does NOT support <code>filter</code>. <code>query_assets</code> Scaled down version of<code>get_all_assets</code> - pulls entire host inventory that matches the given <code>filter</code> kwarg. <p>Or use the uber class:</p> <pre><code>from qualysdk import TokenAuth, GAVUber\n\n#Hey look! context managers!\nwith TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1') as auth:\n    with GAVUber(auth) as uber:\n        full_inventory_count = uber.get(\"count_assets\")\n        ...\n</code></pre>"},{"location":"gav/#gav-qql-tokens","title":"GAV QQL Tokens","text":"<p>For a list of valid QQL search keywords, click here.</p>"},{"location":"gav/#count-assets-api","title":"Count Assets API","text":"<p>The <code>count_assets</code> API is used to count the number of assets that match a given filter. The filter is written in GAV QQL.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>filter</code> <code>str</code> The QQL filter to search for assets. \u274c <code>lastModifiedDate</code> <code>str</code> The last modified date of the asset. \u274c <pre><code>from qualysdk import TokenAuth\nfrom qualysdk.gav import count_assets\n\nwith TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1') as auth:\n    count = count_assets(auth, filter=\"operatingSystem.category1:`Windows`\")\n&gt;&gt;&gt;{'count': 10000, 'responseCode': 'SUCCESS', 'responseMessage': 'Valid API Access'}\n</code></pre>"},{"location":"gav/#get-asset-api","title":"Get Asset API","text":"<p>The <code>get_asset</code> API is used to get a specific asset based on its asset ID (accessible from the <code>Host.assetId</code> attribute).</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>assetId</code> <code>str</code> The asset ID of the host you want to get. \u2705 <code>lastModifiedDate</code> <code>str</code> The last modified date of the asset. \u274c <pre><code>from qualysdk import TokenAuth\nfrom qualysdk.gav import get_asset\n\nwith TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1') as auth:\n    asset = get_asset(auth, assetId=\"123456\")\n&gt;&gt;&gt;AssetID(123456)\n</code></pre>"},{"location":"gav/#get-all-assets-api","title":"Get All Assets API","text":"<p><code>get_all_assets</code> is used to pull the entire GAV inventory. This is a very heavy operation, and will take some time depending on the size of your environment. </p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> The number of pages to pull. \u274c <code>pageSize</code> <code>int</code> The number of assets to pull per page. Max value is 300. \u274c <code>excludeFields</code> <code>Literal[\"activity\", \"lastLocation\", \"address\", \"lastLoggedOnUser\", \"agent\", \"netbiosName\", \"agentId\", \"networkInterface\", \"assetName\", \"openPort\", \"biosAssetTag\", \"operatingSystem\", \"biosDescription\", \"processor\", \"biosSerialNumber\", \"provider\", \"cloudProvider\", \"sensor\", \"container\", \"service\", \"cpuCount\", \"software\", \"dnsName\", \"tag\", \"hardware\", \"timeZone\", \"hostId\", \"totalMemory\", \"inventory\", \"userAccount\", \"isContainerHost\", \"volume\", \"lastBoot\"]</code> Extra fields to exclude from the response. \u274c <code>includeFields</code> <code>Literal[\"activity\", \"lastLocation\", \"address\", \"lastLoggedOnUser\", \"agent\", \"netbiosName\", \"agentId\", \"networkInterface\", \"assetName\", \"openPort\", \"biosAssetTag\", \"operatingSystem\", \"biosDescription\", \"processor\", \"biosSerialNumber\", \"provider\", \"cloudProvider\", \"sensor\", \"container\", \"service\", \"cpuCount\", \"software\", \"dnsName\", \"tag\", \"hardware\", \"timeZone\", \"hostId\", \"totalMemory\", \"inventory\", \"userAccount\", \"isContainerHost\", \"volume\", \"lastBoot\"]</code> Extra fields to include in the response. \u274c <code>lastModifiedDate</code> <code>str</code> The last modified date of the asset. \u274c <pre><code>from qualysdk import TokenAuth\nfrom qualysdk.gav import get_all_assets\n\n# Get the first page of 100 assets, with\n# cloudProvider, lastLoggedOnUser, and volume data excluded.\nwith TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1') as auth:\n    all_assets = get_all_assets(\n        auth, \n        page_count=1, \n        pageSize=100,\n        excludeFields=\"cloudProvider,lastLoggedOnUser,volume\",\n    )\n&gt;&gt;&gt;[AssetID(123456), AssetID(123457), ...]\n</code></pre>"},{"location":"gav/#query-assets-api","title":"Query Assets API","text":"<p><code>query_assets</code> is a scaled down version of <code>get_all_assets</code>, and is used to pull the entire GAV inventory that matches a given QQL filter.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>filter</code> <code>str</code> The QQL filter to search for assets. \u2705 <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> The number of pages to pull. \u274c <code>pageSize</code> <code>int</code> The number of assets to pull per page. Max value is 300. \u274c <code>excludeFields</code> <code>Literal[\"activity\", \"lastLocation\", \"address\", \"lastLoggedOnUser\", \"agent\", \"netbiosName\", \"agentId\", \"networkInterface\", \"assetName\", \"openPort\", \"biosAssetTag\", \"operatingSystem\", \"biosDescription\", \"processor\", \"biosSerialNumber\", \"provider\", \"cloudProvider\", \"sensor\", \"container\", \"service\", \"cpuCount\", \"software\", \"dnsName\", \"tag\", \"hardware\", \"timeZone\", \"hostId\", \"totalMemory\", \"inventory\", \"userAccount\", \"isContainerHost\", \"volume\", \"lastBoot\"]</code> Extra fields to exclude from the response. \u274c <code>includeFields</code> <code>Literal[\"activity\", \"lastLocation\", \"address\", \"lastLoggedOnUser\", \"agent\", \"netbiosName\", \"agentId\", \"networkInterface\", \"assetName\", \"openPort\", \"biosAssetTag\", \"operatingSystem\", \"biosDescription\", \"processor\", \"biosSerialNumber\", \"provider\", \"cloudProvider\", \"sensor\", \"container\", \"service\", \"cpuCount\", \"software\", \"dnsName\", \"tag\", \"hardware\", \"timeZone\", \"hostId\", \"totalMemory\", \"inventory\", \"userAccount\", \"isContainerHost\", \"volume\", \"lastBoot\"]</code> Extra fields to include in the response. \u274c <code>lastModifiedDate</code> <code>str</code> The last modified date of the asset. \u274c <pre><code>from qualysdk import TokenAuth\nfrom qualysdk.gav import query_assets\n\n# Pull the first 100 Windows hosts:\nwith TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1') as auth:\n    windows_assets = query_assets(auth, filter=\"operatingSystem.category1:`Windows`\", page_count=1, pageSize=100)\n&gt;&gt;&gt;[AssetID(123456), AssetID(123457), ...]\n</code></pre>"},{"location":"gav/#the-gav-host-dataclass","title":"The GAV Host Dataclass","text":"<p>Heads Up!: The <code>Host</code> class does not apply to <code>count_assets()</code></p> <p>Head's Up!: Not all <code>Host</code> attributes are populated by default. You can specify which fields to include/exclude in the response by using the <code>includeFields</code> and <code>excludeFields</code> parameters. Note that some fields will not be returned if your subscription does not include the Cybersecurity Asset Management upgrade.</p> <p>When results are received from a GAV API, each host record is stored in a <code>Host</code> object, with its data points as attributes. Below is a list of all possible attributes:</p> <pre><code>'activity'\n'activity_lastScannedDate'\n'activity_source'\n'address'\n'agent'\n'agentId'\n'agent_configurationProfile'\n'agent_connectedFrom'\n'agent_errorStatus'\n'agent_key'\n'agent_lastActivity'\n'agent_lastCheckedIn'\n'agent_lastInventory'\n'agent_status'\n'agent_udcManifestAssigned'\n'agent_version'\n'asn'\n'assetId'\n'assetName'\n'assetType'\n'assetUUID'\n'assignedLocation'\n'biosAssetTag'\n'biosDescription'\n'biosSerialNumber'\n'businessAppListData'\n'businessInformation'\n'cloudProvider'\n'cloudProvider_accountId'\n'cloudProvider_availabilityZone'\n'cloudProvider_hasAgent'\n'cloudProvider_hostname'\n'cloudProvider_imageId'\n'cloudProvider_imageOffer'\n'cloudProvider_imagePublisher'\n'cloudProvider_imageVersion'\n'cloudProvider_instanceId'\n'cloudProvider_instanceState'\n'cloudProvider_instanceType'\n'cloudProvider_launchdate'\n'cloudProvider_location'\n'cloudProvider_macAddress'\n'cloudProvider_name'\n'cloudProvider_platform'\n'cloudProvider_privateDNS'\n'cloudProvider_privateIpAddress'\n'cloudProvider_publicDNS'\n'cloudProvider_publicIpAddress'\n'cloudProvider_qualysScanner'\n'cloudProvider_region'\n'cloudProvider_resourceGroupName'\n'cloudProvider_size'\n'cloudProvider_spotInstance'\n'cloudProvider_state'\n'cloudProvider_subnet'\n'cloudProvider_subnetId'\n'cloudProvider_subscriptionId'\n'cloudProvider_virtualNetwork'\n'cloudProvider_vmId'\n'cloudProvider_vpcId'\n'container'\n'container_hasSensor'\n'container_noOfContainers'\n'container_noOfImages'\n'container_product'\n'container_version'\n'cpuCount'\n'createdDate'\n'criticality'\n'customAttributes'\n'dnsName'\n'domain'\n'domainRole'\n'easmTags'\n'hardware'\n'hardwareVendor'\n'hardware_category'\n'hardware_category1'\n'hardware_category2'\n'hardware_fullName'\n'hardware_lifecycle'\n'hardware_lifecycle_eosDate'\n'hardware_lifecycle_gaDate'\n'hardware_lifecycle_introDate'\n'hardware_lifecycle_lifeCycleConfidence'\n'hardware_lifecycle_obsoleteDate'\n'hardware_lifecycle_stage'\n'hardware_manufacturer'\n'hardware_model'\n'hardware_productFamily'\n'hardware_productName'\n'hardware_productUrl'\n'hostId'\n'hostingCategory1'\n'hwUUID'\n'inventory'\n'inventory_created'\n'inventory_lastUpdated'\n'inventory_source'\n'isContainerHost'\n'isp'\n'lastBoot'\n'lastLocation'\n'lastLoggedOnUser'\n'lastModifiedDate'\n'missingSoftware'\n'netbiosName'\n'networkInterfaceListData'\n'openPortListData'\n'operatingSystem'\n'operatingSystem_architecture'\n'operatingSystem_category'\n'operatingSystem_category1'\n'operatingSystem_category2'\n'operatingSystem_cpe'\n'operatingSystem_cpeId'\n'operatingSystem_cpeType'\n'operatingSystem_edition'\n'operatingSystem_fullName'\n'operatingSystem_installDate'\n'operatingSystem_lifecycle'\n'operatingSystem_lifecycle_detectionScore'\n'operatingSystem_lifecycle_eolDate'\n'operatingSystem_lifecycle_eolSupportStage'\n'operatingSystem_lifecycle_eosDate'\n'operatingSystem_lifecycle_eosSupportStage'\n'operatingSystem_lifecycle_gaDate'\n'operatingSystem_lifecycle_lifeCycleConfidence'\n'operatingSystem_lifecycle_stage'\n'operatingSystem_marketVersion'\n'operatingSystem_osName'\n'operatingSystem_productFamily'\n'operatingSystem_productName'\n'operatingSystem_productUrl'\n'operatingSystem_publisher'\n'operatingSystem_release'\n'operatingSystem_update'\n'operatingSystem_version'\n'organizationName'\n'passiveSensor'\n'processor'\n'provider'\n'riskScore'\n'sensor'\n'sensorLastUpdatedDate'\n'sensor_activatedForModules'\n'sensor_firstEasmScanDate'\n'sensor_lastComplianceScan'\n'sensor_lastEasmScanDate'\n'sensor_lastFullScan'\n'sensor_lastPcScanDateAgent'\n'sensor_lastPcScanDateScanner'\n'sensor_lastVMScan'\n'sensor_lastVmScanDateAgent'\n'sensor_lastVmScanDateScanner'\n'sensor_pendingActivationForModules'\n'serviceList'\n'softwareComponent'\n'softwareListData'\n'subdomain'\n'tagList'\n'timeZone'\n'totalMemory'\n'userAccountListData'\n'volumeListData'\n'whois'\n</code></pre>"},{"location":"gav/#qualysdk-gav-cli-tool","title":"<code>qualysdk-gav</code> CLI tool","text":"<p>The <code>qualysdk-gav</code> CLI tool is a command-line interface for the GAV portion of the SDK. It allows you to quickly pull down results from GAV APIs and save them to a XLSX file.</p> <p>Heads Up!: If using PowerShell, you may need to use the <code>--%</code> flag to pass arguments to the script due to how PowerShell handles backticks. For example: <code>qualysdk-gav --% -u &lt;username&gt; -p &lt;password&gt; query_assets --kwarg filter operatingSystem.category1:`Windows`</code></p>"},{"location":"gav/#usage","title":"Usage","text":"<pre><code>usage: qualysdk-gav [-h] -u USERNAME -p PASSWORD [-P {qg1,qg2,qg3,qg4}] {count_assets,get_all_assets,get_asset,query_assets} ...\n\nCLI script to quickly perform Global AssetView (GAV) operations using qualysdk\n\npositional arguments:\n  {count_assets,get_all_assets,get_asset,query_assets}\n                        Action to perform\n    count_assets        Count how many assets match a GAV QQL filter &amp; save to a JSON file.\n    get_all_assets      Pull a list of all assets in the GAV API.\n    get_asset           Get a specific asset by asset ID (not host ID) &amp; save to a JSON file.\n    query_assets        Query assets based on a GAV QQL filter.\n\noptions:\n  -h, --help            show this help message and exit\n  -u USERNAME, --username USERNAME\n                        Qualys username\n  -p PASSWORD, --password PASSWORD\n                        Qualys password\n  -P {qg1,qg2,qg3,qg4}, --platform {qg1,qg2,qg3,qg4}\n                        Qualys platform\n</code></pre>"},{"location":"json/","title":"JSON Support","text":"<p>the SDK supports converting most dataclasses and <code>BaseList</code>s of dataclasses to JSON. This is done using the <code>serialized()</code> method. These methods convert the dataclass or <code>BaseList</code> to a dictionary or list of dictionaries. There is also the <code>dump_json</code> method, which is essentially the SDK's version of <code>json.dumps</code>. The reason for these methods is to provide a consistent way to convert dataclasses and <code>BaseList</code>s to JSON, as the standard <code>json</code> module often conflicts with some of the data types used in the SDK, mainly those from the <code>datetime</code> and <code>ipaddress</code> modules.</p> Method Description <code>&lt;dataclass&gt;.serialized</code> Converts a dataclass to a JSON-serializable dictionary. Optional parameters are <code>indent</code> and <code>exclude</code>. <code>&lt;BaseList&gt;.serialized</code> Converts a <code>BaseList</code> to a JSON-serializable list of dictionaries. Optional parameters are <code>indent</code> and <code>exclude</code>. <code>&lt;dataclass or BaseList&gt;.dump_json</code> Converts a dataclass or <code>BaseList</code> to a JSON string. Optional parameters are <code>indent</code> and <code>exclude</code>."},{"location":"json/#dataclass-mutations","title":"Dataclass Mutations","text":"<p>You can also control how dataclasses are parsed when built from an API response using the <code>qualysdk.DONT_EXPAND</code> singleton object. This is useful for controlling how the SDK parses certain dataclass attributes. Normally, the SDK will try to either create dataclass objects for any objects an API endpoint returns under a key or expand certain sub-keys to new attributes on the dataclass. For example, in the <code>WAS</code> module, ownership data for a <code>WebApp</code> is received from the API like:</p> <pre><code>...\n\"owner\": {\n    \"id\": 123456,\n    \"username\": \"admin\",\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Doe\"\n},\n...\n</code></pre> <p>Normally, the SDK would create new attributes, prefixing them with <code>owner_</code>, and set them to the values of the keys in the <code>owner</code> object. So, the above example would be parsed as:</p> <pre><code>WebApp(\n    owner_id=123456,\n    owner_username=\"admin\",\n    owner_firstName=\"Jane\",\n    owner_lastName=\"Doe\"\n)\n</code></pre> <p>However, by using:</p> <pre><code>from qualysdk import DONT_EXPAND\nDONT_EXPAND.flag = True\n</code></pre> <p>The SDK will not flatten the <code>owner</code> object, instead leaving it as it was received from the API. So, the above example would be parsed as:</p> <pre><code>WebApp(\n    owner={\n        \"id\": 123456,\n        \"username\": \"admin\",\n        \"firstName\": \"Jane\",\n        \"lastName\": \"Doe\"\n    }\n)\n</code></pre> <p>In SQL Server, this would look like:</p> <pre><code>SELECT \n    JSON_VALUE(owner, '$.id') AS id,\n    JSON_VALUE(owner, '$.firstName') AS firstName\nFROM \n    MY_WAS_JSON_TABLE\n</code></pre> id firstName 123456 Jane <p>This is mainly used for JSON exports, either to a file with <code>json.dump</code> or to a SQL database with <code>qualysdk.sql.upload_json</code>. By default, <code>DONT_EXPAND</code> is set to <code>False</code>, so the SDK will always try to expand dataclass attributes. This is done to make it easier to work with the SDK, as it is often easier to work with flat dataclasses than nested ones. However, if you want to keep the structure as close to the API response as possible, you can set <code>DONT_EXPAND</code> to <code>True</code>.</p>"},{"location":"patch/","title":"Patch Management APIs","text":"<p>PM APIs return data on patches, asset patch status/compliance, and patch jobs.</p> <p>Head's Up!: Qualys does not support MacOS for the patch management API.</p> <p>After running: <pre><code>from qualysdk.pm import *\n</code></pre></p> <p>You can use any of the endpoints currently supported:</p>"},{"location":"patch/#pm-endpoints","title":"PM Endpoints","text":"API Call Description <code>get_version</code> Returns the version of the PM API. <code>list_jobs</code> Returns jobs that match given kwargs. <code>get_job_results</code> Returns a summary of a job. <code>get_job_runs</code> Returns a list of runs of a job. <code>create_job</code> Creates a new job. <code>delete_job</code> Deletes a job or a list of jobs. <code>change_job_status</code> Enable/disable a job or a list of jobs. <code>lookup_cves</code> Returns a list of CVEs and other details associated with a QID. <code>get_patches</code> Returns a list of patches. <code>get_assets</code> Returns a list of assets. <code>get_patch_count</code> Returns the number of patches for a given platform that match <code>query</code> and <code>havingQuery</code>. <code>get_asset_count</code> Returns the number of assets for a given platform that match <code>query</code> and <code>havingQuery</code>. <code>lookup_host_uuids</code> Returns a list of tuples, containing host UUIDs for a given list of asset IDs. <code>get_patch_catalog</code> Returns the patch catalog for a given platform according to <code>patchId</code>. <code>get_packages_in_linux_patch</code> Returns the packages associated with a Linux patch. <code>get_products_in_windows_patch</code> Returns the products associated with a Windows patch. <code>count_product_vulns</code> Return the number of vulns (active and fixed) from products in your environment."},{"location":"patch/#get-pm-version-api","title":"Get PM Version API","text":"<p><code>get_version</code> returns the version of the PM API.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import get_version\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\nget_version(auth)\n&gt;&gt;&gt;\"3.1.0.0-29\"\n</code></pre>"},{"location":"patch/#list-jobs-api","title":"List Jobs API","text":"<p><code>list_jobs</code> returns a <code>BaseList</code> of patch management jobs in the user's account that match the given kwargs. if <code>platform='all'</code>, it uses threading to speed up the process.</p> <p>Head's Up!: For the <code>filter</code> kwarg, see the linked documentation for the possible values: Windows Jobs, Linux Jobs</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>platform</code> <code>Literal['all', 'windows', 'linux']='all'</code> The platform of the job \u274c <code>page_count</code> <code>Union[int, \"all\"] = \"all\"</code> The number of pages to return \u274c <code>filter</code> <code>str</code> The QQL filter to search for jobs \u274c <code>attributes</code> <code>str</code> The attributes to return in the response as a comma-separated string \u274c <code>coauthorJob</code> <code>bool=False</code> Only include jobs where the user is a coauthor \u274c <code>ownedJob</code> <code>bool=False</code> Only include jobs where the user is the sole owner \u274c <code>pageSize</code> <code>int=10</code> The number of jobs to return per page \u274c <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import list_jobs\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get all Windows jobs:\nwin_jobs = list_jobs(auth, 'windows')\n&gt;&gt;&gt;[\n    PMJob(\n        name=\"My Job\", \n        id=\"&lt;job_guid&gt;\", \n        platform=\"Windows\", \n        ...\n    ), \n    ...\n]\n</code></pre>"},{"location":"patch/#get-job-results-api","title":"Get Job Results API","text":"<p><code>get_job_results</code> returns the results of a patch management job.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>jobId</code> <code>Union[str, BaseList[PMJob, str]]</code> The ID(s) of the job to get results for. If a <code>BaseList</code> of <code>PMJob</code> objects is passed, the function will use threading. \u2705 <code>jobInstanceId</code> <code>str</code> The ID of the job instance to get results for. Should not be used with threading. \u274c <code>pageSize</code> <code>int=10</code> The number of results to return per page \u274c <code>sort</code> <code>str</code> The field to sort the results by \u274c <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import get_job_results, list_jobs\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get some job:\njob = list_jobs(auth, 'linux')[0]\n\n# Get the results summary for the job:\nresults = get_job_results(auth, job.id)\n&gt;&gt;&gt;JobResultSummary(\n    id='11111111-2222-3333-4444-555555555555', \n    name='My Job', \n    assetCount=1, \n    patchCount=1, \n    createdBy=&lt;username&gt;, \n    createdOn=datetime.datetime(2020, 1, 2, 3, 12, 30, 777000), \n    assets=[\n        PMAssetJobView(\n            id='aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee',\n            name='Patch Asset', \n            operatingSystem='Red Hat Enterprise Linux 9.5',\n            ...\n        )\n    ]\n)\n\n# Threading example:\njobs = list_jobs(auth)\nresults = get_job_results(auth, jobs)\n</code></pre>"},{"location":"patch/#get-job-runs-api","title":"Get Job Runs API","text":"<p><code>get_job_runs</code> returns a list of runs of a patch management job.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>jobId</code> <code>str</code> The ID(s) of the job to get runs for \u2705 <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import get_job_runs, list_jobs\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get some job:\njob = list_jobs(auth, 'linux')[0]\n\n# Get the runs for the job:\nruns = get_job_runs(auth, job.id)\n&gt;&gt;&gt;[\n    PMRun(\n        jobInstanceId=1, \n        jobId='11111111-2222-3333-4444-555555555555',\n        scheduledDateTime=datetime.datetime(2020, 1, 1, 15, 32, 18, tzinfo=datetime.timezone.utc), \n        timezoneType='SPECIFIC_TZ'\n    )\n]\n</code></pre>"},{"location":"patch/#create-job-api","title":"Create Job API","text":"<p><code>create_job</code> creates a new patch management job.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>name</code> <code>str</code> The name of the job \u2705 <code>platform</code> <code>Literal[\"Windows\", \"Linux\"]</code> The platform of the job \u2705 <code>jobType</code> <code>Literal[\"Install\", \"Rollback\"]</code> The type of job to create. <code>Rollback</code> is Windows-only. \u2705 <code>scheduleType</code> <code>Literal[\"On-demand\", \"Once\", \"Daily\", \"Weekly\", \"Monthly\"]</code> The type of schedule to use \u2705 <code>approvedPatches</code> <code>List[str]</code> An explicit list of patche GUIDs to add to the job \u274c <code>assetIds</code> <code>List[str]</code> The IDs of the assets to target \u274c <code>assetTagIds</code> <code>List[str]</code> The IDs of the asset tags to target \u274c <code>filterType</code> <code>Literal[\"all\", \"any\"] = \"any\"</code> The type of filter to use \u274c <code>exclusionTagIds</code> <code>List[str]</code> The IDs of the asset tags to exclude \u274c <code>exclusionAssetIds</code> <code>List[str]</code> The IDs of the assets to exclude \u274c <code>description</code> <code>str</code> The description of the job \u274c <code>coAuthorUserIds</code> <code>List[str]</code> The IDs of the co-authors to add to the job \u274c <code>exclusionFilterType</code> <code>Literal[\"all\", \"any\"] = \"any\"</code> The type of exclusion filter to use \u274c <code>startDateTime</code> <code>str</code> The start date and time of the job \u274c for <code>On-demand</code>, \u2705 for others <code>recurring</code> <code>bool=False</code> Whether the job is recurring \u274c <code>dayOfMonth</code> <code>int, 0 &lt;= x &lt;= 31</code> The day of the month to run the job \u274c <code>matchAllTagIds</code> <code>list[str]</code> The IDs of the asset tags to match \u274c <code>recurringLastDayOfMonth</code> <code>bool=False</code> Whether the job runs on the last day of the month \u274c <code>monthlyRecurringType</code> <code>Literal[0, 1, \"0\", \"1\"]</code> If 1, run on Patch Tuesday \u274c <code>patchTuesdayPlusXDays</code> <code>int, -27 &lt;= x &lt;= 27</code> The number of days before or after Patch Tuesday to run the job \u274c <code>recurringDayOfMonth</code> <code>int, 1 &lt;= x &lt;= 5</code> Run the job on a specific weekday of the month \u274c <code>recurringWeekDayOfMonth</code> <code>int, 0 &lt;= x &lt;= 6</code> The day of the week to run the job \u274c <code>recurringWeekDays</code> <code>str</code> like <code>\"0,0,0,0,0,0,0\"</code> Similar to cron. Replace a 0 with a 1 to run on that day. str[0] = Sunday \u274c <code>dynamicQQLType</code> <code>Literal[0,1,2]</code> 0 = Do not use QQL, 1 = use patch QQL, 2 = use vulnerability QQL \u274c <code>isDynamicPatchesQQL</code> <code>bool=False</code> Whether to use dynamic patches QQL \u274c <code>dynamicPatchesQQL</code> <code>str</code> The QQL to use for dynamic patches \u274c <code>continueOnPatchFailure</code> <code>bool=True</code> (Linux only) Whether to continue the job if a patch fails \u274c <code>preDeployment</code> <code>str</code> Specify a message to display before deployment starts \u274c <code>duringDeployment</code> <code>str</code> Specify a message to display during deployment \u274c <code>postDeployment</code> <code>str</code> Specify a message to display after deployment \u274c <code>onComplete</code> <code>str</code> Specify a message to display when the job completes \u274c <code>rebootCountdown</code> <code>str</code> Specify a message to display before a reboot \u274c <code>rebootOption</code> <code>str</code> Specify a message for after a reboot \u274c <code>suppressReboots</code> <code>bool=False</code> Allow users to suppress reboots \u274c <code>minimizeWindow</code> <code>bool=False</code> Allow users to minimize the deployment window \u274c <code>status</code> <code>Literal[\"Disabled\", \"Enabled\"] = \"Disabled\"</code> The status of the job \u274c <code>timeout</code> <code>int 1 &lt;= x &lt;= 168</code> for hours, <code>int 1 &lt;= x &lt;= 10080</code> for minutes The timeout for the job in hours or minutes (specified by timeoutUnit) \u274c <code>timeoutUnit</code> Literal[\"HOURS\", \"MINUTES\"] The unit of the timeout \u274c <code>timezoneType</code> <code>Literal[\"AGENT_TZ\", \"SPECIFIC_TZ\"]</code> The timezone type to use \u274c <code>timezone</code> <code>str</code> The (timezone)[https://docs.qualys.com/en/pm/api/deployment_job_resource/time_zones.htm] to use. For example: <code>\"America/New_York\"</code> \u274c <code>opportunisticDownloads</code> <code>bool=False</code> Whether to use opportunistic downloads. Only available for Windows \u274c <code>linkedJobId</code> <code>str</code> The ID of the job to link to \u274c <code>notificationType</code> <code>bool</code> If true, email notifications are sent \u274c <code>notificationConfigRecipientEmail</code> <code>str</code> The email to send notifications to \u274c <code>notificationConfigCompletedPercentage</code> <code>int 1 &lt;= x &lt;= 100</code> The percentage of completion to send notifications at \u274c <code>notificationEvents</code> <code>bool</code> If true, send notifications when <code>onJobStart</code> or <code>onJobComplete</code> are triggered \u274c <code>downloadRandomizeTime</code> <code>str</code> Provide the job randomize time in hours or minutes. Max is 2 hours or 120 minutes and must be less than the timeout/timeoutUnit \u274c <code>downloadRandomizeTimeUnit</code> <code>Literal[\"HOURS\", \"MINUTES\"]</code> The unit of the randomize time \u274c <code>additionalDynamicQQLType</code> <code>Literal[1,2]</code> 1 = Use patch QQL, 2 = Use vulnerability QQL \u274c <p>There are a few ways to pass in certain assets. If you have very particular assets in mind, you can make a GAV API call to get the agentIds of the assets you want to target:</p>"},{"location":"patch/#example-1-with-gav-query","title":"Example 1 with GAV Query","text":"<pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import create_job\nfrom qualysdk.gav import query_assets\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nwindows_assets = query_assets(\n  auth, \n  filter=\"operatingSystem.category: `Windows / Server`\",\n  includeFields=\"agentId\",  \n)\n\n# PM uses GUIDs for almost everything, so we need \n# to extract the GUIDs from the assets:\nwindows_assets_ids = [asset.agentId for asset in windows_assets]\n\n# Create a new job for Windows servers. Let's\n# focus on critical patches only:\njob = create_job(\n    auth, \n    platform='Windows', \n    jobType='Install', \n    scheduleType='On-demand', \n    assetIds=windows_assets_ids,\n    name='My Job',\n    dynamicPatchesQQL=\"vendorSeverity:`Critical`\",\n    dynamicQQLType=1,\n    isDynamicPatchesQQL=True,\n    status=\"Enabled\", # Immediately enable the job. By default, the job is disabled!\n)\n&gt;&gt;&gt;\"11111111-2222-3333-4444-555555555555\"\n</code></pre> <p>Or you can use asset tags to dynamically target assets. </p> <p>Using PM tag GUIDs is a bit more cumbersome since Qualys does not provide an easy way to look up tag GUIDs, but this method is much more flexible since new assets are picked up automatically by the job:</p>"},{"location":"patch/#example-2-with-tag-guids","title":"Example 2 with Tag GUIDs","text":"<pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import create_job\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Create a new job for Windows servers. Let's\n# assume we have a tag for all Windows servers\n# with GUID 22222222-3333-4444-5555-666666666666:\n\njob = create_job(\n    auth, \n    platform='Windows', \n    jobType='Install', \n    scheduleType='On-demand', \n    assetTagIds=['22222222-3333-4444-5555-666666666666'],\n    name='My Job',\n    dynamicPatchesQQL=\"vendorSeverity:`Critical`\",\n    dynamicQQLType=1,\n    isDynamicPatchesQQL=True,\n    status=\"Enabled\", # Immediately enable the job. By default, the job is disabled!\n)\n&gt;&gt;&gt;\"11111111-2222-3333-4444-555555555555\"\n</code></pre>"},{"location":"patch/#delete-job-api","title":"Delete Job API","text":"<p><code>delete_job</code> deletes a patch management job or a list of jobs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>jobId</code> <code>Union[str, BaseList[str]]</code> The ID(s) of the job to delete \u2705 <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import delete_job, list_jobs\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Delete a single job:\njob = list_jobs(auth, 'linux')[0]\ndelete_job(auth, job.id)\n&gt;&gt;&gt;[\n  {\n    \"id\":\"11111111-2222-3333-4444-555555555555\",\n    \"name\":\"My job\",\n    \"status\":\"success\"\n  }\n]\n\n# Delete multiple jobs:\njobs = list_jobs(auth)\ndelete_job(auth, [job.id for job in jobs])\n&gt;&gt;&gt;[\n  {\n    \"id\":\"11111111-2222-3333-4444-555555555555\",\n    \"name\":\"My job\",\n    \"status\":\"success\"\n  },\n  {\n    \"id\":\"22222222-3333-4444-5555-666666666666\",\n    \"name\":\"My other job\",\n    \"status\":\"success\"\n  },\n  ...\n]\n</code></pre>"},{"location":"patch/#change-job-status-api","title":"Change Job Status API","text":"<p><code>change_job_status</code> enables or disables a patch management job or a list of jobs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>action</code> <code>Literal[\"enable\", \"disable\"]</code> The action to perform \u2705 <code>jobId</code> <code>Union[str, BaseList[str]]</code> The ID(s) of the job to change the status of \u2705 <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import change_job_status, list_jobs\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Disable a single job:\njob = list_jobs(auth, 'linux')[0]\nchange_job_status(auth, 'disable', job.id)\n&gt;&gt;&gt;[\n  {\n    \"id\":\"11111111-2222-3333-4444-555555555555\",\n    \"name\":\"My job\",\n    \"status\":\"success\"\n  }\n]\n\n# Disable multiple jobs:\njobs = list_jobs(auth)\nchange_job_status(auth, 'disable', [job.id for job in jobs])\n&gt;&gt;&gt;[\n  {\n    \"id\":\"11111111-2222-3333-4444-555555555555\",\n    \"name\":\"My job\",\n    \"status\":\"success\"\n  },\n  {\n    \"id\":\"22222222-3333-4444-5555-666666666666\",\n    \"name\":\"My other job\",\n    \"status\":\"success\"\n  },\n  ...\n]\n</code></pre>"},{"location":"patch/#lookup-cves-for-qids-api","title":"Lookup CVEs for QIDs API","text":"<p><code>lookup_cves</code> returns a list of CVEs and other details associated with specified QIDs as a <code>BaseList</code> of <code>PMVulnerability</code> objects.</p> <p>This function accepts either a single QID as a string or integer, a list/BaseList of strings/integers, or a comma-separated string of QIDs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>qids</code> <code>Union[str, int, BaseList/list[str, int]]</code> The QID(s) to look up. Can be a list of strings/ints, a single int/string, or a comma-separated string \u2705 <code>threads</code> <code>int=5</code> The number of threads to use for the lookup. \u26a0\ufe0f Thread mode is only used if 1K+ <code>qids</code> are passed \u274c <pre><code>from qualysdk.auth import TokenAuth, BasicAuth\nfrom qualysdk.vmdr import query_kb\nfrom qualysdk.pm import lookup_cves\n\ntoken = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\nbasic = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get some QIDs:\nqids = query_kb(basic, page_count=1, ids='10000-11000')\n\n# Get the PM details/CVEs:\ncves = lookup_cves(token, [qid.QID for qid in qids])\n&gt;&gt;&gt;[\n  PMVulnerability(\n    id=10230, \n    title='Viralator CGI Input Validation Remote Shell Command Vulnerability', \n    cves=['CVE-2001-0849'], \n    detectedDate=datetime.datetime(2001, 11, 7, 16, 15, 57), \n    severity=5, \n    vulnType='VULNERABILITY'\n  ), \n  PMVulnerability(\n    id=10310, \n    title='Suspicious file register.idc', \n    cves=None, # Sometimes there are no CVEs!\n    detectedDate=datetime.datetime(2001, 4, 3, 4, 12, 9), \n    severity=1, \n    vulnType='POTENTIAL'\n  ),\n  ...\n]\n\n# Or you can pass in a single QID:\ncve = lookup_cves(token, 10230)\n&gt;&gt;&gt;PMVulnerability(\n  id=10230, \n  title='Viralator CGI Input Validation Remote Shell Command Vulnerability', \n  cves=['CVE-2001-0849'], \n  detectedDate=datetime.datetime(2001, 11, 7, 16, 15, 57), \n  severity=5, \n  vulnType='VULNERABILITY'\n)\n</code></pre>"},{"location":"patch/#get-patches-api","title":"Get Patches API","text":"<p><code>get_patches</code> returns a <code>BaseList</code> of <code>Patch</code> objects that match the given kwargs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>page_count</code> <code>Union[int, \"all\"] = \"all\"</code> The number of pages to return \u274c <code>pageSize</code> <code>int=1000</code> The number of patches to return per page \u274c <code>platform</code> <code>Literal[\"all\", \"windows\", \"linux\"] = \"all\"</code> The platform of the patches to return \u274c <code>query</code> <code>str=\"patchStatus:[Missing,Installed] and isSuperseded:false</code> FOR WINDOWS A patch QQL query to filter with. By default returns all of the latest patches if <code>platform=windows</code> \u274c <code>havingQuery</code> <code>str</code> A PM host QQL query to filter with \u274c <code>attributes</code> <code>str</code> The attributes to return in the response as a comma-separated string \u274c <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import get_patches\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get all patches that are severity 5\n# and only return their titles &amp; IDs:\npatches = get_patches(auth, query=\"vendorSeverity:5\", attributes=\"id,title\")\n&gt;&gt;&gt;[\n  Patch(\n    id='11111111-2222-3333-4444-555555555555', \n    title='My Patch',\n    ...\n  ),\n  Patch(\n    id='22222222-3333-4444-5555-666666666666', \n    title='My Other Patch',\n    ...\n  ),\n  ...\n]\n\n# Just get windows patches:\nwindows_patches = get_patches(auth, platform='windows')\n&gt;&gt;&gt;[\n  Patch(\n    id='11111111-2222-3333-4444-555555555555', \n    title='My Patch',\n    platform='Windows',\n    ...\n  ),\n  Patch(\n    id='22222222-3333-4444-5555-666666666666', \n    title='My Other Patch',\n    ...\n  ),\n  ...\n]\n</code></pre>"},{"location":"patch/#get-assets-api","title":"Get Assets API","text":"<p><code>get_assets</code> returns a <code>BaseList</code> of <code>Asset</code> objects that match the given kwargs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>page_count</code> <code>Union[int, \"all\"] = \"all\"</code> The number of pages to return \u274c <code>pageSize</code> <code>int=400</code> The number of assets to return per page \u274c <code>platform</code> <code>Literal[\"all\", \"windows\", \"linux\"] = \"all\"</code> The platform of the assets to return \u274c <code>query</code> <code>str</code> A patch QQL query to filter with \u274c <code>havingQuery</code> <code>str</code> A PM host QQL query to filter with \u274c <code>attributes</code> <code>str</code> The attributes to return in the response as a comma-separated string \u274c <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import get_assets\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get all assets that are missing patches:\nassets = get_assets(auth, query=\"patchStatus:Missing\")\n&gt;&gt;&gt;[\n  Asset(\n    id='11111111-2222-3333-4444-555555555555', \n    name='My Asset',\n    ...\n  ),\n  Asset(\n    id='22222222-3333-4444-5555-666666666666', \n    name='My Other Asset',\n    ...\n  ),\n  ...\n]\n</code></pre>"},{"location":"patch/#get-patch-count-api","title":"Get Patch Count API","text":"<p><code>get_patch_count</code> returns the number of patches for a given platform that match the given query and havingQuery.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>platform</code> <code>Literal[\"windows\", \"linux\"] = \"windows\"</code> The platform of the patches to return \u2705 <code>query</code> <code>str</code> A patch QQL query to filter with \u274c <code>havingQuery</code> <code>str</code> A PM host QQL query to filter with \u274c <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import get_patch_count\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get the number of patches for Windows\n# that are critical severity:\ncount = get_patch_count(auth, platform='windows', query=\"vendorSeverity:Critical\")\n&gt;&gt;&gt;100\n</code></pre>"},{"location":"patch/#lookup-host-uuids-from-asset-ids-api","title":"Lookup Host UUIDs from Asset IDs API","text":"<p><code>lookup_host_uuids</code> returns a list of host UUIDs for a given list of asset IDs.</p> <p><code>assetIds</code> can be a list/BaseList of strings/integers, a single int/string, or a comma-separated string.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>assetIds</code> <code>Union[list[str, int], BaseList[str, int], str, int]</code> The IDs of the assets to look up \u2705"},{"location":"patch/#example-1-with-gav-query_1","title":"Example 1 with GAV Query","text":"<pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import lookup_host_uuids\nfrom qualysdk.gav import query_assets # Could also use get_all_assets!\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get some assets. All we need is assetId.\n# We can also filter for assets activated for PM:\nassets = query_assets(\n  auth, \n  includeFields='assetId',\n  filter='sensors.activatedForModules:`PM`\n)\n\n# Get the host UUIDs for the assets:\nuuids = lookup_host_uuids(auth, [asset.assetId for asset in assets])\n&gt;&gt;&gt;[\n  (\n    123456789,\n    '11111111-2222-3333-4444-555555555555'\n  ),\n  (\n    987654321,\n    '22222222-3333-4444-5555-666666666666'\n  ),\n  ...\n]\n</code></pre>"},{"location":"patch/#example-2-with-list-of-assetids","title":"Example 2 with List of <code>assetIds</code>","text":"<pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import lookup_host_uuids\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nids = [123456789, 987654321]\nuuids = lookup_host_uuids(auth, ids)\n&gt;&gt;&gt;[\n  (\n    123456789,\n    '11111111-2222-3333-4444-555555555555'\n  ),\n  (\n    987654321,\n    '22222222-3333-4444-5555-666666666666'\n  )\n]\n</code></pre>"},{"location":"patch/#example-3-with-comma-separated-string-of-assetids","title":"Example 3 with Comma-Separated String of <code>assetIds</code>","text":"<pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import lookup_host_uuids\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nids = '123456789,987654321'\nuuids = lookup_host_uuids(auth, ids)\n&gt;&gt;&gt;[\n  (\n    123456789,\n    '11111111-2222-3333-4444-555555555555'\n  ),\n  (\n    987654321,\n    '22222222-3333-4444-5555-666666666666'\n  )\n]\n</code></pre>"},{"location":"patch/#get-patch-catalog-api","title":"Get Patch Catalog API","text":"<p><code>get_patch_catalog</code> returns the patch catalog for a given platform according to <code>patchId</code>.</p> <p><code>patchId</code> can be a list/BaseList of strings/integers, a single int/string, or a comma-separated string.</p> <p>Head's Up!: You should only pass in one platform at a time. If you pass in a mix of both Windows and Linux patches, the function will only return the patches that match the <code>platform</code> parameter (default is Windows).</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>patchId</code> <code>Union[list[str, int], BaseList[str, int], str, int]</code> The IDs of the patches to look up \u2705 <code>platform</code> <code>Literal[\"windows\", \"linux\"] = \"windows\"</code> The platform of the patches to return. Defaults to windows \u274c <code>attributes</code> <code>str</code> The attributes to return in the response as a comma-separated string \u274c <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import get_patch_catalog, get_patches\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get some Linux patches:\npatches = get_patches(\n  auth, \n  platform='linux', \n  attributes=\"id\"\n)\n\n# Get the catalog entries:\ncatalog = get_patch_catalog(\n  auth, \n  [patch.id for patch in patches], \n  platform='linux'\n)\n&gt;&gt;&gt;[\n  CatalogPatch(\n    \"patchId\": \"11111111-2222-3333-4444-555555555555\",\n    \"title\": \"My Patch\",\n    \"vendor\": \"My Vendor\",\n    ...\n  ),\n  CatalogPatch(\n    \"patchId\": \"22222222-3333-4444-5555-666666666666\",\n    \"title\": \"My Other Patch\",\n    ...\n  ),\n  ...\n]\n</code></pre>"},{"location":"patch/#get-packages-associated-with-linux-patches-api","title":"Get Packages Associated with Linux Patches API","text":"<p><code>get_packages_in_linux_patch</code> returns the packages associated with a Linux patch.</p> <p>If a <code>BaseList</code> or a <code>list</code> of patch IDs is passed, the function will use threading to speed up the process.</p> <p>Warning: You should filter down the patches as much as possible before passing them into this function. If you bulk-pass in a lot of patches, you will almost certainly hit a rate limit. PM APIs do not return the headers necessary for the SDK to auto-recover from rate limits.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>patchId</code> <code>Union[str, BaseList[str]]</code> The ID(s) of the patch to get packages for \u2705 <code>threads</code> <code>int=5</code> The number of threads to use for the lookup. \u274c <code>filter</code> <code>str</code> The QQL filter to search for packages \u274c <code>pageNumber</code> <code>int</code> The page number to return. The SDK will handle pagination for you. Users can use this if <code>page_count</code> is 1 to pull a specific page. \u274c <code>pageSize</code> <code>int=10</code> The number of packages to return per page \u274c <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import get_packages_in_linux_patch, get_patches\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get some Linux patches:\npatches = get_patches(\n  auth, \n  platform='linux', \n  attributes=\"id\",\n  query=\"vendorSeverity:Critical\"\n)\n\n# Get the packages for the patches:\npackages = get_packages_in_linux_patch(\n  auth, \n  [patch.id for patch in patches]\n)\n&gt;&gt;&gt;PackageDetail(\n  packageName='minidlna_1.3.0+dfsg-2+deb11u2', \n  architecture='noarch', \n  patchId='48e7d965-5f86-3118-a35f-b8fd1463e6b0'\n)\n</code></pre>"},{"location":"patch/#get-products-associated-with-windows-patches-api","title":"Get Products Associated with Windows Patches API","text":"<p><code>get_products_in_windows_patch</code> returns the products associated with a Windows patch.</p> <p>If a <code>BaseList</code> or a <code>list</code> of patch IDs is passed, the function will use threading to speed up the process.</p> <p>Warning: You should filter down the patches as much as possible before passing them into this function. If you bulk-pass in a lot of patches, you will almost certainly hit a rate limit. PM APIs do not return the headers necessary for the SDK to auto-recover from rate limits.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>patchId</code> <code>Union[str, BaseList[str]]</code> The ID(s) of the patch to get products for \u2705 <code>threads</code> <code>int=5</code> The number of threads to use for the lookup. \u274c <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import get_products_in_windows_patch, get_patches\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get some Windows patches:\npatches = get_patches(\n  auth, \n  platform='windows', \n  attributes=\"id\",\n  query=\"vendorSeverity:Critical\"\n)\n\n# Get the products for the patches:\nproducts = get_products_in_windows_patch(\n  auth, \n  [patch.id for patch in patches]\n)\n&gt;&gt;&gt;AssociatedProduct(\n  product=['Adobe Audition 2024 24 x64'], \n  patchId='2c1649c0-a18a-3f77-8c52-a6ea297ab295'\n)\n</code></pre>"},{"location":"patch/#count-product-vulnerabilities-api","title":"Count Product Vulnerabilities API","text":"<p><code>count_product_vulns</code> returns the number of active and fixed vulnerabilities stemming from products.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.TokenAuth</code> Authentication object \u2705 <code>severityList</code> <code>Union[str, list[Literal[\"Critical\", \"Important\", \"Moderate\", \"Low\", \"None\"]]]</code> The severity levels to count vulnerabilities for. Can be a list or strings or a comma-separated string \u274c <code>tagUUIDs</code> <code>Union[str, list[str]]</code> The UUIDs of the tags to filter with \u274c <pre><code>from qualysdk.auth import TokenAuth\nfrom qualysdk.pm import count_product_vulns\n\nauth = TokenAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get the number of Critical and Important\n# vulnerabilities for all products:\ncount = count_product_vulns(\n  auth, \n  severityList=[\"Critical\", \"Important\"]\n)\n&gt;&gt;&gt;[\n  ProductVulnCount(\n      name='Windows', \n      totalQIDCount=123, \n      patchableQIDCount=None, \n      type='APP_FAMILY', \n      patchableQIDs=None, \n      totalQIDs=None, \n      severity='Critical'\n    ), \n  ProductVulnCount(\n    name='Office', \n    totalQIDCount=123, \n    patchableQIDCount=None, \n    type='APP_FAMILY', \n    patchableQIDs=None, \n    totalQIDs=None, \n    severity='Critical'\n  ),\n  ...\n]\n</code></pre>"},{"location":"patch/#qualysdk-pm-cli-tool","title":"<code>qualysdk-pm</code> CLI tool","text":"<p>The <code>qualysdk-pm</code> CLI tool is a command-line interface for the PM portion of the SDK. It allows you to quickly pull down results from PM APIs and save them to an XLSX/TXT file.</p> <p>Use <code>--help</code> on each command to see the available options.</p>"},{"location":"patch/#usage","title":"Usage","text":"<pre><code>usage: qualysdk-pm [-h] -u USERNAME -p PASSWORD [-P {qg1,qg2,qg3,qg4}] {list_jobs,get_job_results,get_job_runs,lookup_cves,get_patches,get_patch_count,get_assets,get_patch_catalog} ...\n\nCLI script to quickly perform Patch Management (PM) operations using qualysdk\n\npositional arguments:\n  {list_jobs,get_job_results,get_job_runs,lookup_cves,get_patches,get_patch_count,get_assets,get_patch_catalog}\n                        Action to perform\n    list_jobs           Get a list of PM jobs.\n    get_job_results     Get results for a PM job.\n    get_job_runs        Get runs for a PM job.\n    lookup_cves         Look up CVEs for a given QID(s).\n    get_patches         Get patches for a given platform.\n    get_patch_count     Get the number of patches available for a platform according to query and havingQuery.\n    get_assets          Get assets for a given platform.\n    get_patch_catalog   Get patch catalog entries for a given platform.\n\noptions:\n  -h, --help            show this help message and exit\n  -u USERNAME, --username USERNAME\n                        Qualys username\n  -p PASSWORD, --password PASSWORD\n                        Qualys password\n  -P {qg1,qg2,qg3,qg4}, --platform {qg1,qg2,qg3,qg4}\n                        Qualys platform\n</code></pre>"},{"location":"quickstart/","title":"Getting Started","text":"<p>There are a few ways to get started with <code>qualysdk</code>:</p>"},{"location":"quickstart/#installing-from-pypi","title":"Installing From PyPI","text":"<p>For the latest (hopefully stable) version, you can install from PyPI:</p> <pre><code>pip install qualysdk\n</code></pre>"},{"location":"quickstart/#upgrading-the-sdk","title":"Upgrading the SDK","text":"<p>There are two ways to upgrade the SDK from PyPI:</p>"},{"location":"quickstart/#using-pip","title":"Using Pip","text":"<pre><code>pip install --upgrade qualysdk\n</code></pre>"},{"location":"quickstart/#using-qualysdk-updater","title":"Using qualysdk-updater","text":"<p><code>qualysdk-updater</code> is a CLI tool that is installed alongside the SDK. It can be used to check for updates and install them.</p> <pre><code>usage: qualysdk-updater [-h] [-v] [-c] [-i] [-y]\n\nCheck for and install updates for qualysdk\n\noptions:\n  -h, --help     show this help message and exit\n  -v, --version  Display the current version of qualysdk\n  -c, --check    Check if a new version of qualysdk is available\n  -i, --install  Install the latest version of qualysdk\n  -y, --yes      Bypass the confirmation prompt when installing\n</code></pre> <p>To bypass the confirmation prompt when installing, use the <code>-y</code> flag.</p> <pre><code>qualysdk-updater -i -y\n\n# Example output:\n\ud83d\udfe7 An update is available!\n\ud83d\udcc5 Latest Version: vX.X.X\n\ud83d\udcc5 Release Date: 2024-10-09T12:00:00\n\u2705 MD5: e15ebb2b077d07eb9a646a5425aafef4\n\u2705 BLAKE2b_256: a6a21a9c9cb35fc8c8cad440b1e5873f82894b093dd5d0d2c532704b5e0b0ba6\n\u2705 SHA256: d069561f1f82537e858de32375c239c12cad4bb68ca996f9902f92d48aae490e\n\ud83d\udc08 GitHub Release Notes: https://github.com/0x41424142/qualysdk/releases/tag/vX.X.X\n\ud83d\udc0d PyPI Page: https://pypi.org/project/qualysdk/X.X.X/ \n\ud83d\udfe7  Installing vX.X.X...\n...\n\u2705 Qualysdk has been updated to vX.X.X\n\n# Confirm with the version flag or check flag:\nqualysdk-updater -v\n&gt;&gt;&gt;Qualysdk version currently installed: vX.X.X\n\nqualysdk-updater -c\n&gt;&gt;&gt;\u2705 Qualysdk is up to date (vX.X.X)\n</code></pre>"},{"location":"quickstart/#installing-from-github-bleeding-edge","title":"Installing From GitHub (Bleeding Edge)","text":"<p>If you want the latest and greatest, you can install from GitHub:</p>"},{"location":"quickstart/#installing-with-poetry","title":"Installing with Poetry","text":"<pre><code>git clone https://github.com/0x41424142/qualysdk.git\ncd qualysdk\npoetry shell #if you want to use a venv\npoetry install\n</code></pre>"},{"location":"quickstart/#installing-with-pip","title":"Installing with Pip","text":"<pre><code>git clone https://github.com/0x41424142/qualysdk.git\ncd qualysdk\npip install .\n</code></pre>"},{"location":"sql/","title":"Uploading Data to a SQL Database","text":"<p><code>qualysdk</code> supports uploading data it has pulled to a SQL Database using various <code>upload_&lt;module&gt;_*</code> functions. Thanks to the Pandas library and qualysdk's <code>BaseList</code> class, uploading is rather easy. <code>qualysdk</code> automatically will create the table for you if it does not exist, and will append data to the table if it does exist. The <code>import_datetime</code> field is also added to each table to track when the data was uploaded.</p>"},{"location":"sql/#supported-databases","title":"Supported Databases","text":"<ul> <li>SQL Server (<code>db_type='mssql'</code>)</li> <li>Postgresql (<code>db_type='postgresql'</code>)</li> <li>MySQL/MariaDB (<code>db_type='mysql'</code>)</li> <li>SQLite3 (<code>db_type='sqlite'</code>)</li> </ul>"},{"location":"sql/#steps-to-get-going","title":"Steps to Get Going","text":""},{"location":"sql/#step-1-importing-functionality","title":"Step 1: Importing Functionality","text":"<pre><code>from qualysdk.sql import *\n</code></pre>"},{"location":"sql/#step-2-building-the-sqlalchemy-connection","title":"Step 2: Building the SQLAlchemy Connection","text":"<p>Next, build your connection object. <code>qualysdk</code> supports username/password auth as well as trusted connections for SQL Server. You can specify the type of DB you are connecting to (default is <code>\"mssql\"</code>) via <code>db_type</code>:</p> <pre><code># Get a sqlalchemy.Connection using trusted_connection to SQL Server.\n# since db_type defaults to \"mssql\", you can omit it.\ncnxn = db_connect(\n    host='10.0.0.1', \n    db='qualysdata', \n    trusted_cnxn=True, \n    port=1433\n)\n\n# Get a sqlalchemy.Connection with username/password \n# auth to a Postgresql DB:\ncnxn = db_connect(\n    host='10.0.0.1', \n    db='qualysdata', \n    username='Jane', \n    password=&lt;password&gt;, \n    db_type='postgresql', \n    port=5432\n)\n</code></pre> <p>Note that you are required to call <code>.close()</code> on the connection object when you are done with it to close the connection to the DB.</p> <pre><code>cnxn = db_connect(host='10.0.0.1', db='qualysdata', trusted_cnxn=True)\n\n# Do some stuff with the connection\n...\n\ncnxn.close()\n</code></pre> <p>For connections to a SQLite3 database, you can use the following:</p> <pre><code>cnxn = db_connect(\n    db_type='sqlite',\n    db='C:\\\\path\\\\to\\\\your\\\\sqlite.db' #Windows\n)\n</code></pre>"},{"location":"sql/#step-3-fire-away","title":"Step 3: Fire Away!","text":"<p>And finally, you can use the following supported functions:</p> <p>Head's Up: More upload functions are coming soon!</p> <p>Each upload function takes 2 positional parameters. The first is the <code>BaseList</code> of data, and the second is the <code>sqlalchemy.Connection</code> object you built above. </p> <p>Functions also take an optional <code>override_import_dt</code> parameter that will set the resulting SQL table's <code>import_datetime</code> field to the value you specify. <code>override_import_dt</code> is a <code>datetime.datetime</code> object.</p> <p>The final optional parameter is <code>table_name</code>. If you want to specify a custom table name, you can do so with this parameter. Default table names are listed below. The one exception to this is <code>vmdr.get_hld()</code>, which accepts <code>vuln_table_name</code> and <code>hosts_table_name</code> as optional parameters to specify the table names for the detections and hosts, respectively.</p> Function Name Module <code>qualysdk</code> Function Data Source Default SQL Table Name <code>upload_vmdr_ags</code> VMDR <code>vmdr.get_ag_list()</code> <code>vmdr_assetgroups</code> <code>upload_vmdr_kb</code> VMDR <code>vmdr.query_kb()</code> <code>vmdr_knowledgebase</code> <code>upload_vmdr_kb_qvs</code> VMDR <code>vmdr.get_kb_qvs()</code> <code>vmdr_kb_qvs</code> <code>upload_vmdr_hosts</code> VMDR <code>vmdr.get_host_list()</code> <code>vmdr_hosts_list</code> <code>upload_vmdr_hld</code> VMDR <code>vmdr.get_hld()</code> <code>vmdr_hld_hosts_list</code> for hosts and <code>vmdr_hld_detections</code> for detections <code>upload_vmdr_cve_hld</code> VMDR <code>vmdr.get_cve_hld()</code> <code>vmdr_cve_hld_host_list</code> for hosts and <code>vmdr_cve_hld_detections</code> for detections <code>upload_vmdr_ips</code> VMDR <code>vmdr.get_ip_list()</code> <code>vmdr_ips</code> <code>upload_vmdr_scanners</code> VMDR <code>vmdr.get_scanner_list()</code> <code>vmdr_scanners</code> <code>upload_vmdr_static_search_lists</code> VMDR <code>vmdr.get_static_searchlists()</code> <code>vmdr_static_searchlists</code> <code>upload_vmdr_dynamic_search_lists</code> VMDR <code>vmdr.get_dynamic_searchlists()</code> <code>vmdr_dynamic_searchlists</code> <code>upload_vmdr_users</code> VMDR <code>vmdr.get_user_list()</code> <code>vmdr_users</code> <code>upload_vmdr_scan_list</code> VMDR <code>vmdr.get_scan_list()</code> <code>vmdr_scans</code> <code>upload_vmdr_report_list</code> VMDR <code>vmdr.get_report_list()</code> <code>vmdr_reports</code> <code>upload_vmdr_scheduled_report_list</code> VMDR <code>vmdr.get_scheduled_report_list()</code> <code>vmdr_scheduled_reports</code> <code>upload_vmdr_template_list</code> VMDR <code>vmdr.get_template_list()</code> <code>vmdr_report_templates</code> <code>upload_vmdr_activity_log</code> VMDR <code>vmdr.get_activity_log()</code> <code>vmdr_activity_log</code> <code>upload_gav_hosts</code> GAV <code>gav.get_all_assets()</code> or <code>gav.query_assets()</code> <code>gav_hosts</code> <code>upload_cloud_agents</code> Cloud Agent <code>cloud_agent.list_agents()</code> <code>cloud_agent_agents</code> <code>upload_totalcloud_aws_connectors</code> TotalCloud <code>totalcloud.get_connectors()</code> <code>totalcloud_aws_connectors</code> <code>upload_totalcloud_azure_connectors</code> TotalCloud <code>totalcloud.get_connectors()</code> <code>totalcloud_azure_connectors</code> <code>upload_totalcloud_control_metadata</code> TotalCloud <code>totalcloud.get_control_metadata()</code> <code>totalcloud_control_metadata</code> <code>upload_totalcloud_aws_s3</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='s3')</code> <code>totalcloud_aws_s3_inventory</code> <code>upload_totalcloud_aws_ec2</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='ec2')</code> <code>totalcloud_aws_ec2_inventory</code> <code>upload_totalcloud_aws_acl</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='acl')</code> <code>totalcloud_aws_acl_inventory</code> <code>upload_totalcloud_aws_rds</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='rds')</code> <code>totalcloud_aws_rds_inventory</code> <code>upload_totalcloud_aws_iamuser</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='iamuser')</code> <code>totalcloud_aws_iamuser_inventory</code> <code>upload_totalcloud_aws_vpc</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='vpc')</code> <code>totalcloud_aws_vpc_inventory</code> <code>upload_totalcloud_aws_securitygroup</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='sg')</code> <code>totalcloud_aws_securitygroup_inventory</code> <code>upload_totalcloud_aws_lambda</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='lambda')</code> <code>totalcloud_aws_lambda_inventory</code> <code>upload_totalcloud_aws_subnet</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='subnet')</code> <code>totalcloud_aws_subnet_inventory</code> <code>upload_totalcloud_aws_internetgateway</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='internet gateway')</code> <code>totalcloud_aws_internetgateway_inventory</code> <code>upload_totalcloud_aws_loadbalancer</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='load balancer')</code> <code>totalcloud_aws_loadbalancer_inventory</code> <code>upload_totalcloud_aws_routetable</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='route table')</code> <code>totalcloud_aws_routetable_inventory</code> <code>upload_totalcloud_aws_ebsvolume</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='ebs volume')</code> <code>totalcloud_aws_ebsvolume_inventory</code> <code>upload_totalcloud_aws_autoscalinggroup</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='auto scaling group')</code> <code>totalcloud_aws_autoscalinggroup_inventory</code> <code>upload_totalcloud_aws_ekscluster</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='eks cluster')</code> <code>totalcloud_aws_ekscluster_inventory</code> <code>upload_totalcloud_aws_eksnodegroup</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='eks nodegroup')</code> <code>totalcloud_aws_eksnodegroup_inventory</code> <code>upload_totalcloud_aws_fargateprofile</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='eks fargate profile')</code> <code>totalcloud_aws_fargateprofile_inventory</code> <code>upload_totalcloud_aws_vpcendpoint</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='vpc endpoint')</code> <code>totalcloud_aws_vpcendpoint_inventory</code> <code>upload_totalcloud_aws_vpcendpointservice</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='vpc endpoint service')</code> <code>totalcloud_aws_vpcendpointservice_inventory</code> <code>upload_totalcloud_aws_iamgroup</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='iam group')</code> <code>totalcloud_aws_iamgroup_inventory</code> <code>upload_totalcloud_aws_iampolicy</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='iam policy')</code> <code>totalcloud_aws_iampolicy_inventory</code> <code>upload_totalcloud_aws_iamrole</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='iam role')</code> <code>totalcloud_aws_iamrole_inventory</code> <code>upload_totalcloud_aws_sagemakernotebook</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='sagemaker notebook')</code> <code>totalcloud_aws_sagemakernotebook_inventory</code> <code>upload_totalcloud_aws_cloudfrontdistribution</code> TotalCloud <code>totalcloud.get_inventory(provider='aws', resourceType='cloudfront distribution')</code> <code>totalcloud_aws_cloudfrontdistribution_inventory</code> <code>upload_totalcloud_remediation_activities</code> TotalCloud <code>totalcloud.get_remediation_activities()</code> <code>totalcloud_remediation_activities</code> <code>upload_totalcloud_azure_vm</code> TotalCloud <code>totalcloud.get_inventory(provider='azure', resourceType='vm')</code> <code>totalcloud_azure_vm_inventory</code> <code>upload_totalcloud_azure_webapp</code> TotalCloud <code>totalcloud.get_inventory(provider='azure', resourceType='web app')</code> <code>totalcloud_azure_webapp_inventory</code> <code>upload_totalcloud_azure_storageaccount</code> TotalCloud <code>totalcloud.get_inventory(provider='azure', resourceType='storage account')</code> <code>totalcloud_azure_storageaccount_inventory</code> <code>upload_cs_containers</code> Container Security <code>cs.list_containers()</code> <code>cs_containers</code> <code>upload_cs_software</code> Container Security <code>cs.get_software_on_container()</code> <code>cs_software</code> <code>upload_cs_vulns</code> Container Security <code>cs.get_container_vulns()</code> <code>cs_vulns</code> <code>upload_was_webapps</code> WAS <code>was.get_webapps()</code> or <code>was.get_webapps_verbose()</code> (<code>get_webapps_verbose()</code> is recommended!) <code>was_webapps</code> <code>upload_was_authentication_records</code> WAS <code>was.get_authentication_records()</code> or <code>was.get_authentication_records_verbose()</code> (<code>get_webapps_verbose()</code> is recommended!) <code>was_authentication_records</code> <code>upload_was_findings</code> WAS <code>was.get_findings()</code> or <code>was.get_findings_verbose()</code> (<code>get_findings_verbose()</code> is recommended!) <code>was_findings</code> <code>upload_was_scans</code> WAS <code>was.get_scans()</code> or <code>was.get_scans_verbose()</code> (<code>get_scans_verbose()</code> is recommended!) <code>was_scans</code> <code>upload_pm_jobs</code> Patch Management <code>pm.list_jobs()</code> <code>pm_jobs</code> <code>upload_pm_job_results</code> Patch Management <code>pm.get_job_results()</code> <code>pm_job_results_jobResults</code> for job summaries and <code>pm_job_results_assets</code> for assets (key = jobResults.id -&gt; assets.jobId) <code>upload_pm_job_runs</code> Patch Management <code>pm.get_job_runs()</code> <code>pm_job_runs</code> <code>upload_pm_cves</code> Patch Management <code>pm.lookup_cves()</code> <code>pm_cves_for_qids</code> <code>upload_pm_patches</code> Patch Management <code>pm.get_patches()</code> <code>pm_patches</code> <code>upload_pm_assets</code> Patch Management <code>pm.get_assets()</code> <code>pm_assets</code> <code>upload_pm_assetids_to_uuids</code> Patch Management <code>pm.lookup_host_uuids()</code> <code>pm_assetids_to_uuids</code> <code>upload_pm_patch_catalog</code> Patch Management <code>pm.get_patch_catalog()</code> <code>pm_patch_catalog</code> <code>upload_pm_linux_packages</code> Patch Management <code>pm.get_packages_in_linux_patch()</code> <code>pm_linux_packages</code> <code>upload_pm_windows_products</code> Patch Management <code>pm.get_products_in_windows_patch()</code> <code>pm_windows_products</code> <code>upload_pm_product_vuln_counts</code> Patch Management <code>pm.count_product_vulns()</code> <code>pm_product_vuln_counts</code> <code>upload_cert_certs</code> Certificate View <code>cert.list_certs()</code> <code>cert_certs</code> for certificates and <code>cert_assets</code> for assets (key = certs.id -&gt; assets.certId) <code>upload_tagging_tags</code> Tagging <code>tagging.get_tags()</code> <code>tagging_tags</code> <code>upload_admin_userdata</code> Administration <code>admin.search_users()</code> or <code>admin.get_user_details()</code> <code>admin_userdata</code> <pre><code>from qualysdk.sql import *\n\n# Get a connection to the DB\ncnxn = db_connect(host='10.0.0.1', db='qualysdata', trusted_cnxn=True)\n\n# Upload a previous vmdr.get_host_list() call to the DB, with override_import_dt set\n# to 10-25-2023 12:00:00\ndt = datetime.datetime(2023, 10, 25, 12, 0, 0)\nuploaded = upload_vmdr_hosts(vmdr_hosts, cnxn, override_import_dt=dt)\n&gt;&gt;&gt;Uploaded 12345 records to vmdr_hosts_list\n</code></pre>"},{"location":"sql/#a-friendly-recommendation-for-getting-data","title":"A Friendly Recommendation For Getting Data","text":"<p>When calling any of the data source functions to get the data to upload, it is recommended to make the call as verbose as possible via kwargs, or if the function supports it, using the <code>all_details</code> parameter.</p> <p>For example, using <code>vmdr.get_host_list()</code>, you should make your call look like the following so all data fields are captured:</p> <pre><code>vmdr_hosts = vmdr.get_host_list(\n        auth, \n        all_details=True,\n    )\n</code></pre> <p>For other calls, such as <code>vmdr.get_hld()</code>, you should make your call look like the following:</p> <pre><code>hosts_with_detections = vmdr.get_hld(\n    auth,\n    show_asset_id=True,\n    show_tags=True,\n    show_cloud_tags=True,\n    host_metadata='all',\n    show_qds=True,\n    show_qds_factors=True,\n)\n</code></pre>"},{"location":"sql/#the-upload_json-function","title":"The <code>upload_json</code> Function","text":"<p><code>upload_json</code> allows you to upload data that is serializable to JSON to a SQL database. Any nested dictionaries or lists will be uploaded as JSON strings, allowing for more normalization to be done in the database. This is useful for data that is not easily represented in a flat table format, such as complex nested structures or large lists of items such as tags and vulnerability lists. Fields that are parsed out by the SDK inside their respective dataclasses will still be parsed out and uploaded as separate columns in the table.</p> <pre><code>from qualysdk.sql import upload_json, db_connect\n\n# Get a connection to the DB\ncnxn = db_connect(\n    db=\"my_test.db\",\n    db_type=\"sqlite\",\n)\n\n# pull a few records from the Host List Detection API\nvmdr_hosts = vmdr.get_hld(\n    BasicAuth(&lt;username&gt;, &lt;password&gt;),\n    show_asset_id=True,\n    show_tags=True,\n    show_cloud_tags=True,\n    host_metadata=\"all\",\n    page_count=1,\n    chunk_count=1,\n    threads=1,\n)\n\n# NOTE: you MUST run &lt;BaseList&gt;.to_serializable_list() \n# on the data before uploading it to the DB\nvmdr_hosts = vmdr_hosts.to_serializable_list()\n\n\n# Upload the data to the DB\nupload_json(vmdr_hosts, cnxn, table_name=\"vmdr_hld_with_json\")\n&gt;&gt;&gt; Uploaded 12345 records to vmdr_hld\n</code></pre>"},{"location":"tagging/","title":"Tagging APIs","text":"<p>Tagging APIs return data on Qualys tags and tag categories.</p> <p>After running: <pre><code>from qualysdk.tagging import *\n</code></pre> You can use any of the endpoints currently supported:</p>"},{"location":"tagging/#tagging-endpoints","title":"Tagging Endpoints","text":"API Call Description <code>count_tags</code> Returns the number of tags in the subscription that match given kwargs. <code>get_tags</code> Returns a list of tags in the subscription that match given kwargs. <code>get_tag_details</code> Returns details about a single tag. <code>create_tag</code> Creates a new tag, optionally with a parent tag and child tags. <code>delete_tag</code> Deletes one or more tags. <code>update_tag</code> Updates a tag."},{"location":"tagging/#count-tags-api","title":"Count Tags API","text":"<p><code>count_tags</code> returns the number of tags in the subscription that match the given kwargs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>id</code> <code>Union[str, int]</code> The ID(s) of a tag to return \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> The operator to use for the id \u274c <code>name</code> <code>str</code> The name of a tag to return \u274c <code>name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> The operator to use for the name \u274c <code>parent</code> <code>Union[str, int]</code> The ID of a parent tag to return \u274c <code>parent_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> The operator to use for the parent \u274c <code>ruleType</code> <code>Literal[\"GROOVY\", \"OS_REGEX\", \"NETWORK_RANGE\", \"NAME_CONTAINS\", \"INSTALLED_SOFTWARE\", \"OPEN_PORTS\", \"VULN_EXIST\", \"ASSET_SEARCH\", \"NETWORK_TAG\", \"NETWORK\", \"NETWORK_RANGE_ENHANCED\", \"CLOUD_ASSET\", \"GLOBAL_ASSET_VIEW\", \"TAGSET\", \"BUSINESS_INFORMATION\", \"VULN_DETECTION\"]</code> The type of rule the tag uses \u274c <code>ruleType_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> The operator to use for the ruleType \u274c <code>provider</code> <code>Literal[\"EC2\", \"AZURE\", \"GCP\", \"IBM\", \"OCI\"]</code> The cloud provider the tag is for \u274c <code>provider_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> The operator to use for the provider \u274c <code>color</code> <code>str</code> The color of the tag as a hex code, such as #FFFFFF \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.tagging import count_tags\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get the total count of tags:\ntags = count_tags(auth)\n&gt;&gt;&gt; 1234\n\n# get all tags that have a name containing \"prod\"\ntags = count_tags(\n    auth, \n    name='prod', \n    name_operator='CONTAINS'\n)\n&gt;&gt;&gt; 123\n\n# get all tags that have a name containing \"dev\"\n# and are for AWS or Azure:\n\ntags = count_tags(\n    auth, \n    name='dev', \n    name_operator='CONTAINS', \n    provider='AWS,AZURE', \n    provider_operator='IN'\n)\n&gt;&gt;&gt; 12\n</code></pre>"},{"location":"tagging/#get-tags-api","title":"Get Tags API","text":"<p><code>get_tags</code> returns a list of tags in the subscription that match the given kwargs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>id</code> <code>Union[str, int]</code> The ID(s) of a tag to return \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> The operator to use for the id \u274c <code>name</code> <code>str</code> The name of a tag to return \u274c <code>name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> The operator to use for the name \u274c <code>parent</code> <code>Union[str, int]</code> The ID of a parent tag to return \u274c <code>parent_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> The operator to use for the parent \u274c <code>ruleType</code> <code>Literal[\"GROOVY\", \"OS_REGEX\", \"NETWORK_RANGE\", \"NAME_CONTAINS\", \"INSTALLED_SOFTWARE\", \"OPEN_PORTS\", \"VULN_EXIST\", \"ASSET_SEARCH\", \"NETWORK_TAG\", \"NETWORK\", \"NETWORK_RANGE_ENHANCED\", \"CLOUD_ASSET\", \"GLOBAL_ASSET_VIEW\", \"TAGSET\", \"BUSINESS_INFORMATION\", \"VULN_DETECTION\"]</code> The type of rule the tag uses \u274c <code>ruleType_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> The operator to use for the ruleType \u274c <code>provider</code> <code>Literal[\"EC2\", \"AZURE\", \"GCP\", \"IBM\", \"OCI\"]</code> The cloud provider the tag is for \u274c <code>provider_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> The operator to use for the provider \u274c <code>color</code> <code>str</code> The color of the tag as a hex code, such as #FFFFFF \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.tagging import get_tags\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get all tags:\ntags = get_tags(auth)\n\n# Get all tags that have a name containing \"prod\"\ntags = get_tags(\n    auth, \n    name='prod', \n    name_operator='CONTAINS'\n)\n&gt;&gt;&gt;[\n  Tag(\n    id=1234,\n    name='prod',\n    parent=None,\n    ruleType='GROOVY',\n    provider=None,\n    color='#FF0000'\n  ),\n  ...\n]\n</code></pre>"},{"location":"tagging/#get-tag-details-api","title":"Get Tag Details API","text":"<p><code>get_tag_details</code> returns details about a single tag.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>tag_id</code> <code>Union[str, int]</code> The ID(s) of a tag to return \u2705 <pre><code>from qualysdk import BaseList\nfrom qualysdk.auth import BasicAuth\nfrom qualysdk.tagging import get_tags, get_tag_details\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n# Get some tags:\ntags = get_tags(\n  auth,\n  name=\"Production_\",\n  name_operator='CONTAINS\",\n)\n# for each of the tags, get their details:\ntag_list = BaseList()\nfor tag in tags:\n  details = get_tag_details(\n    auth,\n    tag.id\n  )\n  tag_list.append(details)\n&gt;&gt;&gt;[\n  Tag(\n    id=123456789, \n    name='Production_on_prem_servers', \n    ...\n  ),\n  Tag(\n    id=987654321, \n    name='Production_cloud_servers',\n  ),\n  ...\n]\n</code></pre>"},{"location":"tagging/#create-tag-api","title":"Create Tag API","text":"<p><code>create_tag</code> creates a new tag, optionally with a parent tag and child tags.</p> <p>If no <code>ruleType</code> is provided, the tag will be static.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>name</code> <code>str</code> The name of the tag to create \u2705 <code>ruleType</code> <code>Literal[\"STATIC\", \"GROOVY\", \"OS_REGEX\", \"NETWORK_RANGE\", \"NAME_CONTAINS\", \"INSTALLED_SOFTWARE\", \"OPEN_PORTS\", \"VULN_EXIST\", \"ASSET_SEARCH\", \"NETWORK_TAG\", \"NETWORK\", \"NETWORK_RANGE_ENHANCED\", \"CLOUD_ASSET\", \"GLOBAL_ASSET_VIEW\", \"TAGSET\", \"BUSINESS_INFORMATION\", \"VULN_DETECTION\"]</code> The type of rule the tag uses. If not provided, the tag will be static. \u274c <code>ruleText</code> <code>str</code> If <code>ruleType</code> is set, this string contains the logic for the rule. \u274c <code>children</code> <code>List[str]</code> A list of child tag names to create. \u274c <code>parentTagId</code> <code>int</code> The ID of the parent tag to create the tag under. \u274c <code>criticalityScore</code> <code>int</code> The criticality that assets with this tag should be assigned. \u274c <code>color</code> <code>str</code> (hex code, such as <code>#FFFFFF</code>) The color of the tag. \u274c <code>description</code> <code>str</code> A description of the tag. \u274c <code>provider</code> <code>Literal[\"EC2\", \"AZURE\", \"GCP\", \"IBM\", \"OCI\"]</code> The cloud provider the tag is for. \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.tagging import create_tag\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Create a new static tag:\ncreate_tag(\n    auth,\n    name='My Static Tag',\n    color='#FF0000',\n    description='This is a static tag'\n)\n\n# Create a new dynamic tag identifying all Windows servers:\ncreate_tag(\n    auth,\n    name='My Dynamic Tag',\n    ruleType='GLOBAL_ASSET_VIEW',\n    ruleText=\"operatingSystem:Windows and hardware.category:Server\",\n    color='#00FF00',\n    description='This is a dynamic tag for Windows servers'\n)\n\n# create a new tag with a parent tag and child tags:\ncreate_tag(\n    auth,\n    name='My Parent Tag',\n    color='#0000FF',\n    description='This is a parent tag',\n    children=[\n        'My Child Tag 1',\n        'My Child Tag 2'\n    ],\n    parentTagId=123456789\n)\n</code></pre>"},{"location":"tagging/#delete-tag-api","title":"Delete Tag API","text":"<p><code>delete_tag</code> deletes one or more tags.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>tag_id</code> <code>Union[list[Union[str,int], Union[str,int]]</code> The ID(s) of a tag to delete. Multiple values can be provided as a list of strings \u2705 <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.tagging import delete_tag\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Delete a single tag:\ndelete_tag(\n    auth,\n    tag_id=123456789\n)\n&gt;&gt;&gt;1\n# Delete multiple tags:\ndelete_tag(\n    auth,\n    tag_id=[\n        123456789,\n        987654321\n    ]\n)\n&gt;&gt;&gt;2\n\n# Delete all tags with a name containing \"prod\":\nfrom qualysdk.tagging import get_tags\n\ntags = get_tags(\n    auth,\n    name='prod',\n    name_operator='CONTAINS'\n)\n\ndelete_tag(\n    auth,\n    tag_id=[tag.id for tag in tags]\n)\n&gt;&gt;&gt;5\n</code></pre>"},{"location":"tagging/#update-tag-api","title":"Update Tag API","text":"<p><code>update_tag</code> updates a tag.</p> <p>Note - you should not add and remove children tags in the same command. You should run two separate commands to do this.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>tag_id</code> <code>Union[str, int]</code> The ID of a tag to update. \u2705 <code>name</code> <code>str</code> The new name of the tag \u274c <code>ruleType</code> <code>Literal[\"STATIC\", \"GROOVY\", \"OS_REGEX\", \"NETWORK_RANGE\", \"NAME_CONTAINS\", \"INSTALLED_SOFTWARE\", \"OPEN_PORTS\", \"VULN_EXIST\", \"ASSET_SEARCH\", \"NETWORK_TAG\", \"NETWORK\", \"NETWORK_RANGE_ENHANCED\", \"CLOUD_ASSET\", \"GLOBAL_ASSET_VIEW\", \"TAGSET\", \"BUSINESS_INFORMATION\", \"VULN_DETECTION\"]</code> The type of rule the tag uses. If not provided, the tag will be static. \u274c <code>ruleText</code> <code>str</code> If <code>ruleType</code> is set, this string contains the logic for the rule. \u274c <code>add_children</code> <code>List[str]</code> A list of child tag names to add. \u274c <code>remove_children</code> <code>List[int]</code> A list of child tag IDs to remove. \u274c <code>criticalityScore</code> <code>int</code> The criticality that assets with this tag should be assigned. \u274c <code>color</code> <code>str</code> (hex code, such as <code>#FFFFFF</code>) The color of the tag. \u274c <code>description</code> <code>str</code> A description of the tag. \u274c <code>provider</code> <code>Literal[\"EC2\", \"AZURE\", \"GCP\", \"IBM\", \"OCI\"]</code> The cloud provider the tag is for. \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.tagging import update_tag\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Update a tag's name, description, and color:\nupdate_tag(\n    auth,\n    tag_id=123456789,\n    name='My Updated Tag',\n    description='This is an updated tag',\n    color='#FF00FF'\n)\n\n# Change a tag from static to dynamic,\n# looking for Windows Servers:\nupdate_tag(\n    auth,\n    tag_id=123456789,\n    ruleType='GLOBAL_ASSET_VIEW',\n    ruleText=\"operatingSystem:Windows and hardware.category:Server\",\n    color='#00FFFF',\n    description='This is a dynamic tag for Windows servers'\n)\n\n# Update a tag to remove some \n# pre-existing children tags\n# as well as adding a parent tag:\nupdate_tag(\n    auth,\n    tag_id=123456789,\n    remove_children=[987654321, 123456799],\n    parentTagId=123459789\n)\n</code></pre>"},{"location":"tagging/#qualysdk-tag-cli-tool","title":"<code>qualysdk-tag</code> CLI tool","text":"<p>The <code>qualysdk-tag</code> CLI tool is a command-line interface for the tagging portion of the SDK. It allows you to quickly pull down results from tagging APIs and save them to an XLSX file and optionally print to stdout.</p>"},{"location":"tagging/#usage","title":"Usage","text":"<pre><code>usage: qualysdk-tag [-h] -u USERNAME -p PASSWORD [-P {qg1,qg2,qg3,qg4}] {count_tags,get_tags,get_tag_details,create_tag,delete_tag} ...\n\nCLI script to quickly perform tagging operations using qualysdk\n\npositional arguments:\n  {count_tags,get_tags,get_tag_details,create_tag,delete_tag}\n                        Action to perform\n    count_tags          Count how many tags match the given criteria.\n    get_tags            Get the tags that match the given criteria.\n    get_tag_details     Get all details of a single tag.\n    create_tag          Create a new tag. NOTE: For creating children tags, use --kwarg children with a comma-separated string, like: \"child1,child2,etc\"\n    delete_tag          Delete a tag. NOTE: For deleting multiple tags, use --kwarg tagId with a comma-separated string, like: 'id1,id2,etc'\n\noptions:\n  -h, --help            show this help message and exit\n  -u, --username USERNAME\n                        Qualys username\n  -p, --password PASSWORD\n                        Qualys password\n  -P, --platform {qg1,qg2,qg3,qg4}\n                        Qualys platform\n</code></pre>"},{"location":"tagging/#count-tags","title":"Count Tags","text":"<pre><code>usage: qualysdk-tag count_tags [-h] [-o OUTPUT] [--kwarg key value]\n\noptions:\n  -h, --help           show this help message and exit\n  -o, --output OUTPUT  Output (json) file to write results to\n  --kwarg key value    Specify a keyword argument to pass to the action. Can be used multiple times\n</code></pre>"},{"location":"tagging/#get-tags","title":"Get Tags","text":"<pre><code>usage: qualysdk-tag get_tags [-h] [-o OUTPUT] [--kwarg key value]\n\noptions:\n  -h, --help           show this help message and exit\n  -o, --output OUTPUT  Output (xlsx) file to write results to\n  --kwarg key value    Specify a keyword argument to pass to the action. Can be used multiple times\n</code></pre>"},{"location":"tagging/#get-tag-details","title":"Get Tag Details","text":"<pre><code>usage: qualysdk-tag get_tag_details [-h] [-o OUTPUT] -t TAGID\n\noptions:\n  -h, --help           show this help message and exit\n  -o, --output OUTPUT  Output (json) file to write results to\n  -t, --tagId TAGID    ID of the tag to pull details for\n</code></pre>"},{"location":"tagging/#create-tag","title":"Create Tag","text":"<pre><code>usage: qualysdk-tag create_tag [-h] [-o OUTPUT] -n NAME [--kwarg key value]\n\noptions:\n  -h, --help           show this help message and exit\n  -o, --output OUTPUT  Output (json) file to write results to\n  -n, --name NAME      Name of the tag to create\n  --kwarg key value    Specify a keyword argument to pass to the action. Can be used multiple times\n</code></pre>"},{"location":"tagging/#example-tag-creation","title":"Example Tag Creation","text":"<p>Below shows how to create a dynamic tag with children tags underneath.</p> <pre><code>qualysdk-tag -u &lt;username&gt; -p &lt;password&gt; create_tag -n \"My servers tag\" --kwarg ruleType GLOBAL_ASSET_VIEW --kwarg ruleText \"hardware.category:Server\" --kwarg color \"#FFFF00\" --kwarg children \"CHILD1,CHILD2,CHILD3\"\n</code></pre>"},{"location":"tagging/#delete-tag","title":"Delete Tag","text":"<pre><code>usage: qualysdk-tag delete_tag [-h] [-o OUTPUT] -t TAGID\n\noptions:\n  -h, --help           show this help message and exit\n  -o, --output OUTPUT  Output (json) file to write results to\n  -t, --tagId TAGID    ID(s) of the tag to delete. Multiple values can be provided as a comma-separated string\n</code></pre>"},{"location":"tagging/#update-tag","title":"Update Tag","text":"<pre><code>usage: qualysdk-tag update_tag [-h] [-o OUTPUT] -t TAGID [--kwarg key value]\n\noptions:\n  -h, --help           show this help message and exit\n  -o, --output OUTPUT  Output (json) file to write results to\n  -t, --tagId TAGID    ID of the tag to update\n  --kwarg key value    Specify a keyword argument to pass to the action. Can be used multiple times. For add_children, supply a comma-separated string of names. for remove_children, supply\n                       a comma-separated string of ids.\n</code></pre>"},{"location":"tagging/#example-tag-update","title":"Example Tag Update","text":"<p>Below shows how to update a tag to add children tags and remove children tags.</p> <p>Note that you should not add AND remove children tags in the same command. You should run two separate commands to do this.</p> <pre><code>qualysdk-tag -u &lt;username&gt; -p &lt;password&gt; update_tag -t 12345678 --kwarg name \"MY TAG UPDATED VIA API\" --kwarg parentTagId 98765432 --kwarg description \"My updated tag\" --kwarg add_children \"Child1,Child2\" --kwarg remove_children 62041845\n</code></pre>"},{"location":"totalcloud/","title":"TotalCloud APIs","text":"<p>TotalCloud APIs return data relating to various cloud providers in your subscription, as well as manage them.</p> <p>After running: <pre><code>from qualysdk.totalcloud import *\n</code></pre> You can use any of the endpoints currently supported:</p>"},{"location":"totalcloud/#totalcloud-endpoints","title":"TotalCloud Endpoints","text":"API Call Description <code>get_connectors</code> Get a list of connectors in your Qualys subscription by provider. <code>get_connector_details</code> Get details about a specific connector by provider. <code>get_aws_base_account</code> Get the base account for an AWS connector. <code>get_control_metadata</code> Get details on controls Qualys checks for in your cloud provider. <code>get_inventory</code> Get your inventory for a specific resource type on a specific cloud provider. <code>get_resource_details</code> Get details for a specific instance of a resource type. <code>get_evaluation</code> Get statistics for a specific control on a specific resource ID. <code>get_account_evaluation</code> Get statistics for a list of controls for a specific cloud account. <code>get_resources_evaluated_by_control</code> Get resources evaluated by a specific control. <code>get_remediation_activities</code> Get a list of remediation activities for a specific cloud provider."},{"location":"totalcloud/#list-connectors-api","title":"List Connectors API","text":"<p><code>get_connectors</code> returns a list of AWS connectors in the subscription.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>provider</code> <code>Literal[\"aws\", \"azure\"]</code> The cloud provider to get connectors for \u2705 <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> Number of pages to pull \u274c <code>pageNo</code> <code>int</code> Page number to start pulling from, or page to pull if <code>page_count</code> is set to 1 \u274c <code>pageSize</code> <code>int</code> Number of records to pull per page \u274c <code>filter</code> <code>str</code> Filter the results. See below for acceptable search tokens \u274c <code>sort</code> <code>Literal[\"lastSyncedOn:asc\", \"lastSyncedOn:desc\"]</code> Sort last synced date in ascending or descending order \u274c"},{"location":"totalcloud/#filter-search-tokens","title":"<code>filter</code> Search Tokens","text":"Token Description <code>name</code> Filter by connector name <code>description</code> Filter by connector description <code>state</code> Filter by connector state. Acceptable values are: <code>SUCCESS</code>, <code>PENDING</code>, <code>REGIONS_DISCOVERED</code>, <code>ERROR</code> <code>lastSynced</code> Filter by last synced date. Must be in UTC time <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.totalcloud import get_connectors\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n# Get all AWS connectors that are successfully synced:\nget_connectors(auth, \"aws\", filter='state:SUCCESS')\n&gt;&gt;&gt;[AWSConnector(name=\"myConnector\", ...), ...]\n</code></pre>"},{"location":"totalcloud/#connector-details-api","title":"Connector Details API","text":"<p><code>get_connector_details</code> returns details about a specific connector in AWS/Azure.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>provider</code> <code>Literal[\"aws\", \"azure\"]</code> The cloud provider to get connectors for \u2705 <code>connectorId</code> <code>str</code> The ID of the connector to get details for \u2705 <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.totalcloud import get_connector_details\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n# Get details for a specific Azure connector:\nget_connector_details(auth, provider='azure', connectorId='12345678-1234-1234-1234-123456789012')\n&gt;&gt;&gt;AzureConnector(name=\"myConnector\", connectorId=\"12345678-1234-1234-1234-123456789012\", ...)\n</code></pre>"},{"location":"totalcloud/#get-aws-base-account-api","title":"Get AWS Base Account API","text":"<p><code>get_aws_base_account</code> returns the base account details for AWS.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <pre><code>from json import dumps\nfrom qualysdk.auth import BasicAuth\nfrom qualysdk.totalcloud import get_aws_base_account\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\nprint(dumps(get_aws_base_account(auth), indent=2))\n&gt;&gt;&gt;{\n    'globalAccountId': '123456789012', \n    'chinaAccountId': '210987654321', \n    'govAccountId': '001122334455', \n    'customerGlobalAccount': 'false', \n    'customerChinaAccount': 'false', \n    'customerGovAccount': 'false'\n}\n</code></pre>"},{"location":"totalcloud/#get-control-metadata-api","title":"Get Control Metadata API","text":"<p><code>get_control_metadata</code> returns details on controls Qualys checks for in your cloud provider. Think of it like the TotalCloud knowledge base, where misconfigurations Qualys checks for are stored.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> Number of pages to pull \u274c <code>pageNo</code> <code>int</code> Page number to start pulling from, or page to pull if <code>page_count</code> is set to 1 \u274c <code>pageSize</code> <code>int</code> Number of records to pull per page \u274c <code>filter</code> <code>str</code> Filter the results. \u274c"},{"location":"totalcloud/#filter-search-tokens_1","title":"<code>filter</code> Search Tokens","text":"<p>Head's Up!: When using <code>resource.type</code> as the filter, you must use the API-expected name. See <code>resourceType</code> Values table for expected names.</p> Token Description <code>control.name</code> Filter by control name. Ex: <code>filter=\"control.name:MFA\"</code> <code>resource.type</code> Filter by resource type. Ex: <code>filter=\"resource.type:BUCKET\"</code> <code>service.type</code> Filter by service type as seen from Qualys's inventory UI. Ex: <code>filter=\"service.type:EC2\"</code> <code>cid</code> Filter by control ID. Ex: <code>filter=\"cid:1\"</code> <code>provider</code> Filter by cloud provider <code>control.criticality</code> Filter by control criticality. Ex: <code>filter=\"control.criticality:HIGH\"</code> <code>control.type</code> Filter by control type <code>policy.name</code> Filter by policy name <code>createdDate</code> Filter by created date <code>modifiedDate</code> Filter by modified date <code>isCustomizable</code> Filter by whether the control is customizable <code>qflow.name</code> Filter by QFlow name <code>qflow.id</code> Filter by QFlow ID <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.totalcloud import get_control_metadata\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Get all controls for AWS:\nget_control_metadata(auth, filter='provider:AWS')\n&gt;&gt;&gt;[Control(name=\"Some Control\", ...), ...]\n\n# Get all controls for BUCKET resources:\nget_control_metadata(auth, filter='resource.type:BUCKET')\n&gt;&gt;&gt;[Control(name=\"Some Control\", ...), ...]\n</code></pre>"},{"location":"totalcloud/#get-inventory-api","title":"Get Inventory API","text":"<p><code>get_inventory</code> returns your inventory for a specific resource type on a specific cloud provider.</p> <p>This function takes advantage of multithreading to pull down data faster. You can specify the number of threads with the <code>thread_count</code> argument, which defaults to 5.</p> <p>Head's Up!: At maximum, this API endpoint returns 10,000 records. This is a hard limit imposed by Qualys. If you have more than 10K records under a single <code>resourceType</code>, you will need to use the <code>filter</code> argument to narrow down the results and make repeated calls to get all the data. An easy way to do this is to use <code>totalcloud.get_connectors()</code>, then use the connector's account ID (<code>subscriptionId</code> for Azure) attribute in this API call's <code>filter</code> argument, storing the results in a <code>BaseList</code>. For example: </p> <pre><code>from qualysdk import BaseList\n\n# Pull ALL EC2s, not just the first 10K:\nall_results = BaseList()\naws_connectors = get_connectors(auth, provider='aws')\naws_account_ids = [c.awsAccountId for c in aws_connectors]\nif aws_account_ids:\n    for account_id in aws_account_ids:\n        data = get_inventory(auth, provider='aws', resourceType='ec2', filter=f\"account.id:{account_id}\")\n        all_results.extend(data)\n</code></pre> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>provider</code> <code>Literal[\"aws\", \"azure\"]</code> The cloud provider to get inventory for \u2705 <code>resourceType</code> <code>str</code> The resource type to get inventory for. See resourceType Values. \u2705 <code>page_count</code> <code>Union[int&gt;=1, 'all'] = 'all'</code> Number of pages to pull \u274c <code>thread_count</code> <code>int &gt;=1</code> Number of threads to use for pulling data \u274c <code>sort</code> <code>Literal['lastSyncedOn:asc', 'lastSyncedOn:desc']</code> Sort last synced date in ascending or descending order \u274c <code>updated</code> <code>str</code> Filter by updated date \u274c <code>filter</code> <code>str</code> Filter the results using TotalCloud QQL \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.totalcloud import get_inventory\n\n# Pull pull all EC2s with vulnerabilities\n# using 8 threads:\nvulnerable_ec2s = get_inventory(\n    auth,\n    provider='aws',\n    resourceType='ec2',\n    filter=\"vulnerability.typeDetected in (Confirmed, Potential) and NOT vulnerability.status:FIXED\"\n)\n&gt;&gt;&gt;[AWSEC2Instance(instanceId=\"i-1234567890abcdef0\", ...), ...]\n</code></pre>"},{"location":"totalcloud/#get-resource-details-api","title":"Get Resource Details API","text":"<p><code>get_resource_details</code> returns details for a specific instance of a resource type, identified by the resource's UUID (can be accessed via the <code>uuid</code> attribute on an object).</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>provider</code> <code>Literal[\"aws\", \"azure\"]</code> The cloud provider to get resource details for \u2705 <code>resourceType</code> <code>str</code> The resource type to get details for. See resourceType Values for acceptable values by cloud provider. \u2705 <code>resourceUuid</code> <code>str</code> The resource UUID to get details for \u2705 <code>pageSize</code> <code>int</code> Number of records to pull per page \u274c <code>pageNo</code> <code>int</code> Page number to start pulling from, or page to pull if <code>page_count</code> is set to 1 \u274c <code>filter</code> <code>str</code> Filter the results. See resouceType Values for acceptable search tokens \u274c <code>sort</code> <code>Literal['lastSyncedOn:asc', 'lastSyncedOn:desc']</code> Sort last synced date in ascending or descending order \u274c <code>updated</code> <code>str</code> Filter by updated date \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.totalcloud import get_resource_details, get_inventory\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n# Get some EC2s:\nec2s = totalcloud.get_inventory(\n    auth, \n    provider=\"aws\", \n    resourceType=\"ec2\", \n    page_count=1\n)\n# Get details for an EC2 instance:\nget_resource_details(\n    auth,\n    provider='aws',\n    resourceType='ec2',\n    resourceUuid=ec2s[0].uuid\n)\n&gt;&gt;&gt;AWSEC2Instance(instanceId=\"i-1234567890abcdef0\", ...)\n</code></pre>"},{"location":"totalcloud/#get-evaluation-results-for-a-control-id-on-a-single-resource","title":"Get Evaluation Results for a Control ID on a Single Resource","text":"<p><code>get_evaluation</code> returns datetime statistics for a specific control on a specific resource ID. You can see when the control was first and last checked on the resource, as well as if the control has been fixed, re-opened, or is still open.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>provider</code> <code>Literal[\"aws\", \"azure\"]</code> The cloud provider to get control statistics for \u2705 <code>controlId</code> <code>Union[str, int]</code> The control ID to get statistics for \u2705 <code>connectorId</code> <code>str</code> The connector ID to get statistics for \u2705 <code>resourceId</code> <code>str</code> The resource ID to get statistics for \u2705 <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.totalcloud import get_evaluation\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n# Get statistics for control 123 on EC2 instance\n# i-1234567890abcdef0:\nget_evaluation(\n    auth,\n    provider='aws',\n    controlId=123,\n    connectorId='12345678-1234-1234-1234-123456789012', #ec2.connectorUuid\n    resourceId='i-1234567890abcdef0' #ec2.resourceId\n)\n&gt;&gt;&gt;Evaluation(\n    firstEvaluated=datetime.datetime(2024, 5, 10),\n    lastEvaluated=datetime.datetime(2024, 5, 20),\n    dateReopened=None,\n    dateFixed=datetime.datetime(2024, 5, 15),\n)\n</code></pre>"},{"location":"totalcloud/#get-control-evaluation-list-for-a-cloud-account","title":"Get Control Evaluation List for a Cloud Account","text":"<p><code>get_account_evaluation</code> returns statistics for a list of controls for a specific cloud account.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>provider</code> <code>Literal['aws', 'azure']</code> Cloud Provider \u2705 <code>accountId</code> <code>str</code> The cloud account/subscription ID to get statistics for \u2705 <code>filter</code> <code>str</code> Filter results by Qualys Totalcloud \"Posture\" QQL \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.totalcloud import get_account_evaluation, get_connectors\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n# Get some accounts:\naws_connectors = get_connectors(\n    auth, \n    provider='aws', \n    page_count=1\n)\n# Get evaluations for all controls for the account:\naccount_evals = get_account_evaluation(\n    auth,\n    provider='aws',\n    accountId=aws_connectors[0].awsAccountId\n)\n# Check out the first evaluation:\naccount_evals[0]\n&gt;&gt;&gt;AccountLevelControl(\n    controlName='Ensure that custom IAM password policy requires minimum length of 14 or greater', \n    controlId=11, \n    policyNames=['CIS Amazon Web Services Foundations Benchmark'], \n    criticality='HIGH', \n    service='IAM', \n    result='PASS', \n    passedResources=10, \n    failedResources=0, \n    passWithExceptionResources=0\n)\n</code></pre>"},{"location":"totalcloud/#get-a-list-of-resources-evaluated-by-a-control-by-account","title":"Get a List of Resources Evaluated by a Control by Account","text":"<p><code>get_resources_evaluated_by_control</code> returns a list of resources evaluated by a specific control (identified by control ID) for a specific cloud account.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>provider</code> <code>Literal['aws', 'azure']</code> Cloud Provider \u2705 <code>accountId</code> <code>Union[str, int]</code> The cloud account/subscription ID to get statistics for \u2705 <code>controlId</code> <code>Union[str, int]</code> The control ID to get statistics for \u2705 <code>filter</code> <code>str</code> Filter results by Qualys Totalcloud \"Posture\" QQL \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.totalcloud import get_resources_evaluated_by_control, get_connectors, get_control_metadata\n\n# Get some accounts:\naws_connectors = get_connectors(\n    auth, \n    provider='aws', \n    page_count=1\n)\n\n# Get some controls:\ncontrols = get_control_metadata(auth, filter='provider:AWS')\n\n# Get resources evaluated by control 123 for the account:\nresources_evaluated = get_resources_evaluated_by_control(\n    auth,\n    provider='aws',\n    accountId=aws_connectors[0].awsAccountId,\n    controlId=123\n)\n# Check out the first resource evaluated:\nresources_evaluated[0]\n&gt;&gt;&gt;AccountLevelEvaluation(\n    resourceId='123456789123', \n    region=None, \n    accountId='246802456', \n    evaluatedOn=datetime.datetime(2024, 1, 1, 22, 54, 12, tzinfo=datetime.timezone.utc), \n    evidences=[{'settingName': 'cn-north-1', 'actualValue': 'Access Analyzer disabled'}, ...], \n    resourceType='IAM_ACCESS_ANALYZER', \n    connectorId='aaaaaaaa-bbbb-cccc-dddd-1234567890', \n    result='FAIL', \n    evaluationDates=Evaluation(\n        firstEvaluated=datetime.datetime(2023, 1, 16, 16, 39, 58, tzinfo=datetime.timezone.utc), \n        lastEvaluated=datetime.datetime(2024, 1, 1, 22, 54, 12, tzinfo=datetime.timezone.utc), \n        dateReopen=None, \n        dateFixed=None\n    )\n)\n</code></pre>"},{"location":"totalcloud/#get-remediation-activities-api","title":"Get Remediation Activities API","text":"<p><code>get_remediation_activities</code> returns a list of remediation activities for a specific cloud provider.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>provider</code> <code>Literal['aws', 'azure']</code> Cloud Provider \u2705 <code>page_count</code> <code>Union[int&gt;=1, 'all'] = 'all'</code> Number of pages to pull \u274c <code>filter</code> <code>str</code> Filter results by Qualys Totalcloud QQL \u274c <code>pageNo</code> <code>int</code> Page number to start pulling from, or page to pull if <code>page_count</code> is set to 1 \u274c <code>pageSize</code> <code>int</code> Number of records to pull per page \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.totalcloud import get_remediation_activities\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n# Get all remediation activities for AWS:\nget_remediation_activities(auth, provider='aws')\n&gt;&gt;&gt;[RemediationActivity(\n    resourceId='123456789123', \n    region=None, \n    accountId='246802456', \n    remediationAction='Disable Access Analyzer',\n    connectorName='myConnector',\n    ...), ...\n]\n</code></pre>"},{"location":"totalcloud/#resourcetype-values","title":"<code>resourceType</code> Values","text":"<p><code>resourceType</code> is case-insensitive. Values are translated to their expected API names. You can also just use the expected names directly, for example when feeding an API call based on data from a prior call using a dataclass's <code>.resourceType</code> attribute.</p>"},{"location":"totalcloud/#aws-resourcetype-values","title":"AWS <code>resourceType</code> Values","text":"Provider Resource Type/Final API-Expected Name Acceptable <code>resourceType</code> Values AWS RDS <code>\"RDS\"</code> AWS NETWORK_ACL <code>\"NETWORK ACL\"</code>, <code>\"ACL\"</code> AWS BUCKET <code>\"BUCKET\"</code>, <code>\"S3 BUCKET\"</code>, <code>\"S3\"</code> AWS IAM_USER <code>\"IAM USER\"</code>, <code>\"IAM\"</code>, <code>\"IAMUSER\"</code> AWS VPC <code>\"VPC\"</code> AWS VPC_SECURITY_GROUP <code>\"VPC SECURITY GROUP\"</code>, <code>\"SECURITY GROUP\"</code>, <code>\"SG\"</code> AWS LAMBDA <code>\"LAMBDA\"</code>, <code>\"LAMBDA FUNCTION\"</code> AWS SUBNET <code>\"SUBNET\"</code> AWS INTERNET_GATEWAY <code>\"INTERNET GATEWAY\"</code>, <code>\"IG\"</code>, <code>\"IGW\"</code>, <code>\"GATEWAY\"</code> AWS LOAD_BALANCER <code>\"LOAD BALANCER\"</code>, <code>\"ELB\"</code>, <code>\"LB\"</code> AWS EC2_INSTANCE <code>\"EC2 INSTANCE\"</code>, <code>\"EC2\"</code>, <code>\"INSTANCE\"</code> AWS ROUTE_TABLE <code>\"ROUTE TABLE\"</code>, <code>\"ROUTE\"</code>, <code>\"ROUTES\"</code> AWS EBS <code>\"EBS\"</code>, <code>\"VOLUME\"</code>, <code>\"VOLUMES\"</code>, <code>\"EBS VOLUME\"</code>, <code>\"EBS VOLUMES\"</code> AWS AUTO_SCALING_GROUP <code>\"AUTO SCALING GROUP\"</code>, <code>\"ASG\"</code>, <code>\"AUTO SCALING\"</code> AWS EKS_CLUSTER <code>\"EKS CLUSTER\"</code>, <code>\"EKS\"</code> AWS EKS_NODEGROUP <code>\"EKS NODE GROUP\"</code>, <code>\"EKSNG\"</code>. <code>\"NODE GROUP\"</code> AWS EKS_FARGATE_PROFILE <code>\"EKS FARGATE PROFILE\"</code>, <code>\"FARGATE PROFILE\"</code>, <code>\"EKS FARGATE\"</code>, <code>\"FARGATE\"</code> AWS VPC_ENDPOINT <code>\"VPC ENDPOINT\"</code>, <code>\"ENDPOINT\"</code> AWS VPC_ENDPOINT_SERVICE <code>\"VPC ENDPOINT SERVICE\"</code>, <code>\"ENDPOINT SERVICE\"</code> AWS IAM_GROUP <code>\"IAM GROUP\"</code>, <code>\"IAMGROUP\"</code> AWS IAM_POLICY <code>\"IAM POLICY\"</code>, <code>\"IAMPOLICY\"</code> AWS IAM_ROLE <code>\"IAM ROLE\"</code>, <code>\"IAMROLE\"</code> AWS SAGEMAKER_NOTEBOOK <code>\"SAGEMAKER NOTEBOOK\"</code>, <code>\"NOTEBOOK\"</code>, <code>\"SAGEMAKER\"</code> AWS CLOUDFRONT_DISTRIBUTION <code>\"CLOUDFRONT DISTRIBUTION\"</code>, <code>\"CLOUDFRONT\"</code>"},{"location":"totalcloud/#azure-resourcetype-values","title":"Azure <code>resourceType</code> Values","text":"Provider Resource Type/Final API-Expected Name Acceptable <code>resourceType</code> Values AZURE SQL_SERVER <code>\"SQL SERVER\"</code>, <code>\"MSSQL\"</code> AZURE FUNCTION_APP <code>\"FUNCTION APP\"</code>, <code>\"FUNCTION\"</code> AZURE SQL_SERVER_DATABASE <code>\"SQL SERVER DATABASE\"</code>, <code>\"MSSQL DATABASE\"</code>, <code>\"MSSQLDB\"</code>, <code>\"MSSQL DB\"</code> AZURE RESOURCE_GROUP <code>\"RESOURCE GROUP\"</code>, <code>\"RG\"</code> AZURE VIRTUAL_NETWORK <code>\"VIRTUAL NETWORK\"</code>, <code>\"VNET\"</code> AZURE VIRTUAL_MACHINE <code>\"VIRTUAL MACHINE\"</code>, <code>\"VM\"</code> AZURE NETWORK_SECURITY_GROUP <code>\"NETWORK SECURITY GROUP\"</code>, <code>\"NSG\"</code>, <code>\"SECURITY GROUP\"</code> AZURE WEB_APP <code>\"WEB APP\"</code>, <code>\"WEBAPP\"</code> AZURE NETWORK_INTERFACES <code>\"NETWORK INTERFACES\"</code>, <code>\"NIC\"</code> AZURE POSTGRE_SINGLE_SERVER <code>\"POSTGRES\"</code>, <code>\"POSTGRE\"</code>, <code>\"POSTGRESQL\"</code> AZURE LOAD_BALANCER <code>\"LOAD BALANCER\"</code>, <code>\"LB\"</code> AZURE FIREWALL <code>\"FIREWALL\"</code>, <code>\"FW\"</code> AZURE MYSQL <code>\"MYSQL\"</code>, <code>\"MYSQL_DB\"</code>, <code>\"MYSQLDB\"</code> AZURE STORAGE_ACCOUNT <code>\"STORAGE ACCOUNT\"</code>, <code>\"STORAGE\"</code> AZURE APPLICATION_GATEWAYS <code>\"APPLICATION GATEWAYS\"</code>, <code>\"AG\"</code> AZURE SECRETS <code>\"SECRETS\"</code>, <code>\"SECRET\"</code> AZURE MARIADB <code>\"MARIADB\"</code>, <code>\"MARIA_DB\"</code>, <code>\"MARIA\"</code> AZURE COSMODB <code>\"COSMOS DB\"</code>, <code>\"COSMOSDB\"</code>, <code>\"COSMODB\"</code> AZURE NAT_GATEWAYS <code>\"NAT GATEWAYS\"</code>, <code>\"NAT\"</code>"},{"location":"vmdr/","title":"VMDR APIs","text":"<p>VMDR APIs return data on vulnerabilities in your environment as well as from the Qualys KB. It also returns data on assets, IPs/subnets, asset groups, and more.</p> <p>After running: <pre><code>from qualysdk.vmdr import *\n</code></pre> You can use any of the VMDR endpoints currently supported:</p>"},{"location":"vmdr/#vmdr-endpoints","title":"VMDR Endpoints","text":"API Call Description <code>query_kb</code> Query the Qualys KnowledgeBase (KB) for vulnerabilities. <code>get_kb_qvs</code> Query the Qualys KB for CVEs and their associated details/scores. <code>get_host_list</code> Query your VMDR host inventory based on kwargs. <code>get_hld</code> Query your VMDR host inventory with QID detections under the <code>VMDRHost.DETECTION_LIST</code> attribute. <code>get_cve_hld</code> Query your VMDR host inventory with CVE detections under the <code>VMDRHost.DETECTION_LIST</code> attribute. <code>get_ip_list</code> Get a list of all IPs in your subscription, according to kwarg filters. <code>add_ips</code> Add IP addresses to VMDR. <code>update_ips</code> Update details of IP addresses already in VMDR such as <code>tracking_method</code>, <code>owner</code>, etc. <code>get_ag_list</code> Get a list of all asset groups in your subscription, according to kwarg filters. <code>add_ag</code> Add a new asset group to VMDR. <code>edit_ag</code> Update details of an asset group. <code>delete_ag</code> Remove an asset group from VMDR. <code>get_scan_list</code> Get a list of VMDR scans in your subscription, according to kwarg filters. <code>pause_scan</code> Pause a running scan. <code>resume_scan</code> Resume a paused scan. <code>cancel_scan</code> Cancel a scan. <code>delete_scan</code> Delete a scan out of VMDR. <code>launch_scan</code> Create/launch a new VMDR scan. <code>fetch_scan</code> Pull the results of a VMDR scan as a <code>pandas.DataFrame</code>. <code>get_scanner_list</code> Pull a list of VMDR scanner appliances. <code>get_static_searchlists</code> Pull a list of static search lists, according to the <code>ids</code> parameter. <code>get_dynamic_searchlists</code> Pull a list of dynamic search lists, according to kwargs. <code>get_report_list</code> Pull a list of reports. <code>launch_report</code> Generate a new report. <code>cancel_report</code> Cancel an in-progress report. <code>fetch_report</code> Download the results of a report. <code>delete_report</code> Delete a report out of Qualys. <code>get_scheduled_report_list</code> Get a list of scheduled reports. <code>launch_scheduled_report</code> Launch a scheduled report. <code>get_template_list</code> Get a list of report templates. <code>get_user_list</code> Get a list of users in your subscription. <code>add_user</code> Add a new user to your subscription. <code>edit_user</code> Edit a user in your subscription. <code>get_activity_log</code> Pull the activity log for your Qualys subscription. <code>purge_hosts</code> Purge hosts from VMDR/Policy Compliance."},{"location":"vmdr/#host-list-detection","title":"Host List Detection","text":"<p><code>vmdr.get_hld()</code> is the main API for extracting vulnerabilities out of the Qualys platform. It is one of the slowest APIs to return data due to Qualys taking a while to gather all the necessary data, but is arguably the most important. Pagination is controlled via the <code>page_count</code> parameter. By default, this is set to <code>\"all\"</code>, pulling all pages. You can specify an int to limit pagination, as well as <code>truncation_limit</code> to specify how many hosts should be returned per page.</p> <p>This function implements threading to significantly speed up data pulls. The number of threads is controlled by the <code>threads</code> parameter, which defaults to 5. A <code>Queue</code> object is created, containing chunks of hostIDs (pulled via <code>get_host_list</code> with <code>details=None</code>) that the threads pop from. The threads then call the <code>hld_backend</code> function with the hostIDs they popped from the queue. The user can control how many IDs are in a chunk via the <code>chunk_size</code> parameter, which defaults to 3000. You should create a combination of <code>threads</code> and <code>chunk_size</code> that keeps all threads busy, while respecting your Qualys concurrency limit. There is also the <code>chunk_count</code> parameter, which controls how many chunks a thread will pull out of the <code>Queue</code> before it exits.</p> <p>Some important kwargs this API accepts:</p> Kwarg Possible Values Description <code>show_tags</code> <code>False/True</code> Boolean on if API output should include Qualys host tags. Accessible under <code>&lt;VMDRHost&gt;.TAGS</code>. Defaults to False. <code>show_asset_id</code> <code>False/True</code> Boolean on if API output should include Qualys asset IDs. Accessible under <code>&lt;VMDRHost&gt;.ASSET_ID</code>. Defaults to False. <code>host_metadata</code> <code>'all','ec2','azure'</code> Controls if cloud host details should be returned. It is highly recommended to use <code>all</code> if specified. <code>show_cloud_tags</code> <code>False/True</code> Boolean on if API output should include cloud provider tags. Accessible under <code>&lt;VMDRHost&gt;.CLOUD_TAGS</code>. Defaults to False. <code>filter_superseded_qids</code> <code>False/True</code> Boolean on if API output should only include non-superseded QIDs. Defaults to False. <code>show_qds</code> <code>False/True</code> Boolean on if API output should include the Qualys Detection Score. Accessible under <code>&lt;VMDRHost&gt;.QDS</code>. Defaults to False. <code>show_qds_factors</code> <code>False/True</code> Boolean on if API output should include the Qualys Detection Score factors, such as EPSS score, CVSS score, malware hashes, and real-time threat indicators (RTIs). Accessible under <code>&lt;VMDRHost&gt;.QDS_FACTORS</code>. Defaults to False. <code>qids</code> <code>None/QID_numbers</code> Filter API output to a specific set of QIDs. Can be a comma-separated string: <code>1357,2468,8901</code>, a range: <code>12345-54321</code>, or a single QID: <code>12345</code>. <code>ids</code> <code>None/hostIDs</code> Filter API output to a specific set of host IDs. Can be a comma-separated string: <code>1357,2468,8901</code>, a range: <code>12345-54321</code>, or a single host ID: <code>12345</code>. <p>Heads Up!: For a full breakdown of acceptable kwargs, see Qualys' documentation here.</p> <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr import get_hld\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Example pulling all hosts with all details and kwargs\n# with default threading and chunking settings:\nhosts = get_hld(\n        auth,         \n        details='All/AGs', \n        show_asset_id=True, \n        show_tags=True, \n        show_qds=True, \n        show_qds_factors=True, \n        host_metadata='all', \n        show_cloud_tags=True,\n)\n&gt;&gt;&gt;BaseList[VMDRHost(12345), ...]\nhosts[0].DETECTION_LIST[0]\n&gt;&gt;&gt;Detection(\n    UNIQUE_VULN_ID=1234567890, \n    TYPE='Confirmed', \n    SSL=True, \n    RESULTS='Some Vulnerability.', \n    STATUS='Active', \n    PROTOCOL=None, \n    FIRST_FOUND_DATETIME=datetime.datetime(2025, 1, 1, 1, 30, 45, tzinfo=datetime.timezone.utc), \n    LAST_FOUND_DATETIME=datetime.datetime(2025, 1, 2, 3, 34, 40, tzinfo=datetime.timezone.utc), \n    TIMES_FOUND=123, \n    LAST_TEST_DATETIME=datetime.datetime(2025, 1, 2, 3, 34, 40, tzinfo=datetime.timezone.utc), \n    LAST_UPDATE_DATETIME=datetime.datetime(2025, 1, 2, 3, 34, 41, tzinfo=datetime.timezone.utc), \n    PORT=None, \n    FQDN=None, \n    IS_IGNORED=False, \n    IS_DISABLED=False, \n    LAST_PROCESSED_DATETIME=datetime.datetime(2025, 1, 2, 3, 34, 41, tzinfo=datetime.timezone.utc), \n    LAST_FIXED_DATETIME=None, \n    ID=987654321, \n    QID=90007, \n    SEVERITY='2', \n    QDS=30, \n    QDS_FACTORS=None\n)\n</code></pre>"},{"location":"vmdr/#vmdr-cve-host-list-detection","title":"VMDR CVE Host List Detection","text":"<p><code>vmdr.get_cve_hld()</code> is a new version of the above <code>get_hld</code> function that returns a list of hosts with CVE detections under <code>&lt;VMDRHost&gt;.DETECTION_LIST</code> instead of QIDs. This function supports most of the same kwargs as <code>get_hld</code> and is also threaded.</p> Kwarg Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>page_count</code> <code>Literal['all']</code> (default), <code>int &gt;= 0</code> How many pages to pull. Note that <code>page_count</code> does not apply if <code>truncation_limit</code> is set to 0, or not specified. \u274c <code>threads</code> <code>int &gt;= 1</code> The number of threads to use for data retrieval. Defaults to 5. \u274c <code>show_asset_id</code> <code>False/True</code> Boolean on if API output should include Qualys asset IDs. Accessible under <code>&lt;VMDRHost&gt;.ASSET_ID</code>. Defaults to False. \u274c <code>include_vuln_type</code> <code>Literal[\"confirmed\", \"potential\"]</code> Filter API output to confirmed or potential vulnerabilities. \u274c <code>show_qvs</code> <code>False/True</code> Boolean on if API output should include the Qualys Vulnerability Score. \u274c <code>cve</code> <code>str</code> Filter API output to a specific CVE/CVEs (comma-separated string). \u274c <code>truncation_limit</code> <code>int</code> Specify how many hosts should be returned per page. If set to 0 or not specified, returns all hosts in one pull. \u274c <code>ids</code> <code>None/hostIDs</code> Filter API output to a specific set of host IDs. Can be a comma-separated string: <code>1357,2468,8901</code>, a range: <code>12345-54321</code>, or a single host ID: <code>12345</code>. \u274c <code>id_min</code> <code>int</code> Only return hosts with an ID &gt;= <code>id_min</code>. \u274c <code>id_max</code> <code>int</code> Only return hosts with an ID &lt;= <code>id_max</code>. \u274c <code>ips</code> <code>str</code> Filter API output to a specific set of IP addresses. Can be a comma-separated string: <code>10.0.0.1,10.0.0.2</code>, a range: <code>10.0.0.0-10.0.0.255</code>, or a single IP: <code>10.0.0.1</code>. \u274c <code>ag_ids</code> <code>str</code> Filter API output to a specific set of asset group IDs. Can be a comma-separated string: <code>1357,2468,8901</code>, a range: <code>12345-54321</code>, or a single asset group ID: <code>12345</code>. \u274c <code>ag_titles</code> <code>str</code> Filter API output to a specific set of asset group titles. Can be a comma-separated string: <code>AG1,AG2,AG3</code>, or a single asset group title: <code>AG1</code>. \u274c <code>vm_scan_since</code> <code>str</code> Filter API output to hosts that have been scanned since a specific date. Must be in the format <code>YYYY-MM-DD</code>. \u274c <code>no_vm_scan_since</code> <code>str</code> Filter API output to hosts that have not been scanned since a specific date. Must be in the format <code>YYYY-MM-DD</code>. \u274c <code>max_days_since_last_vm_scan</code> <code>int</code> Filter API output to hosts that have been scanned within a specific number of days. \u274c <code>vm_processed_after</code> <code>str</code> Filter API output to hosts where VM scan results were processed after a specific date. Must be in the format <code>YYYY-MM-DD</code>. \u274c <code>vm_scan_date_before</code> <code>str</code> Filter API output to hosts where VM scan results were processed before a specific date. Must be in the format <code>YYYY-MM-DD</code>. \u274c <code>vm_scan_date_after</code> <code>str</code> Filter API output to hosts where VM scan results were processed after a specific date. Must be in the format <code>YYYY-MM-DD</code>. \u274c <code>vm_auth_scan_date_before</code> <code>str</code> Filter API output to hosts where VM authenticated scan results were processed before a specific date. Must be in the format <code>YYYY-MM-DD</code>. \u274c <code>vm_auth_scan_date_after</code> <code>str</code> Filter API output to hosts where VM authenticated scan results were processed after a specific date. Must be in the format <code>YYYY-MM-DD</code>. \u274c <code>status</code> <code>Literal[\"New\", \"Active\", \"Fixed\", \"Re-Opened\"]</code> Filter API output to hosts with a specific CVE status. Multiple values can be passed as a comma-separated string: <code>\"New,Active\"</code>. \u274c <code>compliance_enabled</code> <code>bool</code> Filter API output to hosts with compliance tracking enabled. \u274c <code>os_pattern</code> <code>str</code> Filter API output to hosts that match a specific OS regex pattern. Pattern must be valid according to the PCRE standard and be URL-encoded. \u274c <code>qids</code> <code>Union[int,str]</code> Filter API output to hosts with a specific set of QIDs. Can be a comma-separated string: <code>1357,2468,8901</code>, a range: <code>12345-54321</code>, or a single QID: <code>12345</code>. \u274c <code>include_search_list_titles</code> <code>str</code> Filter API output to CVEs that are included in a search list by the list name. Multiple values can be passed as a comma-separated string: <code>\"Search List 1,Search List 2\"</code>. \u274c <code>exclude_search_list_titles</code> <code>str</code> Filter API output to CVEs that are not included in a search list by the list name. Multiple values can be passed as a comma-separated string: <code>\"Search List 1,Search List 2\"</code>. \u274c <code>include_search_list_ids</code> <code>Union[int, str]</code> Filter API output to CVEs that are included in a search list by the list ID. Can be a comma-separated string: <code>1357,2468,8901</code>, a range: <code>12345-54321</code>, or a single search list ID: <code>12345</code>. \u274c <code>exclude_search_list_ids</code> <code>Union[int, str]</code> Filter API output to CVEs that are not included in a search list by the list ID. Can be a comma-separated string: <code>1357,2468,8901</code>, a range: <code>12345-54321</code>, or a single search list ID: <code>12345</code>. \u274c <code>filter_superseded_qids</code> <code>False/True</code> Boolean on if API output should only include non-superseded QIDs. Defaults to False. \u274c <code>use_tags</code> <code>False/True</code> Boolean on if API output should use tags for filtering. Defaults to False. \u274c <code>tag_set_by</code> <code>Literal[\"id\", \"name\"]</code> = \"id\" The type of tag to filter by. Defaults to ID. \u274c <code>tag_include_selector</code> <code>Literal[\"any\", \"all\"]</code> = \"any\" Choose if a host must have any or all tags to be included. Defaults to \"any\". \u274c <code>tag_exclude_selector</code> <code>Literal[\"any\", \"all\"]</code> = \"any\" Choose if a host must have any or all tags to be excluded. Defaults to \"any\". \u274c <code>tag_set_include</code> <code>str</code> The tag IDs/names to include. Can be a comma-separated string: <code>1357,2468,8901</code>, or a single tag ID/name: <code>1357</code>. \u274c <code>tag_set_exclude</code> <code>str</code> The tag IDs/names to exclude. Can be a comma-separated string: <code>1357,2468,8901</code>, or a single tag ID/name: <code>1357</code>. \u274c <code>show_tags</code> <code>False/True</code> Boolean on if API output should include Qualys host tags. \u274c <code>host_metadata</code> <code>Literal[\"all\", \"ec2\", \"azure\"]</code> Controls if cloud host details should be returned. It is highly recommended to use <code>all</code> if specified. \u274c <code>host_metadata_fields</code> <code>str</code> Control which cloud metadata fields are returned. Can be a comma-separated string: <code>\"field1,field2,field3\"</code>. \u274c <code>show_cloud_tags</code> <code>False/True</code> Boolean on if API output should include cloud provider tags. \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr import get_cve_hld\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Pull open, non-superseded, confirmed CVE detections for all hosts,\n# including tags and cloud metadata/tags:\n\nhosts = get_cve_hld(\n    auth,\n    show_tags=True,\n    show_cloud_tags=True,\n    filter_superseded_qids=True,\n    include_vuln_type='confirmed'\n    status='New,Active'\n)\n&gt;&gt;&gt;BaseList[VMDRHost(12345), ...]\n\nhosts[0].DETECTION_LIST[0]\n&gt;&gt;&gt;CVEDetection(\n    VULN_CVE='CVE-2023-34058'\n    UNIQUE_VULN_ID=1234567890, \n    TYPE='Confirmed', \n    SSL=True, \n    RESULTS='Some vulnerability.', \n    STATUS='Active', \n    FIRST_FOUND_DATETIME=datetime.datetime(2024, 10, 31, 1, 2, 3, tzinfo=datetime.timezone.utc), \n    LAST_FOUND_DATETIME=datetime.datetime(2025, 1, 10, 18, 29, 25, tzinfo=datetime.timezone.utc), \n    TIMES_FOUND=2887, \n    LAST_TEST_DATETIME=datetime.datetime(2025, 1, 10, 18, 29, 25, tzinfo=datetime.timezone.utc), \n    LAST_UPDATE_DATETIME=datetime.datetime(2025, 1, 10, 18, 29, 25, tzinfo=datetime.timezone.utc), \n    IS_IGNORED=True, \n    IS_DISABLED=True, \n    LAST_PROCESSED_DATETIME=datetime.datetime(2025, 1, 10, 18, 29, 25, tzinfo=datetime.timezone.utc), \n    LAST_FIXED_DATETIME=None, \n    ID=9876543210, \n    ASSOCIATED_QID=123456, \n    QID_TITLE='Some QID Title', \n    CVSS=1.2, CVSS_BASE='2.6 (AV:L/AC:H/Au:N/C:P/I:P/A:N)', \n    CVSS_TEMPORAL='1.9 (E:U/RL:OF/RC:C)', \n    CVSS_31=1.9, \n    CVSS_31_BASE='7.8 (AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)', \n    CVSS_31_TEMPORAL='6.8 (E:U/RL:O/RC:C)', \n    QVS=35\n)\n</code></pre>"},{"location":"vmdr/#vmdr-host-list","title":"VMDR Host List","text":"<p>The <code>get_host_list()</code> API returns a <code>BaseList</code> of VMDRHost or VMDRID dataclasses. Pagination is controlled via the <code>page_count</code> kwarg. By default, this is set to <code>\"all\"</code>, pulling all pages. By default, this is set to <code>\"all\"</code>, pulling all pages. You can specify an int to limit pagination, as well as <code>truncation_limit</code> to specify how many hosts should be returned per page.</p> <p>This function implements threading to significantly speed up data pulls. The number of threads is controlled by the <code>threads</code> parameter, which defaults to 5. A <code>Queue</code> object is created, containing chunks of hostIDs (pulled via <code>get_host_list</code> with <code>details=None</code>) that the threads pop from. The threads then call the <code>get_host_list_backend</code> function with the hostIDs they popped from the queue. The user can control how many IDs are in a chunk via the <code>chunk_size</code> parameter, which defaults to 3000. You should create a combination of <code>threads</code> and <code>chunk_size</code> that keeps all threads busy, while respecting your Qualys concurrency limit. There is also the <code>chunk_count</code> parameter, which controls how many chunks a thread will pull out of the <code>Queue</code> before it exits.</p> <p>Using the <code>details</code> kwarg, the shape of the output can be controlled:</p> Details Value Description <code>None/\"None\"</code> Return <code>list[int]</code> of host IDs (or asset IDs if <code>show_asset_id=1</code>). <code>\"Basic\"</code> Return <code>list[dict]</code> containing basic host details, such as ID, DNS, IP, OS. <code>\"Basic/AGs\"</code> Return a <code>list[dict]</code> containing basic host details, plus asset group information. <code>\"All\"</code> Return a <code>list[dict]</code> containing all host details. <code>\"All/AGs\"</code> Return a <code>list[dict]</code> containing all host details plus asset group information. <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr import get_host_list\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Pull 4 pages of hosts, with \"All/AGs\" details &amp; tags, \n# where VM scan results were processed after a specific date:\nyesterdays_scanned_assets = get_host_list(\n    auth, \n    details=\"All/AGs\",\n    show_tags=True,\n    vm_processed_after=\"2024-06-21\",\n    page_count=4\n) \n</code></pre>"},{"location":"vmdr/#ip-management","title":"IP Management","text":"<p>This collection of APIs allows for the management of IP addresses/ranges in VMDR, located under <code>qualysdk.vmdr.ips</code>. The APIs are as follows:</p> API Call Description <code>get_ip_list</code> Get a list of IP addresses or ranges in VMDR. <code>add_ips</code> Add IP addresses or ranges to VMDR. <code>update_ips</code> Change details of IP addresses or ranges from VMDR."},{"location":"vmdr/#get-ip-list-api","title":"Get IP List API","text":"<p>The <code>get_ip_list()</code> API returns a list of all IP addresses or ranges in VMDR, matching the given kwargs. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>ips</code> <code>str(&lt;ip_address/range&gt;)</code> or <code>BaseList[str, IPV4Address, IPV4Network, IPV6Address, IPV6Network]</code> The IP address or range to search for. \u274c <code>network_id</code> <code>str</code> The network ID to search for. \u274c (usually not even enabled in a Qualys subscription) <code>tracking_method</code> <code>Literal['IP', 'DNS', 'NETBIOS']</code> Return IPs/ranges based on the tracking method. \u274c <code>compliance_enabled</code> <code>bool</code> Return IPs/ranges based on if compliance tracking is enabled on it. \u274c <code>certview_enabled</code> <code>bool</code> Return IPs/ranges based on if CertView tracking is enabled on it. \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr.ips import get_ip_list\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Get all IP addresses/ranges in VMDR that have CertView tracking enabled:\ncertview_ips = get_ip_list(auth, certview_enabled=True)\n\n#Get specific IP addresses/ranges:\nspecific_ips = get_ip_list(auth, ips='1.2.3.4,5.6.7.8,9.10.11.12/24')\n\n#Slice the list of IP addresses/ranges to those that are external:\nexternal_ips = [i for i in get_ip_list(auth) if not i.is_private]\n</code></pre>"},{"location":"vmdr/#add-ips-api","title":"Add IPs API","text":"<p>The <code>add_ips()</code> API allows for the addition of IP addresses or ranges to VMDR. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>ips</code> <code>str(&lt;ip_address/range&gt;)</code> or <code>BaseList[str, IPV4Address, IPV4Network, IPV6Address, IPV6Network]</code> The IP address or range to add. \u2705 <code>tracking_method</code> <code>Literal['IP', 'DNS', 'NETBIOS']</code> The tracking method to use for the IP address/range. \u274c <code>enable_pc</code> <code>bool</code> Enable Policy Compliance tracking on the IP address/range. See Heads Up! below. <code>enable_vm</code> <code>bool</code> Enable Vulnerability Management tracking on the IP address/range. See Heads Up! below. <code>enable_sca</code> <code>bool</code> Enable Security Configuration Assessment tracking on the IP address/range. See Heads Up! below. <code>enable_certview</code> <code>bool</code> Enable CertView tracking on the IP address/range. See Heads Up! below. <code>tracking_method</code> <code>Literal['IP', 'DNS', 'NETBIOS']</code> The tracking method to use for the IP address/range. Defaults to IP. \u274c <code>owner</code> <code>str</code> The owner of the IP address/range. \u274c <code>ud1</code> <code>str</code> The user-defined field 1 (comment). \u274c <code>ud2</code> <code>str</code> The user-defined field 2 (comment). \u274c <code>ud3</code> <code>str</code> The user-defined field 3 (comment). \u274c <code>comment</code> <code>str</code> A comment to add to the IP address/range. \u274c <code>ag_title</code> <code>str</code> The title of the asset group to add the IP address/range to. \u274c <p>Heads Up!: At least one of the following must be enabled: <code>enable_pc</code>, <code>enable_vm</code>, <code>enable_sca</code>, or <code>enable_certview</code>, or the API will return an error.</p> <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr.ips import add_ips\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Add an IP address/range to VMDR with VM tracking enabled:\nadd_ips(auth, ips='1.2.3.4', enable_vm=True)\n</code></pre>"},{"location":"vmdr/#update-ips-api","title":"Update IPs API","text":"<p>The <code>update_ips()</code> API allows for the modification of IP addresses or ranges in VMDR. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>ips</code> <code>str(&lt;ip_address/range&gt;)</code> or <code>BaseList[str, IPV4Address, IPV4Network, IPV6Address, IPV6Network]</code> The IP address or range to update. \u2705 <code>tracking_method</code> <code>Literal['IP', 'DNS', 'NETBIOS']</code> The tracking method to use for the IP address/range. \u274c <code>host_dns</code> <code>str</code> The DNS name of the IP address/range. \u274c <code>host_netbios</code> <code>str</code> The NetBIOS name of the IP address/range. \u274c <code>owner</code> <code>str</code> The owner of the IP address/range. \u274c <code>ud1</code> <code>str</code> The user-defined field 1 (comment). \u274c <code>ud2</code> <code>str</code> The user-defined field 2 (comment). \u274c <code>ud3</code> <code>str</code> The user-defined field 3 (comment). \u274c <code>comment</code> <code>str</code> A comment to add to the IP address/range. \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr.ips import update_ips\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Update an IP address/range in VMDR with a new DNS name:\nupdate_ips(auth, ips='1.2.3.4', host_dns='new_dns_name')\n</code></pre>"},{"location":"vmdr/#asset-group-management","title":"Asset Group Management","text":"<p>This collection of APIs allows for the management of asset groups (AGs) in VMDR, located under <code>qualysdk.vmdr.assetgroups</code>. The APIs are as follows:</p> API Call Description <code>get_ag_list</code> Get a <code>BaseList</code> of <code>AssetGroup</code> objects. <code>add_ag</code> Add an asset group to VMDR. <code>edit_ag</code> Edit an asset group in VMDR. <code>delete_ag</code> Remove an asset group from VMDR."},{"location":"vmdr/#get-asset-group-list-api","title":"Get Asset Group List API","text":"<p>The <code>get_ag_list()</code> API returns a list of all AGs in VMDR, matching the given kwargs. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>page_count</code> <code>Literal['all']</code> (default), <code>int &gt;= 0</code> How many pages to pull. Note that <code>page_count</code> does not apply if <code>truncation_limit</code> is set to 0, or not specified. \u274c <code>ids</code> <code>str</code>: '12345', '12345,6789' Filter to specific AG IDs. \u274c <code>id_min</code> <code>int</code> Only return AGs with an ID &gt;= <code>id_min</code>. \u274c <code>id_max</code> <code>int</code> Only return AGs with an ID &lt;= <code>id_max</code>. \u274c <code>truncation_limit</code> <code>int</code> Specify how many AGs per page. If set to 0 or not specified, returns all AGs in one pull. \u274c <code>network_ids</code> <code>str</code>: '12345', '12345,6789' Only return AGs with specific network IDs. \u274c <code>unit_id</code> <code>str</code>: 01234 Only return AGs with a specific unit ID. Only one ID is accepted. \u274c <code>user_id</code> <code>str</code> Only return AGs with a specific user assigned. Only one ID is accepted. \u274c <code>title</code> <code>str</code>: \"My Asset Group\" Only return AGs with a specific title. Must be an exact string match. \u274c <code>show_attributes</code> <code>str</code>: 'ALL', 'ID', 'TITLE', 'ID,TITLE', <code>...</code> (For full list, check Qualys documentation, under \"Asset Group List\" Section. Only return specific attributes of an AG record. If not specified, basic details are returned (ID, TITLE, <code>...</code>) \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import get_ag_list\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nag_list = get_ag_list(auth)\n</code></pre>"},{"location":"vmdr/#add-asset-group-api","title":"Add Asset Group API","text":"<p>The <code>add_ag()</code> API allows for the addition of asset groups to VMDR. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>title</code> <code>str</code> The title of the asset group. \u2705 <code>comments</code> <code>str</code> Comments to add to the asset group. \u274c <code>division</code> <code>str</code> The division the asset group belongs to. \u274c <code>function</code> <code>str</code> The function of the asset group. \u274c <code>business_impact</code> <code>Literal[\"critical\", \"high\", \"medium\", \"low\", \"none\"]</code> The business impact of the asset group. \u274c <code>ips</code> <code>Union[str, BaseList[str, IPV4Address, IPV4Network, IPV6Address, IPV6Network]]</code> The IP addresses or ranges to add to the asset group. \u274c <code>appliance_ids</code> <code>Union[str, BaseList[int]]</code> The appliance IDs to add to the asset group. \u274c <code>default_appliance_id</code> <code>int</code> The default appliance ID for the asset group. \u274c <code>domains</code> <code>Union[str, BaseList[str]]</code> The domains to add to the asset group. \u274c <code>dns_names</code> <code>Union[str, BaseList[str]]</code> The DNS names to add to the asset group. \u274c <code>netbios_names</code> <code>Union[str, BaseList[str]]</code> The NetBIOS names to add to the asset group. \u274c <code>cvss_enviro_cdp</code> <code>Literal[\"high\", \"medium-high\", \"low-medium\", \"low\", \"none\"]</code> The CVSS environmental CDP of the asset group. \u274c <code>cvss_enviro_td</code> <code>Literal[\"high\", \"medium\", \"low\", \"none\"]</code> The CVSS environmental TD of the asset group. \u274c <code>cvss_enviro_cr</code> <code>Literal[\"high\", \"medium\", \"low\"]</code> The CVSS environmental CR of the asset group. \u274c <code>cvss_enviro_ir</code> <code>Literal[\"high\", \"medium\", \"low\"]</code> The CVSS environmental IR of the asset group. \u274c <code>cvss_enviro_ar</code> <code>Literal[\"high\", \"medium\", \"low\"]</code> The CVSS environmental AR of the asset group. \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import add_ag\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Add an asset group to VMDR with a specific title:\nadd_ag(auth, title='My New Asset Group')\n&gt;&gt;&gt;Asset Group Added Successfully.\n</code></pre>"},{"location":"vmdr/#edit-asset-group-api","title":"Edit Asset Group API","text":"<p>The <code>edit_ag()</code> API allows for the modification of asset groups in VMDR. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>id</code> <code>Union[AssetGroup, BaseList[AssetGroup, int, str], str]</code> The ID of the asset group to edit. \u2705 <code>set_comments</code> <code>str</code> The comments to set for the asset group. \u274c <code>set_division</code> <code>str</code> The division to set for the asset group. \u274c <code>set_function</code> <code>str</code> The function to set for the asset group. \u274c <code>set_location</code> <code>str</code> The location to set for the asset group. \u274c <code>set_business_impact</code> <code>Literal[\"critical\", \"high\", \"medium\", \"low\", \"none\"]</code> The business impact to set for the asset group. \u274c <code>add_ips</code> <code>Union[str, BaseList[str, IPV4Address, IPV4Network, IPV6Address, IPV6Network]]</code> The IP addresses or ranges to add to the asset group. \u274c <code>remove_ips</code> <code>Union[str, BaseList[str, IPV4Address, IPV4Network, IPV6Address, IPV6Network]]</code> The IP addresses or ranges to remove from the asset group. \u274c <code>set_ips</code> <code>Union[str, BaseList[str, IPV4Address, IPV4Network, IPV6Address, IPV6Network]]</code> The IP addresses or ranges to set for the asset group. \u274c <code>add_appliance_ids</code> <code>Union[str, BaseList[int]]</code> The appliance IDs to add to the asset group. \u274c <code>remove_appliance_ids</code> <code>Union[str, BaseList[int]]</code> The appliance IDs to remove from the asset group. \u274c <code>set_appliance_ids</code> <code>Union[str, BaseList[int]]</code> The appliance IDs to set for the asset group. \u274c <code>set_default_appliance_id</code> <code>int</code> The default appliance ID to set for the asset group. \u274c <code>add_domains</code> <code>Union[str, BaseList[str]]</code> The domains to add to the asset group. \u274c <code>remove_domains</code> <code>Union[str, BaseList[str]]</code> The domains to remove from the asset group. \u274c <code>set_domains</code> <code>Union[str, BaseList[str]]</code> The domains to set for the asset group. \u274c <code>add_dns_names</code> <code>Union[str, BaseList[str]]</code> The DNS names to add to the asset group. \u274c <code>remove_dns_names</code> <code>Union[str, BaseList[str]]</code> The DNS names to remove from the asset group. \u274c <code>set_dns_names</code> <code>Union[str, BaseList[str]]</code> The DNS names to set for the asset group. \u274c <code>add_netbios_names</code> <code>Union[str, BaseList[str]]</code> The NetBIOS names to add to the asset group. \u274c <code>remove_netbios_names</code> <code>Union[str, BaseList[str]]</code> The NetBIOS names to remove from the asset group. \u274c <code>set_netbios_names</code> <code>Union[str, BaseList[str]]</code> The NetBIOS names to set for the asset group. \u274c <code>set_title</code> <code>str</code> The title to set for the asset group. \u274c <code>set_cvss_enviro_cdp</code> <code>Literal[\"high\", \"medium-high\", \"low-medium\", \"low\", \"none\"]</code> The CVSS environmental CDP to set for the asset group. \u274c <code>set_cvss_enviro_td</code> <code>Literal[\"high\", \"medium\", \"low\", \"none\"]</code> The CVSS environmental TD to set for the asset group. \u274c <code>set_cvss_enviro_cr</code> <code>Literal[\"high\", \"medium\", \"low\"]</code> The CVSS environmental CR to set for the asset group. \u274c <code>set_cvss_enviro_ir</code> <code>Literal[\"high\", \"medium\", \"low\"]</code> The CVSS environmental IR to set for the asset group. \u274c <code>set_cvss_enviro_ar</code> <code>Literal[\"high\", \"medium\", \"low\"]</code> The CVSS environmental AR to set for the asset group. \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import edit_ag\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Edit an asset group in VMDR with a new title:\nedit_ag(auth, id=12345, set_title='My New Asset Group Title')\n&gt;&gt;&gt;Asset Group Updated Successfully.\n</code></pre>"},{"location":"vmdr/#delete-asset-group-api","title":"Delete Asset Group API","text":"<p>The <code>delete_ag()</code> API allows for the deletion of asset groups in VMDR. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>id</code> <code>Union[AssetGroup, BaseList[AssetGroup, int, str], str]</code> The ID of the asset group to delete. \u2705 <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import delete_ag\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Delete an asset group in VMDR:\ndelete_ag(auth, id=12345)\n&gt;&gt;&gt;Asset Group Deleted Successfully.\n</code></pre>"},{"location":"vmdr/#vm-scan-management","title":"VM Scan Management","text":"<p>This collection of APIs allows for the management of VM scans in VMDR, located under <code>qualysdk.vmdr.vmscans</code>. </p> <p>Heads up!: When VM scans change status, it will take a few minutes before interaction can continue. This is due to Qualys needing to update the scan status in their backend. Use <code>get_scan_list()</code> (described below) with a specific scan reference to check the status of a scan.</p> <p>The APIs are as follows:</p> API Call Description <code>get_scan_list</code> Get a <code>BaseList</code> of <code>VMScan</code> objects. <code>pause_scan</code> Pause a currently-running VM scan. <code>cancel_scan</code> Cancel a currently-running VM scan. <code>resume_scan</code> Resume a paused VM scan. <code>delete_scan</code> Delete a VM scan. <code>launch_scan</code> Launch/create a VM scan. <code>fetch_scan</code> Fetch the results of a VM scan."},{"location":"vmdr/#vmscan-dataclass","title":"VMScan Dataclass","text":"<p>The <code>VMScan</code> dataclass is used to store the various fields that the VMDR VM Scan APIs return. Attributes are as follows:</p> Attribute Type Description <code>REF</code> <code>str</code> Reference string for the scan. Formatted as module/ID. <code>TYPE</code> <code>Literal[\"On-Demand\",\"API\",\"Scheduled]</code> How the scan is ran. <code>TITLE</code> <code>str</code> The scan name. <code>USER_LOGIN</code> <code>str</code> The Qualys account that created/owns the scan. <code>LAUNCH_DATETIME</code> <code>datetime.datetime</code> The date and time the scan was launched. <code>DURATION</code> <code>datetime.timedelta</code> The duration of the scan. <code>PROCESSING_PRIORTIY</code> <code>str</code> The processing priority of the scan. Includes an int followed by a description of the priority level, such as: <code>0 - No Priority</code>. <code>PROCESSED</code> <code>bool</code> If the scan results have been processed. <code>STATUS</code> <code>dict</code> Status metadata points of the scan. Includes <code>state</code>, which is saved into the <code>STATE</code> attribute. <code>STATE</code> <code>str</code> The state of the scan. <code>TARGET</code> <code>Union[str, BaseList[str], BaseList[ipaddress.IPv4Address, ipaddress.IPv4Network]]</code> The target IPs for the scan. <code>OPTION_PROFILE</code> <code>dict</code> The option profile metadata for the scan. <code>ASSET_GROUP_TITLE_LIST</code> <code>BaseList[str]</code> The asset group titles covered by the scan."},{"location":"vmdr/#get-scan-list-api","title":"Get Scan List API","text":"<p>The <code>get_scan_list()</code> API returns a list of all VM scans in VMDR, matching the given kwargs. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>scan_ref</code> <code>str</code> The reference string of the scan to search for. Formatted like: <code>scan/123455677</code> \u274c <code>state</code> <code>Literal[\"Running\", \"Paused\", \"Cancelled\", \"Finished\", \"Error\", \"Queued\", \"Loading\"]</code> Filter by the state of the scan. \u274c <code>processed</code> <code>bool</code> Filter by if the scan results have been processed. \u274c <code>type</code> <code>Literal[\"On-Demand\",\"API\",\"Scheduled]</code> Filter by how the scan is set up. \u274c <code>user_login</code> <code>str</code> Filter by the Qualys account that created/owns the scan. \u274c <code>launched_after_datetime</code> <code>str</code> Filter by scans launched after a specific datetime. Formatted as: <code>2007-07-01</code> or <code>2007-01-25T23:12:00Z</code> \u274c <code>launched_before_datetime</code> <code>str</code> Filter by scans launched before a specific datetime. Formatted as: <code>2007-07-01</code> or <code>2007-01-25T23:12:00Z</code> \u274c <code>scan_type</code> <code>Literal[\"certview\", \"ec2certview\"]</code> Only return certview scans, or EC2 certview scans. \u274c <code>client_id</code> <code>Union[str,int]</code> Filter by the client ID of the scan. This must be enabled in the Qualys subscription. \u274c <code>client_name</code> <code>str</code> Filter by the client name of the scan. This must be enabled in the Qualys subscription. \u274c <code>show_ags</code> <code>bool</code> Include asset group titles in the scan list. \u274c <code>show_op</code> <code>bool</code> Include option profile metadata in the scan list. \u274c <code>show_status</code> <code>bool</code> Include status metadata in the scan list. Defaults to <code>True</code>. \u274c <code>show_last</code> <code>bool</code> Only show the last run of each scan. Defaults to <code>False</code>. \u274c <code>ignore_target</code> <code>bool</code> Ignore the target IPs of the scan. Defaults to <code>False</code>. \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr import get_scan_list\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Get all VM scans in VMDR, with all details, that have a type of Scheduled:\nscheduled_scans = get_scan_list(auth, type='Scheduled', show_ags=True, show_op=True)\n&gt;&gt;&gt;BaseList[VMScan(REF='scan/123456789', TYPE='Scheduled', TITLE='My Scheduled Scan', ...), ...]\n</code></pre>"},{"location":"vmdr/#pause-scan-api","title":"Pause Scan API","text":"<p>The <code>pause_scan()</code> API lets you pause a currently-running VM scan in VMDR. Results are returned as a string, which is the response message from Qualys. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>scan_ref</code> <code>str</code> The reference string of the scan to pause. Formatted like: <code>scan/123455677</code> \u2705 <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr import pause_scan\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nresult = pause_scan(auth, scan_ref='scan/123456789')\n&gt;&gt;&gt;Pausing scan\n</code></pre>"},{"location":"vmdr/#resume-scan-api","title":"Resume Scan API","text":"<p>The <code>resume_scan()</code> API lets you resume a paused VM scan in VMDR. Results are returned as a string, which is the response message from Qualys. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>scan_ref</code> <code>str</code> The reference string of the scan to resume. Formatted like: <code>scan/123455677</code> \u2705 <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr import resume_scan\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nresult = resume_scan(auth, scan_ref='scan/123456789')\n&gt;&gt;&gt;Resuming scan\n</code></pre>"},{"location":"vmdr/#cancel-scan-api","title":"Cancel Scan API","text":"<p>The <code>cancel_scan()</code> API lets you cancel a VM scan in VMDR. Results are returned as string, which is the response message from Qualys. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>scan_ref</code> <code>str</code> The reference string of the scan to cancel. Formatted like: <code>scan/123455677</code> \u2705 <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr import cancel_scan\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nresult = cancel_scan(auth, scan_ref='scan/123456789')\n&gt;&gt;&gt;Cancelling scan\n</code></pre>"},{"location":"vmdr/#delete-scan-api","title":"Delete Scan API","text":"<p>The <code>delete_scan()</code> API lets you delete a VM scan in VMDR. Results are returned as a string, which is the response message from Qualys. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>scan_ref</code> <code>str</code> The reference string of the scan to delete. Formatted like: <code>scan/123455677</code> \u2705 <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr import delete_scan\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nresult = delete_scan(auth, scan_ref='scan/123456789')\n&gt;&gt;&gt;Deleted scan\n</code></pre>"},{"location":"vmdr/#fetch-scan-results-api","title":"Fetch Scan Results API","text":"<p>The <code>fetch_scan()</code> API lets you download the results of a VM scan. Results are returned as a <code>pandas.DataFrame</code>. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>scan_ref</code> <code>str</code> The reference string of the scan to fetch. Formatted like: <code>scan/123455677</code> \u2705 <code>ips</code> <code>str</code> Only include results for specific IPs. Accepts a comma-separated string of IPs. \u274c <code>mode</code> <code>Literal[\"brief\", \"extended\"]</code> The level of detail to include in the results. Defaults to <code>brief</code> \u274c <code>client_id</code> <code>Union[str,int]</code> Filter by the client ID of the scan. This must be enabled in the Qualys subscription. \u274c <code>client_name</code> <code>str</code> Filter by the client name of the scan. This must be enabled in the Qualys subscription. \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr import fetch_scan\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nresult = fetch_scan(auth, scan_ref='scan/123456789')\n&gt;&gt;&gt; pandas.DataFrame\n</code></pre>"},{"location":"vmdr/#launch-scan-api","title":"Launch Scan API","text":"<p><code>launch_scan()</code> is used to create and launch a new VM scan in VMDR. A <code>VMScan</code> object is returned containing the details of the scan once it is created via a <code>get_scan_list()</code> call with the <code>scan_ref</code> kwarg set to the newly-created scan reference. You can launch EC2 scans with the <code>ec2_instance_ids</code>, <code>ec2_endpoint</code>, and <code>connector_name</code> params. Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>runtime_http_header</code> <code>str</code> The value for the <code>Qualys.Scan</code> HTTP header to use for the scan. \u274c <code>scan_title</code> <code>str</code> The title of the scan. \u274c <code>option_id</code> <code>int</code> The option profile ID to use for the scan. \u26a0\ufe0f (Must be specified if <code>option_title</code> is not specified) <code>option_title</code> <code>str</code> The option profile title to use for the scan. \u26a0\ufe0f (Must be specified if <code>option_id</code> is not specified) <code>ip</code> <code>Union[str, BaseList[str]</code> The target IPs for the scan. \u26a0\ufe0f (Must be specified if one of the following are not specified: <code>asset_group_ids</code>, <code>asset_groups</code>, <code>fqdn</code>) <code>asset_group_ids</code> <code>Union[str, BaseList[str]</code> The asset group IDs to use for the scan. \u26a0\ufe0f (Must be specified if one of the following are not specified: <code>ip</code>, <code>asset_groups</code>, <code>fqdn</code>) <code>asset_groups</code> <code>Union[str, BaseList[str]</code> The asset group titles to use for the scan. \u26a0\ufe0f (Must be specified if one of the following are not specified: <code>ip</code>, <code>asset_group_ids</code>, <code>fqdn</code>) <code>fqdn</code> <code>Union[str, BaseList[str]</code> The FQDNs to use for the scan. \u26a0\ufe0f (Must be specified if one of the following are not specified: <code>ip</code>, <code>asset_group_ids</code>, <code>asset_groups</code>, <code>asset_groups</code>) <code>iscanner_appliance_id</code> <code>int</code> The internal scanner appliance ID to use for the scan. \u274c <code>iscanner_name</code> <code>str</code> The internal scanner appliance name to use for the scan. \u274c <code>ec2_instance_ids</code> <code>Union[str, BaseList[str]</code> The EC2 instance IDs of your external scanners. \u274c <code>exclude_ip_per_scan</code> <code>str, BaseList[str]</code> The IPs to exclude from the scan. \u274c <code>default_scanner</code> <code>bool</code> Use the default scanner for the scan. \u274c <code>scanners_in_ag</code> <code>bool</code> Use the scanners in the asset group for the scan. \u274c <code>target_from</code> <code>Literal[\"assets\", \"tags\"]</code> Choose to target assets based on the assets themselves or based on their tag list. \u274c <code>use_ip_nt_range_tags_include</code> <code>bool</code> Use the IP/NT range tags to include in the scan. \u274c <code>use_ip_nt_range_tags_exclude</code> <code>bool</code> Use the IP/NT range tags to exclude from the scan. \u274c <code>use_ip_nt_range_tags_include</code> <code>bool</code> Use the IP/NT range tags to include in the scan. \u274c <code>tag_selector_include</code> <code>Literal[\"any\", \"all\"]</code> Choose if all tags must match for an asset or any tag can match. \u274c <code>tag_selector_exclude</code> <code>Literal[\"any\", \"all\"]</code> Choose if all tags must match for an asset or any tag can match. \u274c <code>tag_set_by</code> <code>Literal[\"id\", \"name\"]</code> Choose to search for tags by tag ID or tag name. \u274c <code>tag_set_include</code> <code>Union[str, BaseList[str]</code> The tags to include in the scan. \u274c <code>tag_set_exclude</code> <code>Union[str, BaseList[str]</code> The tags to exclude from the scan. \u274c <code>ip_network_id</code> <code>str</code> The IP network ID to use for the scan. Must be enabled in the Qualys subscription. \u274c <code>client_id</code> <code>int</code> The client ID to use for the scan. Only valid for consultant subscriptions. \u274c <code>client_name</code> <code>str</code> The client name to use for the scan. Only valid for consultant subscriptions. \u274c <code>connector_name</code> <code>str</code> The connector name for EC2 scans. \u26a0\ufe0f Required for EC2 scans. <code>ec2_endpoint</code> <code>str</code> The EC2 region code or VPC ID zone. \u26a0\ufe0f Required for EC2 scans. <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr import launch_scan\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Launch a new VM scan in VMDR with a specific title and option profile, targeting 2 specific IPs:\nresult = launch_scan(auth, scan_title='My New Scan', option_id=12345, ip='10.0.0.1,10.0.0.2', iscanner_name='internal_scanner_name')\n&gt;&gt;&gt;\"New vm scan launched with REF: scan/123456789.12345\"\nresult\n&gt;&gt;&gt;VMScan(REF='scan/123456789.12345', TYPE='API', TITLE='My New Scan', ...)\n</code></pre>"},{"location":"vmdr/#vmdr-scanner-appliance-management","title":"VMDR Scanner Appliance Management","text":"<p>This collection of APIs allows for the management of scanner appliances in VMDR, located under <code>qualysdk.vmdr.scanner_appliances</code>. </p>"},{"location":"vmdr/#scanner-appliance-list-api","title":"Scanner Appliance List API","text":"<p>The <code>get_scanner_list</code> API lets you pull a list of scanner appliances currently in VMDR, according to kwargs. </p> <p>Heads Up!: While <code>get_scanner_list</code> currently does work, It is not finalized. Currently, some attributes under a <code>ScannerAppliance</code> dataclass are raw API output dictionaries/lists of dictionaries. This will be updated to use custom dataclasses soon.</p> <p>Acceptable params are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>output_mode</code> <code>Literal[\"brief\", \"full\"]</code> Show some or all details of scanner appliances. Defaults to brief. \u274c <code>scan_detail</code> <code>bool</code> If <code>True</code>, output includes scan details for scans that are currently running on an appliance. \u274c <code>show_tags</code> <code>bool</code> Show tag information for each scanner appliance in the output. \u26a0\ufe0f Requires <code>output_mode</code> to be <code>True</code> to be able to be used. <code>include_cloud_info</code> <code>bool</code> Show cloud provider information for a scanner appliance/. \u26a0\ufe0f Requires <code>output_mode</code> to be <code>True</code> to be able to be used. <code>busy</code> <code>bool</code> Filter output to scanners that are currently running scans. \u274c <code>scan_ref</code> <code>str</code> Filter output to scanners that are running a specific scan reference ID. \u274c <code>name</code> <code>str</code> Filter output to scanners with a specific name. Substring searching is supported. For example, if <code>name=scanner</code>, and you have a scanner called <code>main_scanner</code> and one called <code>backup_scanner</code>, both will be included. \u274c <code>ids</code> <code>Union[str, int]</code> Filter output to scanners with specific IDs. Can be a comma-separated string for multiple IDs. \u274c <code>type</code> <code>Literal[\"physical\", \"virtual\", \"containerized\", \"offline\"]</code> Filter output to a specific type of scanner appliance. \u274c <code>platform_provider</code> <code>Literal[\"ec2\", \"ec2_compat\", \"gce\", \"azure\", \"vCenter\"]</code> Filter output to scanners that are hosted on a specific provider. \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.vmdr import get_scanner_list\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Get all scanners, with all details, that are currently busy:\nbusy_scanners = get_scanner_list(\n    auth, \n    busy=True, \n    output_mode=\"full\", \n    scan_detail=True, \n    show_tags=True,\n    include_cloud_info=True,\n)\nbusy_scanners[0]\n&gt;&gt;&gt;ScannerAppliance(ID=12345, NAME=\"My Scanner\", ...)\n</code></pre>"},{"location":"vmdr/#search-list-management","title":"Search List Management","text":"<p>Search lists help to filter QIDs in a subscription by specific QIDs, option profiles, etc. There are two types: static, and dynamic. Static search lists are a defined set of QIDs, while dynamic search lists update on their own based on vulnerability criteria. Currently, static search lists are implemented in their own dataclass, while dynamic search list support is coming soon.</p>"},{"location":"vmdr/#get-static-search-lists-api","title":"Get Static Search Lists API","text":"<p><code>get_static_searchlists</code> Lets you pull a list of static search lists in your subscription. It accepts a single parameter, <code>ids</code> and returns a <code>BaseList</code> of <code>StaticSearchList</code> objects. Inside a <code>StaticSearchList</code>, the QIDs are stored in a <code>BaseList</code> of <code>KBEntry</code> objects.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>ids</code> <code>str</code> A comma-separated string of static search lists IDs to return. \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import get_static_searchlists\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Get all search lists:\nsearch_lists = get_static_searchlists(auth)\n&gt;&gt;&gt;[StaticSearchList(ID=12345, TITLE=\"My search list\", QIDS=[KBEntry(12345, ...)], ...)]\n</code></pre>"},{"location":"vmdr/#get-dynamic-search-lists-api","title":"Get Dynamic Search Lists API","text":"<p><code>get_dynamic_searchlists</code> Lets you pull a list of static search lists in your subscription. It accepts a single parameter, <code>ids</code> and returns a <code>BaseList</code> of <code>DynamicSearchList</code> objects. </p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>ids</code> <code>str</code> A comma-separated string of dynamic search lists IDs to return. \u274c <code>show_qids</code> <code>bool</code> If <code>True</code>, include the QIDs in the output. \u274c <code>show_option_profiles</code> <code>bool</code> If <code>True</code>, include the option profiles in the output. \u274c <code>show_distribution_groups</code> <code>bool</code> If <code>True</code>, include the distribution groups in the output. \u274c <code>show_report_templates</code> <code>bool</code> If <code>True</code>, include the report templates in the output. \u274c <code>show_remediation_policies</code> <code>bool</code> If <code>True</code>, include the remediation policies in the output. \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import get_dynamic_searchlists\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Get all dynamic search lists:\ndynamic_search_lists = get_dynamic_searchlists(auth)\n&gt;&gt;&gt;[DynamicSearchList(ID=12345, TITLE=\"My dynamic search list\", ...)]\n</code></pre>"},{"location":"vmdr/#vmdr-report-management","title":"VMDR Report Management","text":"<p>This collection of APIs lets you work with various types of reporting in VMDR.</p> <p>The APIs are as follows:</p> API Call Description <code>get_report_list</code> Get a <code>BaseList</code> of <code>VMDRReport</code> objects. <code>launch_report</code> Create/Kick off new report generation. <code>fetch_report</code> Download the results of a report. <code>cancel_report</code> Cancel an in-progress report. <code>delete_report</code> Delete a report out of Qualys."},{"location":"vmdr/#vmdrreport-dataclass","title":"VMDRReport Dataclass","text":"<p>Head's Up!: To allow for comparisons, the <code>SIZE</code> attribute of a <code>VMDRReport</code> is normalized to a float representation in megabytes. Raw Qualys API data returns this like: <code>\"5.01 KB\"</code>. Should you ever create a <code>VMDRReport</code> object manually, specify the size as a string like the API output does.</p> <p>The <code>VMDRReport</code> dataclass is used to represent a single report generated in VMDR. Attributes are as follows:</p> Attribute Type Description <code>ID</code> <code>int</code> The ID number for the report. <code>TITLE</code> <code>str</code> The friendly name of the report. <code>TYPE</code> <code>str</code> What type of data the report is for. <code>USER_LOGIN</code> <code>str</code> The username that launched the report. <code>LAUNCH_DATETIME</code> <code>datetime.datetime</code> When the report was kicked off. <code>OUTPUT_FORMAT</code> <code>str</code> The file format the report is in. <code>SIZE</code> <code>float</code> The file size of the report, in megabytes. <code>STATUS</code> <code>dict</code> Raw API output for what <code>STATE</code> (see below) the report is in. <code>STATE</code> <code>str</code> The state the report is in. <code>EXPIRATION_DATETIME</code> <code>datetime.datetime</code> When the report expires."},{"location":"vmdr/#vmdrscheduledreport-dataclass","title":"VMDRScheduledReport Dataclass","text":"<p>The <code>VMDRScheduledReport</code> dataclass represents a scheduled report in VMDR. Attributes are as follows:</p> Attribute Type Description <code>ID</code> <code>int</code> The ID number for the report. <code>TITLE</code> <code>str</code> The friendly name of the report. <code>OUTPUT_FORMAT</code> <code>str</code> The file format the report is in. <code>TEMPLATE_TITLE</code> <code>str</code> The template the report follows. <code>ACTIVE</code> <code>bool</code> Whether the report is active or not. <code>SCHEDULE</code> <code>dict</code> The schedule the report follows. <code>START_DATE_UTC</code> <code>datetime.datetime</code> When the report started. <code>START_HOUR</code> <code>int</code> The hour the report starts as an integer. <code>START_MINUTE</code> <code>int</code> The minute the report starts as an integer. <code>TIME_ZONE</code> <code>dict</code> Time zone information for the report. Gets parsed out to below fields. <code>TIME_ZONE_CODE</code> <code>str</code> Time zone code for the report, such as <code>\"US-CT\"</code>. <code>TIME_ZONE_DETAILS</code> <code>str</code> Details for the time zone, such as GMT offset. <code>DST_SELECTED</code> <code>bool</code> Boolean for if daylight savings time is enabled for the report."},{"location":"vmdr/#vmdr-report-list-api","title":"VMDR Report List API","text":"<p>This API lets you pull a list of reports in your subscription, according to kwarg filters. Returns a <code>BaseList</code> of <code>VMDRReport</code> objects.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>id</code> <code>Union[int, str]</code> A specific report ID to pull. \u274c <code>state</code> <code>str</code> Filter output to reports in a specific state. \u274c <code>user_login</code> <code>str</code> Filter output to reports launched by a specific user. \u274c <code>expires_before_datetime</code> <code>str</code> Filter output to reports that will expire before this datetime. \u274c <code>client_id</code> <code>Union[int, str]</code> Filter output to reports for a specific client ID. \u26a0\ufe0f ONLY VALID FOR CONSULTANT SUBSCRIPTIONS! \u274c <code>client_name</code> <code>str</code> Filter output to reports for a specific client name. \u26a0\ufe0f ONLY VALID FOR CONSULTANT SUBSCRIPTIONS! \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import get_static_searchlists\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Get all reports launched by Alice:\nalice_reports = get_report_list(auth, user_login='Alice')\n&gt;&gt;&gt;[VMDRReport(ID=01234567, TITLE=\"Alice's Scan\", USER_LOGIN='alice_123',  OUTPUT_FORMAT='PDF', SIZE=10.42, ...), ...]\n</code></pre>"},{"location":"vmdr/#scheduled-reports-list-api","title":"Scheduled Reports List API","text":"<p>This API lets you pull a list of scheduled reports in VMDR, according to kwarg filters. Returns a <code>BaseList</code> of <code>VMDRReport</code> objects.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>id</code> <code>Union[int, str]</code> A specific report ID to pull. \u274c <code>is_active</code> <code>True/False</code> Filter output to just active (<code>True</code>) or inactive (<code>False</code>) reports. <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import get_scheduled_report_list\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n#Get all active scheduled reports:\nalice_reports = get_scheduled_report_list(auth, is_active=True)\n&gt;&gt;&gt;[VMDRScheduledReport(ID=17023223, TITLE='My Scheduled Report', ACTIVE=True, SCHEDULE={'WEEKLY': {'@frequency_weeks': '1', '@weekdays': '1'}}, ...), ...]\n</code></pre>"},{"location":"vmdr/#launch-report-api","title":"Launch Report API","text":"<p>This API lets you launch or \"kick off\" a new report in VMDR. There are a few types of reports - see <code>report_type</code> below. Returns the report ID as an integer.</p> <p>Acceptable kwargs are:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>template_id</code> <code>Union[int, str]</code> The template that the report will follow. Use <code>get_report_template_list()</code> To select one. \u2705 <code>report_title</code> <code>str</code> The name to give to the report. <code>\u26a0\ufe0f IF YOU REQUEST A PCI COMPLIANCE REPORT, THE TITLE IS AUTO-GENERATED BY QUALYS!</code> \u274c <code>output_format</code> FOR MAP REPORT:  <code>pdf, html, mht, xml, csv</code>FOR SCAN REPORT:<code>pdf, html mht, xml, csv, docx</code>FOR REMEDIATION REPORT:<code>pdf, html, mht, csv</code>FOR COMPLIANCE (NON-PCI) REPORT:<code>pdf, html, mht</code>FOR PCI COMPLIANCE REPORT:<code>pdf, html</code>FOR PATCH REPORT:<code>pdf, online, xml, csv</code>FOR COMPLIANCY POLICY REPORT:<code>pdf, html, mht, xml, csv</code> The format that the report will be generated in. \u274c <code>hide_header</code> <code>True/False</code> \u26a0\ufe0f SDK auto-sets this to <code>True</code>! \u274c <code>pdf_password</code> <code>str</code> If <code>output_format==pdf</code>, file will be encrypted with this password. Note that this is required for <code>recipient_group/recipient_group_id</code>. \u26a0\ufe0f REQUREMENTS:1.<code>8&lt;=N&lt;=32</code> characters2. Must contain alpha and numeric characters3.Cannot match your Qualys account's password4.Must follow any other password restrictions in <code>Users-&gt;Setup-&gt;Security</code> \u274c <code>recipient_group</code> <code>str</code>: <code>\"groupOne,GroupTwo\"</code> A comma-separated string of group that the PDF will be shared with. \u26a0\ufe0f CANNOT BE IN THE SAME REQUEST WITH <code>recipient_group_id</code> \u274c <code>recipient_group_id</code> <code>str</code> A comma-separated string of group IDs to share the PDF with. \u26a0\ufe0f CANNOT BE IN THE SAME REQUEST WITH <code>recipient_group</code> \u274c <code>report_type</code> <code>Literal[\"Map\", \"Scan\", \"Patch\", \"Remediation\", \"Compliance\", \"Policy\"]</code> Shape the report to a specific type. \u274c <code>domain</code> <code>str</code> Target domain for the report. \u26a0\ufe0f REQUIRED FOR MAP REPORT <code>ip_restriction</code> Comma-separated string of IP addresses to include in a map report. \u26a0\ufe0f REQUIRED FOR MAP REPORT WHEN <code>domain=='None'</code> report_refs <code>str</code> Comma-separated string of reference IDs. \u26a0\ufe0f REQUIRED FOR MAP REPORT, MANUAL SCAN REPORT, PCI COMPLIANCE REPORT <code>asset_group_ids</code> <code>str</code> Override asset group IDs defined in the report template with these IDs. \u274c <code>ips_network_id</code> <code>Union[int, str]</code> Restrict the report to specific network IDs. \u26a0\ufe0f MUST BE ENABLED IN THE QUALYS SUBSCRIPTION \u274c <code>ips</code> <code>str</code> Comma-separated string of IP addresses to include, overwriting the report template. \u274c <code>assignee_type</code> <code>Literal[\"User\", \"All\"]</code> Specify if tickets assigned to the requesting user, or all tickets will be included in the report. Defaults to <code>\"User\"</code>. \u274c <code>policy_id</code> <code>Union[int, str]</code> The specific policy to run the report on. \u274c <code>host_id</code> <code>str</code> In policy report output, show results for a single host. \u26a0\ufe0f REQUIRED WHEN <code>instance_string</code> IS SPECIFIED. <code>instance_string</code> <code>str</code> Specifies a single instance on a host machine. \u26a0\ufe0f REQUIRED WHEN <code>host_id</code> IS SPECIFIED. <p>Head's Up!: You can also use asset tags when creating a vulnerability or compliance report.</p> <p>Acceptable kwargs for using tags are:</p> Parameter Possible Values Description <code>use_tags</code> <code>True/False</code> Include/use asset tags. Defaults to <code>False</code>. <code>tag_include_selector</code> <code>Literal[\"all\", \"any\"]</code> Include assets that match either any of the included tags, or all of them. Defaults to <code>any</code>. <code>tag_exclude_selector</code> <code>Literal[\"all\", \"any\"]</code> Don't include assets that match either any of the included tags, or all of them. Defaults to <code>any</code>. <code>tag_set_by</code> <code>Literal[\"id\", \"name\"]</code> Choose if you will include tags by their IDs or their names. Defaults to <code>id</code>. <code>tag_set_include</code> <code>str</code> Comma-separated string of either tag IDs or names to include in the report. <code>tag_set_exclude</code> <code>str</code> Comma-separated string of either tag IDs or names to exclude in the report. <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import launch_report\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nnew_report_id = launch_report(auth)\n&gt;&gt;&gt;12345678\n</code></pre>"},{"location":"vmdr/#launch-scheduled-report-api","title":"Launch Scheduled Report API","text":"<p>This API lets you start an otherwise scheduled report. Returns the status message from Qualys as a string.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>id</code> <code>Union[int, str]</code> The ID number of the in-progress report to cancel. \u2705 <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import launch_scheduled_report\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nresult = launch_scheduled_report(auth, id=012345678)\n&gt;&gt;&gt;Report launched\n</code></pre>"},{"location":"vmdr/#cancel-running-report-api","title":"Cancel Running Report API","text":"<p>This API cancels a report that is currently in progress. It returns a string with the Qualys response.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>id</code> <code>Union[int, str]</code> The ID number of the in-progress report to cancel. \u2705 <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import cancel_report\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nresult = cancel_report(auth)\n&gt;&gt;&gt;Report cancelled\n</code></pre>"},{"location":"vmdr/#fetch-report-results-api","title":"Fetch Report Results API","text":"<p>This API lets you download the results of a report. The <code>write_out</code> parameter controls if the data is written to the <code>&lt;qualysdk_dir&gt;/vmdr/output</code> directory. By default, <code>write_out</code> is <code>False</code>. If the report is in XML or CSV format, the data will be returned in a pandas DataFrame. Otherwise, <code>write_out</code> is set to <code>True</code> automatically, and results are written to disk. The output directory is created if it does not already exist.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>id</code> <code>Union[int, str]</code> The ID number of the in-progress report to cancel. \u2705 <code>write_out</code> <code>True/False</code> Choose if you want the data written to disk in the <code>output</code> directory. Automatically set to <code>True</code> if the report format is not XML or CSV. \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import fetch_report\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# XML report:\nreport_data = fetch_report(auth, id=12345678)\n&gt;&gt;&gt;Detected XML format. Returning DataFrame.\n                                                  ASSET_DATA_REPORT\nHEADER               {'COMPANY': 'My Company', 'GENER...\nRISK_SCORE_PER_HOST  {'HOSTS': [{'IP_ADDRESS': '10.0.0.1', 'TOT...\nHOST_LIST            {'HOST': [{'IP': '10.0.0.2', 'TRACKING_METH...\nGLOSSARY             {'VULN_DETAILS_LIST': {'VULN_DETAILS': [{'@id'...\n\n#PDF report, automatically gets written to disk:\nfetch_report(auth, id=92345678)\n&gt;&gt;&gt;Detected PDF format. Writing to &lt;qualysdk_dir&gt;/vmdr/output/&lt;report_id&gt;.pdf\nWrote report to &lt;qualysdk_dir&gt;/vmdr/output/&lt;report_id&gt;.pdf\n</code></pre>"},{"location":"vmdr/#delete-report-api","title":"Delete Report API","text":"<p>This API deletes a report out of Qualys. It returns a string with the Qualys response.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>id</code> <code>Union[int, str]</code> The ID number of the report to delete. \u2705 <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import delete_report\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nresult = delete_report(auth)\n&gt;&gt;&gt;Report deleted\n</code></pre>"},{"location":"vmdr/#list-report-templates-api","title":"List Report Templates API","text":"<p>This API lets you pull a list of all VMDR report templates in your account. Useful for when using <code>launch_report</code> and you need a value for <code>template_id</code>. Returns a <code>BaseList</code> of <code>ReportTemplate</code> objects.</p> <p>This API takes no parameters other than the <code>BasicAuth</code> object.</p> <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import get_template_list\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\ntemplates = get_template_list(auth)\n&gt;&gt;&gt;[ReportTemplate(ID=12345678, TYPE=\"Auto\", ...)]\n</code></pre>"},{"location":"vmdr/#user-management","title":"User Management","text":"<p>This collection of APIs lets you work with user accounts in VMDR.</p> <p>The APIs are as follows:</p> API Call Description <code>get_user_list</code> Get a <code>BaseList</code> of <code>User</code> objects. <code>edit_user</code> Edit a user account. <code>add_user</code> Add a new user account."},{"location":"vmdr/#user-dataclass","title":"User Dataclass","text":"<p>The <code>User</code> dataclass is used to represent a single user account in VMDR. Attributes are as follows:</p> Attribute Type Description <code>USER_LOGIN</code> <code>str</code> The username of the user. <code>USER_ID</code> <code>int</code> The ID number of the user. <code>EXTERNAL_ID</code> <code>str</code> The external ID of the user. <code>CONTACT_INFO</code> <code>dict</code> Contact information. Gets parsed out to below 14 fields. <code>FIRSTNAME</code> <code>str</code> The first name of the user. <code>LASTNAME</code> <code>str</code> The last name of the user. <code>TITLE</code> <code>str</code> The title of the user. <code>PHONE</code> <code>str</code> The phone number of the user. <code>COUNTRY</code> <code>str</code> The country of the user. <code>STATE</code> <code>str</code> The state of the user. <code>CITY</code> <code>str</code> The city of the user. <code>ZIP_CODE</code> <code>str</code> The ZIP code of the user. <code>FAX</code> <code>str</code> The fax number of the user. <code>EMAIL</code> <code>str</code> The email address of the user. <code>COMPANY</code> <code>str</code> The company of the user. <code>ADDRESS1</code> <code>str</code> The first line of the user's address. <code>ADDRESS2</code> <code>str</code> The second line of the user's address. <code>TIME_ZONE_CODE</code> <code>str</code> The time zone code of the user. <code>USER_STATUS</code> <code>str</code> The status of the user. <code>CREATION_DATE</code> <code>datetime.datetime</code> The date the user was created. <code>USER_ROLE</code> <code>dict</code> The role of the user. <code>LAST_LOGIN_DATE</code> <code>datetime.datetime</code> The last time the user logged in. <code>BUSINESS_UNIT</code> <code>str</code> The business unit of the user. <code>UNIT_MANAGER_POC</code> <code>str</code> The unit manager point of contact. <code>MANAGER_POC</code> <code>str</code> The manager point of contact. <code>UI_INTERFACE_STYLE</code> <code>str</code> The UI interface style of the user. <code>PERMISSIONS</code> <code>dict</code> The permissions of the user. Gets parsed out to below 5 fields. <code>CREATE_OPTION_PROFILES</code> <code>bool</code> If the user can create option profiles. <code>PURGE_INFO</code> <code>bool</code> If the user can purge info. <code>ADD_ASSETS</code> <code>bool</code> If the user can add assets. <code>EDIT_REMEDIATION_POLICY</code> <code>bool</code> If the user can edit remediation policies. <code>EDIT_AUTH_RECORDS</code> <code>bool</code> If the user can edit authentication records. <code>CREATE_OPTION_PROFILES</code> <code>bool</code> If the user can create option profiles. <code>NOTIFICATIONS</code> <code>dict</code> The notifications of the user. Gets parsed out to below 3 fields. <code>LATEST_VULN</code> <code>str</code> How often the user gets vulnerability notifications. <code>MAP</code> <code>str</code> How often the user gets map notifications. <code>SCAN</code> <code>str</code> How often the user gets scan notifications. <code>DAILY_TICKETS</code> <code>int</code> If the user gets daily ticket updates."},{"location":"vmdr/#get-user-list-api","title":"Get User List API","text":"<p>This API lets you pull a list of user accounts in your subscription, according to kwarg filters. Returns a <code>BaseList</code> of <code>User</code> objects.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>external_id_contains</code> <code>str</code> Filter output to users with a specific external ID pattern. \u274c <code>external_id_assigned</code> <code>True/False</code> Filter output to users with an external ID assigned. \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import get_user_list\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\nusers = get_user_list(auth)\n&gt;&gt;&gt;[User(USER_ID=12345, USER_LOGIN='alice_123', ...), ...]\n</code></pre>"},{"location":"vmdr/#create-user-api","title":"Create User API","text":"<p>This API lets you create a new user account in VMDR. It returns a string with the Qualys response, or if the <code>send_email</code> kwarg is <code>False</code>, the username and password of the new user.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>user_role</code> <code>Literal[\"manager\", \"unit_manager\", \"scanner\", \"reader\", \"contact\", \"administrator\"]</code> The role of the user. \u2705 <code>business_unit</code> <code>Union[Literal[\"Unassigned\"], str]</code> The business unit of the user. \u2705 <code>first_name</code> <code>str</code> The first name of the user. \u2705 <code>last_name</code> <code>str</code> The last name of the user. \u2705 <code>title</code> <code>str</code> The title of the user. \u2705 <code>phone</code> <code>str</code> The phone number of the user. \u2705 <code>email</code> <code>str</code> The email address of the user. \u2705 <code>address1</code> <code>str</code> The first line of the user's address. \u2705 <code>city</code> <code>str</code> The city of the user. \u2705 <code>state</code> <code>str</code> The state of the user. Must be the full state name, such as <code>\"Maryland\"</code> or <code>\"Pennsylvania\"</code>. \u2705 <code>country</code> <code>str</code> The country of the user. Must be the full country name, such as <code>\"United States of America\"</code>. \u2705 <code>send_email</code> <code>True/False</code> If <code>True</code>, an email will be sent to the user with their login information. If <code>False</code>, the username and password will be returned in the response. Defaults to <code>True</code>. \u274c <code>asset_groups</code> <code>str</code> A comma-separated string of asset groups to assign to the user. \u274c <code>fax</code> <code>str</code> The fax number of the user - because fax is still very widely used nowadays. \ud83d\ude09 \u274c <code>address2</code> <code>str</code> The second line of the user's address. \u274c <code>zip_code</code> <code>str</code> The ZIP code of the user. \u274c <code>external_id</code> <code>str</code> The external ID of the user. \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import add_user\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Add a new user to VMDR and send them an email:\nresult = add_user(auth, user_role='manager', business_unit='Unassigned', first_name='Alice', last_name='Smith', title='Manager', phone='555-555-5555', ...)\n&gt;&gt;&gt;User alice_123 created successfully.\n\n# Add a new user to VMDR and return their username and password:\nresult = add_user(auth, user_role='manager', business_unit='Unassigned', first_name='Alice', last_name='Smith', title='Manager', phone='555-555-5555', ..., send_email=False)\n&gt;&gt;&gt;User alice_123 created. User:Pass is: alice_123, Password: 12345\n</code></pre>"},{"location":"vmdr/#edit-user-api","title":"Edit User API","text":"<p>This API lets you edit an existing user account in VMDR. It returns a string with the Qualys response. Certain fields can not be edited. If you try to edit one of these, the SDK will raise a <code>QualysAPIError</code> Exception. You can also clear/\"wipe\" certain fields by specifiying an empty string in the kwarg.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>login</code> <code>str</code> The username of the user to edit. \u2705 <code>asset_groups</code> <code>str</code> A comma-separated string of asset groups to assign to the user. \u274c <code>first_name</code> <code>str</code> The first name of the user. \u274c <code>last_name</code> <code>str</code> The last name of the user. \u274c <code>title</code> <code>str</code> The title of the user. \u274c <code>phone</code> <code>str</code> The phone number of the user. \u274c <code>fax</code> <code>str</code> The fax number of the user. \u274c <code>email</code> <code>str</code> The email address of the user. \u274c <code>address1</code> <code>str</code> The first line of the user's address. \u274c <code>address2</code> <code>str</code> The second line of the user's address. \u274c <code>city</code> <code>str</code> The city of the user. \u274c <code>state</code> <code>str</code> The state of the user. Must be the full state name, such as <code>\"Maryland\"</code> or <code>\"Pennsylvania\"</code>. \u274c <code>country</code> <code>str</code> The country of the user. Must be the full country name, such as <code>\"United States of America\"</code>. \u274c <code>zip_code</code> <code>str</code> The ZIP code of the user. \u274c <code>external_id</code> <code>str</code> The external ID of the user. \u274c <pre><code>from qualysdk.auth import BasicAuth\nfrom qualysdk.vmdr import edit_user\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1')\n\n# Edit Alice's phone number:\nresult = edit_user(auth, login='alice_123', phone='555-555-5555')\n&gt;&gt;&gt;User alice_123 has been successfully updated.\n\n# Clear Alice's phone number:\nresult = edit_user(auth, login='alice_123', phone='')\n&gt;&gt;&gt;User alice_123 has been successfully updated.\n</code></pre>"},{"location":"vmdr/#querying-the-kb","title":"Querying the KB","text":"<p>The Qualys KnowledgeBase (KB) is a collection of vulnerabilities that Qualys has identified. You can query the KB using the <code>query_kb()</code> function:</p> <p>Heads Up!: When calling <code>query_kb()</code>, the function returns a regular list of <code>KBEntry</code> objects.</p> <pre><code>from qualysdk import BasicAuth, vmdr\n\nwith BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1') as auth:\n    #Full KB pull:\n    kb_query = vmdr.query_kb(auth)\n\n    #or use kwargs to filter, \n    # for example QIDs published for a specific week:\n    kb_query = vmdr.query_kb(auth, published_after='2024-06-21', published_before='2024-06-28')\n\n    #Want to search the list of \n    # KBEntries based on some criteria?\n    in_scope_qids = [entry for entry in kb_query if entry.QID in range(1000, 2000)]\n    len(in_scope_qids)\n&gt;&gt;&gt;400\n</code></pre>"},{"location":"vmdr/#query-cves-qualys-vulnerability-scores","title":"Query CVE's Qualys Vulnerability Scores","text":"<p><code>get_kb_qvs</code> lets you query Qualys for QVS, EPSS, and CVSS scores for a comma-separated string of CVE IDs. Output also includes supporting details such as known threat actors, malware names/hashes, trending QIDs associated with the CVE, and more.</p> <p>By default, returns all CVEs with QVS data.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>cve</code> <code>Union[str, list[str]]</code> A comma-separated string or list of strings of CVE IDs to query. \u274c <code>details</code> <code>Literal['Basic', 'All']</code> The level of detail to return. Defaults to <code>Basic</code>, which only includes CVE ID, QVS score, and last changed/published dates. \u274c <code>qvs_last_modified_before</code> <code>str</code> Filter output to CVEs with a QVS score last modified before this date. Formatted like <code>YYYY-MM-DD[THH:MM:SSZ]</code> \u274c <code>qvs_last_modified_after</code> <code>str</code> Filter output to CVEs with a QVS score last modified after this date. Formatted like <code>YYYY-MM-DD[THH:MM:SSZ]</code> \u274c <code>qvs_min</code> <code>int</code> Filter output to CVEs with a QVS score greater than or equal to this value. \u274c <code>qvs_max</code> <code>int</code> Filter output to CVEs with a QVS score less than or equal to this value. \u274c <code>nvd_published_before</code> <code>str</code> Filter output to CVEs with an NVD score published before this date. Formatted like <code>YYYY-MM-DD[THH:MM:SSZ]</code> \u274c <code>nvd_published_after</code> <code>str</code> Filter output to CVEs with an NVD score published after this date. Formatted like <code>YYYY-MM-DD[THH:MM:SSZ]</code> \u274c <pre><code>from qualysdk import BasicAuth, vmdr\n\nwith BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1') as auth:\n    cves = 'CVE-2021-44228'\n    result = vmdr.get_kb_qvs(auth, cve=cves, details='All')\n&gt;&gt;&gt;[KBQVS(id='CVE-2021-44228', qvs=95, ...), ...]\n\n# Get all CVEs:\nwith BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1') as auth:\n    result = vmdr.get_kb_qvs(auth)\n&gt;&gt;&gt;[\n    KBQVS(id='CVE-2021-44228', qvs=95, ...), \n    KBQVS(id='CVE-2021-40438', qvs=90, ...),  \n    KBQVS(id='CVE-2021-40439', qvs=95, ...),  \n    ...\n]\n\n# Pass a list of CVEs:\nwith BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg1') as auth:\n    cves = ['CVE-2021-44228', 'CVE-2021-40438', 'CVE-2021-40439']\n    result = vmdr.get_kb_qvs(auth, cve=cves)\n&gt;&gt;&gt;[\n    KBQVS(id='CVE-2021-44228', qvs=95, ...), \n    KBQVS(id='CVE-2021-40438', qvs=90, ...),  \n    KBQVS(id='CVE-2021-40439', qvs=95, ...),  \n    ...\n]\n</code></pre>"},{"location":"vmdr/#get-user-activity-log","title":"Get User Activity Log","text":"<p><code>get_activity_log</code> lets you pull a list of user activity logs in your subscription. Returns a <code>BaseList</code> of <code>ActivityLog</code> objects.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> The number of pages to return. Defaults to <code>'all'</code>. \u274c <code>user_action</code> <code>str</code> Filter output to logs with a specific user action, such as <code>\"login\"</code> or <code>\"launch\"</code>. \u274c <code>action_details</code> <code>str</code> Filter output to logs with specific action details. \u274c <code>username</code> <code>str</code> Filter output to logs for a specific username. \u274c <code>since_datetime</code> <code>str</code> Filter output to logs since this datetime. Formatted like <code>YYYY-MM-DD HH:ii:ss</code> \u274c <code>until_datetime</code> <code>str</code> Filter output to logs until this datetime. Formatted like <code>YYYY-MM-DD HH:ii:ss</code> \u274c <code>user_role</code> <code>str</code> Filter output to logs for a specific user role. \u274c <code>truncation_limit</code> <code>int</code> Limit the number of log entries per page returned. \u274c <pre><code>from qualysdk import BasicAuth, vmdr\n\nwith BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg4') as auth:\n    # Get 3 pages of manager user details since 2024-06-01:\n    activity_log = vmdr.get_activity_log(\n        auth, \n        page_count=3\n        user_role='Manager',\n        since_datetime='2024-06-01 00:00:00'    \n    )\n&gt;&gt;&gt;[ActivityLog(User_Name='alice_123', User_Role='Manager', Action='login', Details='Logged in', ...), ...]\n</code></pre>"},{"location":"vmdr/#purge-hosts-api","title":"Purge Hosts API","text":"<p><code>purge_hosts</code> lets you purge hosts out of VMDR/PC. Returns a string with the Qualys response.</p> <p>Depending on the requesting account's permissions, the scope of assets that can be purged is as follows:</p> User Role Can Purge Vuln Data Can Purge Compliance Data Manager \u2705 \u2705 Auditor \u274c \u2705 Unit Manager, Scanner, Reader \u274c (\u26a0\ufe0f Can be enabled if <code>\"Purge host information/history\"</code> is given as a permission) \u274c (\u26a0\ufe0f Can be enabled if <code>\"Purge host information/history\"</code> is given as a permission) <p>Heads Up!: Scan results are not purged when you purge a host. Only the host and host data are purged.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> The authentication object. \u2705 <code>data_scope</code> <code>Literal['vm','pc', 'vm,pc'] = 'vm,pc'</code> Limit scope of purge, or specify <code>vm,pc</code>/<code>pc,vm</code> (the default) to delete both. \u274c <code>ids</code> <code>str</code> A comma-separated string of host IDs to purge. \u274c <code>ips</code> <code>str</code> A comma-separated string of IP addresses to purge. \u274c <code>ag_ids</code> <code>str</code> A comma-separated string of asset group IDs to purge. \u274c <code>ag_titles</code> <code>str</code> A comma-separated string of asset group titles to purge. \u274c <code>network_ids</code> <code>str</code> A comma-separated string of network IDs to purge. \u26a0\ufe0f REQUIRES NETWORK SUPPORT FEATURE ON SUBSCRIPTION \u274c <code>no_vm_scan_since</code> <code>str</code> Purge hosts that have not been scanned since this date. Formatted like <code>YYYYMM-DD[THH:MM:SSZ]</code> \u274c <code>no_compliance_scan_since</code> <code>str</code> Purge hosts that have not been scanned for compliance since this date. Formatted like <code>YYYYMM-DD[THH:MM:SSZ]</code> \u274c <code>compliance_enabled</code> <code>bool</code> Purge hosts activated for policy compliance. \u274c <code>os_pattern</code> <code>str</code> Purge hosts with a specific URL-encoded, PCRE OS regex pattern. \u274c <pre><code>from qualysdk import BasicAuth, vmdr\n\nwith BasicAuth(&lt;username&gt;, &lt;password&gt;, platform='qg4') as auth:\n    # Purge hosts with IDs 12345 and 67890:\n    result = vmdr.purge_hosts(auth, ids='12345,67890')\n&gt;&gt;&gt;Hosts Queued for Purging\n</code></pre>"},{"location":"vmdr/#special-dataclasses-for-vmdr","title":"Special Dataclasses for VMDR","text":"<p>There are quite a few special dataclasses that are used in the VMDR module, as well as a <code>BaseList</code> class that is used to store these dataclasses and add some easier string functionality.</p> <p>For example, for KB entries, there is the <code>KBEntry</code> class which holds the various fields that the Qualys KB API returns. Inside a <code>KBEntry</code> object there are custom classes for things like <code>ThreatIntel</code> and <code>Software</code>. Other examples include the <code>VMDRHost</code> class, which holds the various fields that the VMDR Host List API returns, and the <code>Detection</code> class, which holds the various fields that the VMDR Host List Detection API returns under a <code>VMDRHost</code>. <pre><code>... #Prior KB pull\n\n#Get the ThreatIntel attribute of the a KBEntry object, which is a custom dataclass:\nkb_entry.THREAT_INTELLIGENCE\n&gt;&gt;&gt;BaseList([ThreatIntel(ID=4, TEXT='High_Lateral_Movement')])\n\n#Or perhaps you want all the CVEs in a CVEList as a comma-separated string:\nstr(kb_entry.CVEList)\n&gt;&gt;&gt;'CVE-2024-1234, CVE-2024-5678, ...'\n</code></pre></p>"},{"location":"vmdr/#kb-dataclasses","title":"KB Dataclasses","text":"Class Attributes <code>VendorReference</code> ID, URL <code>ThreatIntel</code> ID, TEXT <code>Software</code> PRODUCT, VENDOR <code>CVEID</code> ID, URL <code>Compliance</code> _TYPE, SECTION, DESCRIPTION <code>Bugtraq</code> ID, URL"},{"location":"vmdr/#qualysdk-users-cli-tool","title":"<code>qualysdk-users</code> CLI tool","text":"<p>The <code>qualysdk-users</code> CLI tool is a command-line interface for the VMDR user management portion of the SDK. It allows you to quickly pull down a list of users, create, or edit users.</p>"},{"location":"vmdr/#usage","title":"Usage","text":"<pre><code>usage: qualysdk-users [-h] -u USERNAME -p PASSWORD [-P {qg1,qg2,qg3,qg4}] {get_users,create_user,edit_user} ...\n\nCLI script to quickly perform user management operations using qualysdk\n\npositional arguments:\n  {get_users,create_user,edit_user}\n                        Action to perform\n    get_users           Get the users that match the given criteria.\n    create_user         Create a new user.\n    edit_user           Edit an existing user.\n\noptions:\n  -h, --help            show this help message and exit\n  -u, --username USERNAME\n                        Qualys username\n  -p, --password PASSWORD\n                        Qualys password\n  -P, --platform {qg1,qg2,qg3,qg4}\n                        Qualys platform\n</code></pre>"},{"location":"vmdr/#create-user","title":"Create User","text":"<pre><code>usage: qualysdk-users create_user [-h] [-nW] [-aG ASSET_GROUPS] [-f FAX] [-a2 ADDRESS2] [-z ZIP_CODE] [-eID EXTERNAL_ID]\n                                  {manager,unit_manager,scanner,reader,contact,administrator} unit first_name last_name title phone email address1 city state country\n\npositional arguments:\n  {manager,unit_manager,scanner,reader,contact,administrator}\n                        The role of the user to create\n  unit                  The business unit of the user to create. Use 'Unassigned' if the user does not belong to a business unit.\n  first_name            The first name of the user to create\n  last_name             The last name of the user to create\n  title                 The title of the user to create\n  phone                 The phone number of the user to create\n  email                 The email of the user to create\n  address1              The address of the user to create\n  city                  The city of the user to create\n  state                 The state of the user to create. Must be the full name of the state, e.g. 'Maryland' or 'Pennsylvania'\n  country               The country of the user to create. Must be the full name of the country, e.g. 'United States of America' or 'Canada'\n\noptions:\n  -h, --help            show this help message and exit\n  -nW, --no-welcome-email\n                        If set, do not send a welcome email to the user, instead return the user login credentials to stdout. Default is to send a welcome email.\n  -aG, --asset-groups ASSET_GROUPS\n                        Comma-separated string of asset group IDs to assign to the user\n  -f, --fax FAX         The fax number of the user. Because we're still in the 1980s, and Rick Astley is never gonna give you up...\n  -a2, --address2 ADDRESS2\n                        The second line of the address of the user if applicable\n  -z, --zip-code ZIP_CODE\n                        The zip code of the user\n  -eID, --external-id EXTERNAL_ID\n                        The external ID of the user. This is a unique identifier for the user in your system.\n</code></pre>"},{"location":"vmdr/#edit-user","title":"Edit User","text":"<pre><code>usage: qualysdk-users edit_user [-h] [--asset-groups ASSET_GROUPS]\n                                [--first-name FIRST_NAME]\n                                [--last-name LAST_NAME] [--title TITLE]\n                                [--phone PHONE] [--fax FAX] [--email EMAIL]\n                                [--address1 ADDRESS1] [--address2 ADDRESS2]\n                                [--city CITY] [--state STATE]\n                                [--country COUNTRY] [--zip-code ZIP_CODE]\n                                [--external-id EXTERNAL_ID]\n                                user_id\n\npositional arguments:\n  user_id               Username of the user to edit\n\noptions:\n  -h, --help            show this help message and exit\n  --asset-groups ASSET_GROUPS\n                        Comma-separated string of asset group IDs to assign to\n                        the user\n  --first-name FIRST_NAME\n                        New first name of the user\n  --last-name LAST_NAME\n                        New last name of the user\n  --title TITLE         New title of the user\n  --phone PHONE         New phone number of the user\n  --fax FAX             New fax number of the user\n  --email EMAIL         New email of the user\n  --address1 ADDRESS1   New address of the user\n  --address2 ADDRESS2   New second line of the address of the user if\n                        applicable\n  --city CITY           New city of the user\n  --state STATE         New state of the user. Must be the full name of the\n                        state, e.g. 'Maryland' or 'Pennsylvania'\n  --country COUNTRY     New country of the user. Must be the full name of the\n                        country, e.g. 'United States of America' or 'Canada'\n  --zip-code ZIP_CODE   New zip code of the user\n  --external-id EXTERNAL_ID\n                        New external ID of the user. This is a unique\n                        identifier for the user in your system.\n</code></pre>"},{"location":"vmdr/#get-users","title":"Get Users","text":"<pre><code>usage: qualysdk-users get_users [-h] [-o OUTPUT]\n                                [--external-id-contains EXTERNAL_ID_CONTAINS]\n                                [--external-id-assigned]\n\noptions:\n  -h, --help            show this help message and exit\n  -o, --output OUTPUT   Output (json) file to write results to\n  --external-id-contains EXTERNAL_ID_CONTAINS\n                        Specify an external ID to filter users by\n  --external-id-assigned\n                        If set, only return users with an external ID assigned\n                        to their Qualys account\n</code></pre>"},{"location":"was/","title":"Web Application Scanning APIs","text":"<p>WAS APIs return data on web apps in your subscription, as well as manage them.</p> <p>After running: <pre><code>from qualysdk.was import *\n</code></pre> You can use any of the endpoints currently supported:</p>"},{"location":"was/#was-endpoints","title":"WAS Endpoints","text":"API Call Description <code>count_webapps</code> Returns the number of web apps in the subscription that match given kwargs. <code>get_webapps</code> Returns a list of web apps in the subscription that match given kwargs. <code>get_webapp_details</code> Returns all attributes of a single web app. <code>get_webapps_verbose</code> Combines the functionality of <code>get_webapps</code> and <code>get_webapp_details</code> to return a list of web apps with all attributes. Great for SQL data uploads. <code>create_webapp</code> Creates a new web app in the subscription. <code>update_webapp</code> Updates a web app in the subscription. <code>delete_webapp</code> Deletes a web app in the subscription. <code>purge_webapp</code> Purges scan data for a web app in the subscription. <code>get_selenium_script</code> Returns the Selenium script associated with a web app <code>count_authentication_records</code> Returns the number of authentication records in the subscription that match given kwargs. <code>get_authentication_records</code> Returns a list of authentication records in the subscription that match given kwargs. <code>get_authentication_record_details</code> Returns all attributes of a single authentication record. <code>create_authentication_record</code> Creates a new authentication record in the subscription. <code>delete_authentication_record</code> Deletes an authentication record in the subscription. <code>count_findings</code> Returns the number of findings in the subscription that match given kwargs. <code>get_findings</code> Returns a list of findings in the subscription that match given kwargs. <code>get_finding_details</code> Returns all attributes of a single finding. <code>get_findings_verbose</code> Combines the functionality of <code>get_findings</code> and <code>get_finding_details</code> to return a list of findings with all attributes. Great for SQL data uploads. <code>count_scans</code> Returns the number of scans in the subscription that match given kwargs. <code>get_scans</code> Returns a list of scans in the subscription that match given kwargs. <code>get_scan_details</code> Returns all attributes of a single scan. <code>get_scans_verbose</code> Combines the functionality of <code>get_scans</code> and <code>get_scan_details</code> to return a list of scans with all attributes. Great for SQL data uploads. <code>launch_scan</code> Launches a scan in the subscription. <code>cancel_scan</code> Cancels a scan in the subscription. <code>get_scan_status</code> Returns the status of a scan and the results/status of trying to authenticate to the target. <code>scan_again</code> Launches a scan again, optionally with a new name. <code>get_scan_results</code> Returns the results of a scan as a dictionary, optionally writing to an XML file."},{"location":"was/#count-webapps-api","title":"Count Webapps API","text":"<p><code>count_webapps</code> returns the number of web apps in the subscription that match the given kwargs.</p> <p>Head's Up! This method is useful for quickly getting a count of webapps that match certain criteria. It does NOT return the webapps themselves, or any attributes of the webapps.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>id</code> <code>Union[str, int]</code> Web app ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>name</code> <code>str</code> Web app name \u274c <code>name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the name filter \u274c <code>url</code> <code>str</code> Web app URL \u274c <code>url_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the URL filter \u274c <code>tags_name</code> <code>str</code> Tag name \u274c <code>tags_name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the tag name filter \u274c <code>tags_id</code> <code>Union[str, int]</code> Tag ID \u274c <code>tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the tag ID filter \u274c <code>createdDate</code> <code>str</code> Date created \u274c <code>createdDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the created date filter \u274c <code>updatedDate</code> <code>str</code> Date updated \u274c <code>updatedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the updated date filter \u274c <code>isScheduled</code> <code>bool</code> If the webapp has a scan scheduled \u274c <code>isScheduled_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\"]</code> Operator for the isScheduled filter \u274c <code>isScanned</code> <code>bool</code> If the webapp has been scanned \u274c <code>isScanned_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\"]</code> Operator for the isScanned filter \u274c <code>lastScan_status</code> <code>Literal[\"SUBMITTED\", \"RUNNING\", \"FINISHED\", \"TIME_LIMIT_EXCEEDED\", \"SCAN_NOT_LAUNCHED\", \"SCANNER_NOT_AVAILABLE\", \"ERROR\", \"CANCELLED\"]</code> Status of the last scan \u274c <code>lastScan_status_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the lastScan_status filter \u274c <code>lastScan_date</code> <code>str</code> Date of the last scan in UTC date/time format \u274c <code>lastScan_date_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the lastScan_date filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import count_webapps\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Get the number of webapps that have a lastScan.status of \"RUNNING\":\nwebapps = count_webapps(auth, lastScan_status=\"RUNNING\")\n&gt;&gt;&gt;5\n\n# Get the number of webapps by searching by multiple tags:\nwebapps = count_webapps(auth, tags_id=\"12345,54321\", tags_id_operator=\"IN\")\n&gt;&gt;&gt;20\n\n# Get the number of webapps where the name contains \"prod\":\nwebapps = count_webapps(auth, name=\"prod\", name_operator=\"CONTAINS\")\n&gt;&gt;&gt;10\n</code></pre>"},{"location":"was/#list-webapps-api","title":"List Webapps API","text":"<p><code>get_webapps</code> returns a list of web apps in the subscription that match the given kwargs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> Number of pages to return. If 'all', returns all pages \u274c <code>id</code> <code>Union[str, int]</code> Web app ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>name</code> <code>str</code> Web app name \u274c <code>name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the name filter \u274c <code>url</code> <code>str</code> Web app URL \u274c <code>url_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the URL filter \u274c <code>tags_name</code> <code>str</code> Tag name \u274c <code>tags_name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the tag name filter \u274c <code>tags_id</code> <code>Union[str, int]</code> Tag ID \u274c <code>tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the tag ID filter \u274c <code>createdDate</code> <code>str</code> Date created \u274c <code>createdDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the created date filter \u274c <code>updatedDate</code> <code>str</code> Date updated \u274c <code>updatedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the updated date filter \u274c <code>isScheduled</code> <code>bool</code> If the webapp has a scan scheduled \u274c <code>isScheduled_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\"]</code> Operator for the isScheduled filter \u274c <code>isScanned</code> <code>bool</code> If the webapp has been scanned \u274c <code>isScanned_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\"]</code> Operator for the isScanned filter \u274c <code>lastScan_status</code> <code>Literal[\"SUBMITTED\", \"RUNNING\", \"FINISHED\", \"TIME_LIMIT_EXCEEDED\", \"SCAN_NOT_LAUNCHED\", \"SCANNER_NOT_AVAILABLE\", \"ERROR\", \"CANCELLED\"]</code> Status of the last scan \u274c <code>lastScan_status_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the lastScan_status filter \u274c <code>lastScan_date</code> <code>str</code> Date of the last scan in UTC date/time format \u274c <code>lastScan_date_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the lastScan_date filter \u274c <code>verbose</code> <code>bool</code> If True, returns all tags for the webapp \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_webapps\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n# Get the webapps that have a lastScan.status of \"RUNNING\". Include tags:\nwebapps = get_webapps(auth, lastScan_status=\"RUNNING\", verbose=True)\n&gt;&gt;&gt;[\n    WebApp(\n        id=12345678, \n        name=\"My Awesome Site\", \n        url=\"https://example.com\", \n        ...\n    ), \n    WebApp(\n        id=98765432, \n        ...\n    ),\n    ...\n]\n</code></pre>"},{"location":"was/#get-webapp-details-api","title":"Get Webapp Details API","text":"<p><code>get_webapp_details</code> returns all attributes of a single web app.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>webappId</code> <code>Union[str, int]</code> Web app ID \u2705 <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_webapp_details, get_webapps\n\n# First, get the ID of the webapp you want to get details for:\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\nwebapps = get_webapps(auth, name=\"My Awesome Site\", id=12345678)\nwebapp_id = webapps[0].id\n\n# Get the details for the webapp:\nwebapp = get_webapp_details(auth, webappId=webapp_id)\n&gt;&gt;&gt;WebApp(\n    id=12345678, \n    name=\"My Awesome Site\", \n    url=\"https://example.com\", \n    riskScore=100,\n    owner_firstName=\"John\",\n    owner_lastName=\"Doe\",\n    ...\n)\n</code></pre>"},{"location":"was/#get-webapps-verbose-api","title":"Get Webapps Verbose API","text":"<p><code>get_webapps_verbose</code> combines the functionality of <code>get_webapps</code> and <code>get_webapp_details</code> to return a list of web apps with all attributes. </p> <p>This method uses threading to speed up the process. Number of threads can be set with the <code>thread_count</code> parameter.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>thread_count</code> <code>int</code> Number of threads to use for the request \u274c <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> Number of pages to return. If 'all', returns all pages \u274c <code>id</code> <code>Union[str, int]</code> Web app ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>name</code> <code>str</code> Web app name \u274c <code>name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the name filter \u274c <code>url</code> <code>str</code> Web app URL \u274c <code>url_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the URL filter \u274c <code>tags_name</code> <code>str</code> Tag name \u274c <code>tags_name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the tag name filter \u274c <code>tags_id</code> <code>Union[str, int]</code> Tag ID \u274c <code>tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the tag ID filter \u274c <code>createdDate</code> <code>str</code> Date created \u274c <code>createdDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the created date filter \u274c <code>updatedDate</code> <code>str</code> Date updated \u274c <code>updatedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the updated date filter \u274c <code>isScheduled</code> <code>bool</code> If the webapp has a scan scheduled \u274c <code>isScheduled_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\"]</code> Operator for the isScheduled filter \u274c <code>isScanned</code> <code>bool</code> If the webapp has been scanned \u274c <code>isScanned_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\"]</code> Operator for the isScanned filter \u274c <code>lastScan_status</code> <code>Literal[\"SUBMITTED\", \"RUNNING\", \"FINISHED\", \"TIME_LIMIT_EXCEEDED\", \"SCAN_NOT_LAUNCHED\", \"SCANNER_NOT_AVAILABLE\", \"ERROR\", \"CANCELLED\"]</code> Status of the last scan \u274c <code>lastScan_status_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the lastScan_status filter \u274c <code>lastScan_date</code> <code>str</code> Date of the last scan in UTC date/time format \u274c <code>lastScan_date_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the lastScan_date filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_webapps_verbose\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Get all webapps with all attributes:\nwebapps = get_webapps_verbose(auth)\n&gt;&gt;&gt;[\n    WebApp(\n        id=12345678, \n        name=\"My Awesome Site\", \n        url=\"https://example.com\", \n        ...\n    ), \n    WebApp(\n        id=98765432, \n        ...\n    ),\n    ...\n]\n\n# Get all webapps with all attributes \n# that have \"prod\" in the name, using 10 threads:\nwebapps = get_webapps_verbose(\n    auth,\n    name=\"prod\",\n    name_operator=\"CONTAINS\",\n    thread_count=10\n)\n&gt;&gt;&gt;[\n    WebApp(\n        id=12345678, \n        name=\"My Awesome Site (prod)\", \n        url=\"https://example.com\", \n        ...\n    ), \n    WebApp(\n        id=98765432, \n        name=\"My Other Site (prod)\",\n        ...\n    ),\n    ...\n]\n</code></pre>"},{"location":"was/#create-webapp-api","title":"Create Webapp API","text":"<p><code>create_webapp</code> creates a new web app in the subscription.</p> <p>Head's Up!: More optional attributes will be supported in the future.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>name</code> <code>str</code> Web app name \u2705 <code>url</code> <code>str</code> Web app URL \u2705 <code>authRecord_id</code> <code>Union[str, int]</code> Auth record ID \u274c <code>uris</code> <code>Union[str, list[str]]</code> Single URI string or a list of URI strings \u274c <code>tag_ids</code> <code>Union[int, list[int]]</code> Single tag ID or a list of tag IDs \u274c <code>domains</code> <code>Union[str, list[str]]</code> Single domain string or a list of domain strings \u274c <code>scannerTag_ids</code> <code>Union[int, list[int]]</code> Single tag ID or a list of tag IDs associated with scanner appliances to assign \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import create_webapp\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Create a new webapp with \n# minimal attributes:\nnew_webapp = create_webapp(\n    auth,\n    name=\"My New Site\",\n    url=\"https://newsite.com\"\n)\n\n# Create a new webapp with\n# URIs, tags, and an auth record:\nnew_webapp = create_webapp(\n    auth,\n    name=\"My New Site\",\n    url=\"https://newsite.com\",\n    uris=[\"https://newsite.com/admin\", \"https://newsite.com/blog\", \"https://newsite.com/contact\"],\n    authRecord_id=12345678 # Only one auth record can be specified in the API call\n    tag_ids=[12345, 54321],\n    ...\n)\n&gt;&gt;&gt;WebApp(\n    id=12345678, \n    name=\"My New Site\", \n    url=\"https://newsite.com\", \n    uris=[\"https://newsite.com/admin\", \"https://newsite.com/blog\", \"https://newsite.com/contact\"],\n    tags=[WASTag(id=12345, name='Prod'), WASTag(id=54321, name='News')],\n    ...\n)\n\n# Create a new webapp with\n# 2 default scanner tags:\nnew_webapp = create_webapp(\n    auth,\n    name=\"My New Site\",\n    url=\"https://newsite.com\",\n    scannerTag_ids=[12345, 54321],\n    ...\n)\n</code></pre>"},{"location":"was/#update-webapp-api","title":"Update Webapp API","text":"<p><code>update_webapp</code> updates a web app in the subscription. </p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>webappId</code> <code>Union[str, int]</code> Web app ID \u2705 <code>name</code> <code>str</code> Web app name \u274c <code>url</code> <code>str</code> Web app URL \u274c <code>attributes</code> <code>dict[\"add\": {key: value}, \"remove\": list[str]]</code> Attributes to add or remove. \u274c <code>defaultProfile_id</code> <code>int</code> Default profile ID \u274c <code>urlExcludelist</code> <code>list[str]</code> List of URLs to exclude \u274c <code>urlAllowlist</code> <code>list[str]</code> List of URLs to allow \u274c <code>postDataExcludelist</code> <code>list[str]</code> List of post data paths to exclude \u274c <code>useSitemap</code> <code>bool</code> If True, use the sitemap \u274c <code>headers</code> <code>list[\"Header_name: Header_value\"]</code> List of headers \u274c <code>authRecord_id</code> <code>dict[\"add\": int, \"remove\": int]</code> Auth record ID to add or remove \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import update_webapp\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\nwebapp_id = 12345678\n\n# Update the name of a webapp:\nupdated_webapp = update_webapp(\n    auth,\n    webappId=webapp_id,\n    name=\"My Updated Site\"\n)\n\n# Remove current auth record and add a new one:\nupdated_webapp = update_webapp(\n    auth,\n    webappId=webapp_id,\n    authRecord_id={\"add\": 98765432, \"remove\": 12345678}\n)\n\n# Add new headers:\nupdated_webapp = update_webapp(\n    auth,\n    webappId=webapp_id,\n    headers=[\"X-Frame-Options: DENY\", \"Content-Security-Policy: default-src 'self'\"]\n)\n\n# Add/remove custom attributes:\nupdated_webapp = update_webapp(\n    auth,\n    webappId=webapp_id,\n    attributes={\"add\": {\"custom_attribute\": \"custom_value\"}, \"remove\": [\"old_custom_attribute1\", \"old_custom_attribute2\"]}\n)\n\n# add URLs to the exclude list:\nupdated_webapp = update_webapp(\n    auth,\n    webappId=webapp_id,\n    urlExcludelist=[\"https://example.com/admin\", \"https://example.com/blog\"]\n)\n</code></pre>"},{"location":"was/#delete-webapp-api","title":"Delete Webapp API","text":"<p><code>delete_webapp</code> deletes a web app in the subscription.</p> <p>Returns a list of webapp IDs that were deleted as a dictionary: <code>{\"id\": &lt;id&gt;}</code></p> <p>Head's Up!: Using this API may only remove the WAS-specific asset in the subscription. It may still be active in other Qualys modules, such as Global AssetView's web application view.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>removeFromSubscription</code> <code>bool=True</code> If <code>True</code>, removes the webapp from the subscription. If <code>False</code>, removes webapp from WAS only \u274c <code>id</code> <code>Union[str, int]</code> Web app ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>name</code> <code>str</code> Web app name \u274c <code>name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the name filter \u274c <code>url</code> <code>str</code> Web app URL \u274c <code>url_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the URL filter \u274c <code>tags_name</code> <code>str</code> Tag name \u274c <code>tags_name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the tag name filter \u274c <code>tags_id</code> <code>Union[str, int]</code> Tag ID \u274c <code>tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the tag ID filter \u274c <code>createdDate</code> <code>str</code> Date created \u274c <code>createdDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the created date filter \u274c <code>updatedDate</code> <code>str</code> Date updated \u274c <code>updatedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the updated date filter \u274c <code>isScheduled</code> <code>bool</code> If the webapp has a scan scheduled \u274c <code>isScheduled_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\"]</code> Operator for the isScheduled filter \u274c <code>isScanned</code> <code>bool</code> If the webapp has been scanned \u274c <code>isScanned_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\"]</code> Operator for the isScanned filter \u274c <code>lastScan_status</code> <code>Literal[\"SUBMITTED\", \"RUNNING\", \"FINISHED\", \"TIME_LIMIT_EXCEEDED\", \"SCAN_NOT_LAUNCHED\", \"SCANNER_NOT_AVAILABLE\", \"ERROR\", \"CANCELLED\"]</code> Status of the last scan \u274c <code>lastScan_status_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the lastScan_status filter \u274c <code>lastScan_date</code> <code>str</code> Date of the last scan in UTC date/time format \u274c <code>lastScan_date_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the lastScan_date filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import delete_webapp\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Delete a webapp by ID:\ndelete_webapp(auth, id=12345678)\n\n# Delete multiple webapps by ID:\ndelete_webapp(auth, id=\"12345678,98765432\", id_operator=\"IN\")\n\n# Delete all webapps that have the \"deprecated\" tag:\ndelete_webapp(auth, tags_name=\"deprecated\", tags_name_operator=\"EQUALS\")\n&gt;&gt;&gt;[{\"id\": 12345678}, {\"id\": 98765432}, ...]\n</code></pre>"},{"location":"was/#purge-webapp-scan-data-api","title":"Purge Webapp Scan Data API","text":"<p><code>purge_webapp</code> purges scan data for a web app in the subscription.</p> <p>Returns a list of webapp IDs that were purged as a dictionary: <code>{\"id\": &lt;id&gt;}</code></p> <p>Head's Up!: Using this API may de-activate the WAS-specific asset in the subscription. It may still be active in other Qualys modules.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>id</code> <code>Union[str, int]</code> Web app ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>name</code> <code>str</code> Web app name \u274c <code>name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the name filter \u274c <code>url</code> <code>str</code> Web app URL \u274c <code>url_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the URL filter \u274c <code>tags_name</code> <code>str</code> Tag name \u274c <code>tags_name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the tag name filter \u274c <code>tags_id</code> <code>Union[str, int]</code> Tag ID \u274c <code>tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the tag ID filter \u274c <code>createdDate</code> <code>str</code> Date created \u274c <code>createdDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the created date filter \u274c <code>updatedDate</code> <code>str</code> Date updated \u274c <code>updatedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the updated date filter \u274c <code>isScheduled</code> <code>bool</code> If the webapp has a scan scheduled \u274c <code>isScheduled_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\"]</code> Operator for the isScheduled filter \u274c <code>isScanned</code> <code>bool</code> If the webapp has been scanned \u274c <code>isScanned_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\"]</code> Operator for the isScanned filter \u274c <code>lastScan_status</code> <code>Literal[\"SUBMITTED\", \"RUNNING\", \"FINISHED\", \"TIME_LIMIT_EXCEEDED\", \"SCAN_NOT_LAUNCHED\", \"SCANNER_NOT_AVAILABLE\", \"ERROR\", \"CANCELLED\"]</code> Status of the last scan \u274c <code>lastScan_status_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the lastScan_status filter \u274c <code>lastScan_date</code> <code>str</code> Date of the last scan in UTC date/time format \u274c <code>lastScan_date_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the lastScan_date filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import purge_webapp\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Purge scan data for a webapp by ID:\npurge_webapp(auth, id=12345678)\n\n# Purge scan data for multiple webapps by ID:\npurge_webapp(auth, id=\"12345678,98765432\", id_operator=\"IN\")\n\n# Purge scan data for all webapps that have the \"deprecated\" tag:\npurge_webapp(auth, tags_name=\"deprecated\", tags_name_operator=\"EQUALS\")\n&gt;&gt;&gt;[{\"id\": 12345678}, {\"id\": 98765432}, ...]\n</code></pre>"},{"location":"was/#download-a-web-apps-associated-selenium-script-api","title":"Download a Web App's Associated Selenium Script API","text":"<p><code>get_selenium_script</code> returns the Selenium script associated with a web app.</p> <p>Head's Up! Currently, code to create a dataclass object out of the response to this API has not been written. This is a stub. If you have written the code yourself, please submit a pull request! This method will still return data, but it will be the raw data underneath the API response's <code>data</code> XML tag.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>id</code> <code>Union[str, int]</code> Web app ID \u2705 <code>crawlingScripts_id</code> <code>Union[str, int]</code> Crawling script ID \u2705 <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_selenium_script\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# STUB!\n</code></pre>"},{"location":"was/#count-authentication-records-api","title":"Count Authentication Records API","text":"<p><code>count_authentication_records</code> returns the number of authentication records in the subscription that match the given kwargs.</p> <p>Head's Up! This method is useful for quickly getting a count of authentication records that match certain criteria. It does NOT return the authentication records themselves, or any attributes of the authentication records.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>id</code> <code>Union[str, int]</code> Auth record ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>name</code> <code>str</code> Auth record name \u274c <code>name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the name filter \u274c <code>tags</code> <code>Union[str, int]</code> Tag ID \u274c <code>tags_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the tags filter \u274c <code>tags_name</code> <code>str</code> Tag name \u274c <code>tags_name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the tag name filter \u274c <code>tags_id</code> <code>Union[str, int]</code> Tag ID \u274c <code>tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the tag ID filter \u274c <code>createdDate</code> <code>str</code> Date created \u274c <code>createdDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the created date filter \u274c <code>updatedDate</code> <code>str</code> Date updated \u274c <code>updatedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the updated date filter \u274c <code>isUsed</code> <code>bool</code> If the auth record is in use \u274c <code>isUsed_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\"]</code> Operator for the isUsed filter \u274c <code>lastScan_authStatus</code> <code>Literal[\"NONE\", \"NOT_USED\", \"PARTIAL\", \"FAILED\", \"SUCCESSFUL\"]</code> Status of the last scan \u274c <code>lastScan_authStatus_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the lastScan_authStatus filter \u274c <code>lastScan_date</code> <code>str</code> Date of the last scan in UTC date/time format \u274c <code>lastScan_date_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the lastScan_date filter \u274c <code>contents</code> <code>Literal[\"FORM_STANDARD\", \"FORM_CUSTOM\", \"FORM_SELENIUM\", \"SERVER_BASIC\", \"SERVER_DIGEST\", \"SERVER_NTLM\", \"CERTIFICATE\", \"OAUTH2_AUTH_CODE\", \"OAUTH2_IMPLICIT\", \"OAUTH2_PASSWORD\", \"OAUTH2_CLIENT_CREDS\"]</code> Auth record contents \u274c <code>contents_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the contents filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import count_authentication_records\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Get the number of Selenium auth records that have a lastScan.authStatus of \"FAILED\":\nfailed_selenium = count_authentication_records(\n    auth,\n    lastScan_authStatus=\"FAILED\",\n    contents=\"FORM_SELENIUM\"\n)\n&gt;&gt;&gt;5\n\n# Get all OAuth2 auth records:\noauth2 = count_authentication_records(\n    auth,\n    contents=\"OAUTH2_AUTH_CODE,OAUTH2_IMPLICIT,OAUTH2_PASSWORD,OAUTH2_CLIENT_CREDS\",\n    contents_operator=\"IN\"\n)\n&gt;&gt;&gt;50\n</code></pre>"},{"location":"was/#list-authentication-records-api","title":"List Authentication Records API","text":"<p><code>get_authentication_records</code> returns a list of authentication records in the subscription that match the given kwargs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> Number of pages to return. If 'all', returns all pages \u274c <code>id</code> <code>Union[str, int]</code> Auth record ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>name</code> <code>str</code> Auth record name \u274c <code>name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the name filter \u274c <code>tags</code> <code>Union[str, int]</code> Tag ID \u274c <code>tags_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the tags filter \u274c <code>tags_name</code> <code>str</code> Tag name \u274c <code>tags_name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the tag name filter \u274c <code>tags_id</code> <code>Union[str, int]</code> Tag ID \u274c <code>tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the tag ID filter \u274c <code>createdDate</code> <code>str</code> Date created \u274c <code>createdDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the created date filter \u274c <code>updatedDate</code> <code>str</code> Date updated \u274c <code>updatedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the updated date filter \u274c <code>isUsed</code> <code>bool</code> If the auth record is in use \u274c <code>isUsed_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\"]</code> Operator for the isUsed filter \u274c <code>lastScan_authStatus</code> <code>Literal[\"NONE\", \"NOT_USED\", \"PARTIAL\", \"FAILED\", \"SUCCESSFUL\"]</code> Status of the last scan \u274c <code>lastScan_authStatus_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the lastScan_authStatus filter \u274c <code>lastScan_date</code> <code>str</code> Date of the last scan in UTC date/time format \u274c <code>lastScan_date_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the lastScan_date filter \u274c <code>contents</code> <code>Literal[\"FORM_STANDARD\", \"FORM_CUSTOM\", \"FORM_SELENIUM\", \"SERVER_BASIC\", \"SERVER_DIGEST\", \"SERVER_NTLM\", \"CERTIFICATE\", \"OAUTH2_AUTH_CODE\", \"OAUTH2_IMPLICIT\", \"OAUTH2_PASSWORD\", \"OAUTH2_CLIENT_CREDS\"]</code> Auth record type \u274c <code>contents_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the contents filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_authentication_records\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Get all authentication records:\nauth_records = get_authentication_records(auth)\n&gt;&gt;&gt;[\n    WebAppAuthRecord(\n        id=12345678,\n        name=\"My Auth Record\",\n        owner_id=98765432,\n        owner_firstName=\"John\",\n        owner_lastName=\"Doe\",\n        createdDate=datetime.datetime(2022, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),\n        updatedDate=datetime.datetime(2022, 2, 1, 0, 0, tzinfo=datetime.timezone.utc),\n    ),\n    ...\n]\n\n# Get all authentication records that have a lastScan.authStatus of \"FAILED\":\nfailed_auth_records = get_authentication_records(auth, lastScan_authStatus=\"FAILED\")\n&gt;&gt;&gt;[\n    WebAppAuthRecord(\n        id=12345678,\n        name=\"My Failed Auth Record\",\n        owner_id=98765432,\n        owner_firstName=\"John\",\n        owner_lastName=\"Doe\",\n        createdDate=datetime.datetime(2022, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),\n        updatedDate=datetime.datetime(2022, 2, 1, 0, 0, tzinfo=datetime.timezone.utc),\n    ),\n    ...\n]\n</code></pre>"},{"location":"was/#get-authentication-record-details-api","title":"Get Authentication Record Details API","text":"<p><code>get_authentication_record_details</code> returns all attributes of a single auth record.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>recordId</code> <code>Union[str, int]</code> Auth record ID \u2705 <p>Head's Up!: Server, Form, and OAuth2 passwords are automatically redacted when calling <code>sql.upload_was_authentication_records</code> and the record's <code>secured</code> attribute is set to <code>True</code> or the record's <code>name</code> attribute equals <code>\"password\"</code>.</p> <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_authentication_record_details, get_authentication_records\n\n# First, get some IDs of the auth records you want to get details for:\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\nauthrecords = get_authentication_records(auth)\nauthrecord_id = webapps[0].id\n\n# Get the details for the webapp. Some fields have been removed for space:\nwebapp = get_authentication_record_details(auth, authrecord_id)\n&gt;&gt;&gt;WebAppAuthRecord(\n    id=12345678, \n    name='My site', \n    owner_id=987654321, \n    owner_username='username',\n    owner_firstName='Eddie', \n    owner_lastName='Van Halen', \n    formRecord_type='STANDARD', \n    formRecord_sslOnly=False, \n    formRecord_authVault=False, \n    formRecord_seleniumCreds=False, \n    formRecord_fields_count=2, \n    formRecord_fields_list=[\n        WebAppAuthFormRecord(id=12345678, name='username', secured=False, value='username'), \n        WebAppAuthFormRecord(id=12345678, name='password', secured=False, value='Some Password')\n    ], \n    tags_count=1, \n    tags_list=[WASTag(id=12345678, name='Main websites')], \n    comments_count=0, \n    comments_list=[], \n    createdDate=datetime.datetime(2024, 1, 1, 1, 10, 0, tzinfo=datetime.timezone.utc), \n    updatedDate=datetime.datetime(2024, 1, 1, 1, 30, 0, tzinfo=datetime.timezone.utc), \n    createdBy_id=12345678, \n    createdBy_username='username', \n    createdBy_firstName='Layne', \n    createdBy_lastName='Staley', \n    updatedBy_id=88888888, \n    updatedBy_username='username', \n    updatedBy_firstName='James', \n    updatedBy_lastName='Hetfield'\n)\n</code></pre>"},{"location":"was/#get-authentication-records-verbose-api","title":"Get Authentication Records Verbose API","text":"<p><code>get_authentication_records_verbose</code> combines the functionality of <code>get_authentication_records</code> and <code>get_authentication_record_details</code> to return a list of auth records with all attributes. </p> <p>This method uses threading to speed up the process. Number of threads can be set with the <code>thread_count</code> parameter.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>thread_count</code> <code>int</code> Number of threads to use for the request \u274c <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> Number of pages to return. If 'all', returns all pages \u274c <code>id</code> <code>Union[str, int]</code> Auth record ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>name</code> <code>str</code> Auth record name \u274c <code>name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the name filter \u274c <code>tags</code> <code>Union[str, int]</code> Tag ID \u274c <code>tags_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the tags filter \u274c <code>tags_name</code> <code>str</code> Tag name \u274c <code>tags_name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the tag name filter \u274c <code>tags_id</code> <code>Union[str, int]</code> Tag ID \u274c <code>tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the tag ID filter \u274c <code>createdDate</code> <code>str</code> Date created \u274c <code>createdDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the created date filter \u274c <code>updatedDate</code> <code>str</code> Date updated \u274c <code>updatedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the updated date filter \u274c <code>isUsed</code> <code>bool</code> If the auth record is in use \u274c <code>isUsed_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\"]</code> Operator for the isUsed filter \u274c <code>lastScan_authStatus</code> <code>Literal[\"NONE\", \"NOT_USED\", \"PARTIAL\", \"FAILED\", \"SUCCESSFUL\"]</code> Status of the last scan \u274c <code>lastScan_authStatus_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the lastScan_authStatus filter \u274c <code>lastScan_date</code> <code>str</code> Date of the last scan in UTC date/time format \u274c <code>lastScan_date_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the lastScan_date filter \u274c <code>contents</code> <code>Literal[\"FORM_STANDARD\", \"FORM_CUSTOM\", \"FORM_SELENIUM\", \"SERVER_BASIC\", \"SERVER_DIGEST\", \"SERVER_NTLM\", \"CERTIFICATE\", \"OAUTH2_AUTH_CODE\", \"OAUTH2_IMPLICIT\", \"OAUTH2_PASSWORD\", \"OAUTH2_CLIENT_CREDS\"]</code> Auth record type \u274c <code>contents_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the contents filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_authentication_records_verbose\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Get all auth records with all attributes:\nauthrecords = get_authentication_records_verbose(auth)\n&gt;&gt;&gt;[\n    WebAppAuthRecord(\n        id=12345678, \n        name=\"some auth record\", \n        formRecord_type=\"SELENIUM\",\n        ...\n    ), \n    WebAppAuthRecord(\n        id=98765432, \n        ...\n    ),\n    ...\n]\n\n# Get all auth records with all attributes \n# that have \"prod\" in the name, using 10 threads:\nauthrecords = get_authentication_records_verbose(\n    auth,\n    name=\"prod\",\n    name_operator=\"CONTAINS\",\n    thread_count=10\n)\n&gt;&gt;&gt;[\n    WebAppAuthRecord(\n        id=12345678, \n        name=\"some prod auth record\",\n        ...\n    ), \n    ...\n]\n</code></pre>"},{"location":"was/#create-authentication-record-api","title":"Create Authentication Record API","text":"<p><code>create_authentication_record</code> creates a new authentication record in the subscription. You can create <code>formRecord</code>, <code>serverRecord</code>, and <code>oauth2Record</code> types. Each type requires different attributes, which are detailed below. </p> <p>Head's Up!: The options for this API endpoint are quite complex. When in doubt, refer to the error messages the SDK raises. It may take a few tries to get the right combination of arguments.</p>"},{"location":"was/#form-record","title":"Form Record","text":"<p>Below are the possible arguments for creating a form record:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>name</code> <code>str</code> Auth record name \u2705 <code>recordType</code> <code>str</code> = <code>formRecord</code> Record type \u2705 <code>subType</code> <code>Literal[\"STANDARD\", \"CUSTOM\", \"SELENIUM\"]</code> Record sub-type \u2705 <code>fields</code> <code>list[dict[\"name\": str, \"value\": str]]</code> List of fields \u2705 <code>sslOnly</code> <code>bool</code> If the authentication record should only be sent on a secure connection \u274c <code>authVault</code> <code>bool</code> If the authentication record should be stored in the auth vault \u274c <code>seleniumCreds</code> <code>bool</code> If the authentication record is for a Selenium script \u274c <code>seleniumScript</code> <code>dict[str, str]</code>, like: <code>{\"name\": \"my_script\", \"data\": &lt;script_as_XML_string&gt;}</code> Selenium script data \u274c <code>tags</code> <code>list[Union[str, int]]</code> List of tag IDs \u274c <code>comments</code> <code>list[str]</code> List of comments \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import create_authentication_record\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# EXAMPLE formRecord with basic username/password fields:\n\nnew_auth_record = create_authentication_record(\n    auth,\n    name=\"My New Auth Record\",\n    recordType=\"formRecord\",\n    subType=\"STANDARD\",\n    fields=[\n        {\"name\": \"username\", \"value\": \"my_username\"},\n        {\"name\": \"password\", \"value\": \"my_password\"},\n    ],\n    tags=[12345, 54321],\n    comments=[\"This is my new auth record\"],\n    sslOnly=True,\n)\n\n# SELENIUM EXAMPLE:\nnew_auth_record = create_authentication_record(\n    auth,\n    name=\"My Selenium Auth Record\",\n    recordType=\"formRecord\",\n    subType=\"SELENIUM\",\n    fields=[\n        {\"name\": \"username\", \"value\": \"my_username\"},\n        {\"name\": \"password\", \"value\": \"my_password\"},\n    ],\n    seleniumCreds=True,\n    seleniumScript={\"name\": \"my_script\", \"data\": \"\"\"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"&gt;\n&lt;head profile=\"http://selenium-ide.openqa.org/profiles/test-case\"&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n&lt;link rel=\"selenium.base\" href=\"https://community.qualys.com/\" /&gt;\n&lt;title&gt;seleniumScriptOK&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table cellpadding=\"1\" cellspacing=\"1\" border=\"1\"&gt;...\"\"\"},\n)\n</code></pre>"},{"location":"was/#server-record","title":"Server Record","text":"<p>Below are the possible arguments for creating a server record:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>name</code> <code>str</code> Auth record name \u2705 <code>recordType</code> <code>str</code> = <code>serverRecord</code> Record type \u2705 <code>sslOnly</code> <code>bool</code> If the authentication record should only be sent on a secure connection \u274c <code>certificate</code> <code>dict[\"name\": str, \"contents\": str, \"passphrase\": str]</code> Certificate data \u274c <code>tags</code> <code>list[Union[str, int]]</code> List of tag IDs \u274c <code>comments</code> <code>list[str]</code> List of comments \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import create_authentication_record\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# EXAMPLE serverRecord with a certificate:\nnew_auth_record = create_authentication_record(\n    auth,\n    name=\"My New Server Auth Record\",\n    recordType=\"serverRecord\",\n    certificate={\"name\": \"my_cert\", \"contents\": \"-----BEGIN CERTIFICATE-----\\nMIID...-----END CERTIFICATE-----\", \"passphrase\": \"my_passphrase\"},\n    tags=[12345, 54321],\n    comments=[\"This is my new server auth record\"],\n    sslOnly=True,\n)\n</code></pre>"},{"location":"was/#oauth2-record","title":"OAuth2 Record","text":"<p>Below are the possible arguments for creating an OAuth2 record:</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>name</code> <code>str</code> Auth record name \u2705 <code>recordType</code> <code>str</code> = <code>oauth2Record</code> Record type \u2705 <code>subType</code> <code>Literal[\"AUTH_CODE\", \"IMPLICIT\", \"PASSWORD\", \"CLIENT_CREDS\"]</code> Record sub-type \u2705 <code>clientId</code> <code>str</code> OAuth2 client ID \u2705 <code>clientSecret</code> <code>str</code> OAuth2 client secret \u2705 <code>accessTokenUrl</code> <code>str</code> OAuth2 access token URL \u2705 <code>scope</code> <code>str</code> OAuth2 scope \u274c <code>accessTokenExpiredMsgPattern</code> <code>str</code> OAuth2 access token expired message pattern \u274c <code>seleniumCreds</code> <code>bool</code> If the authentication record is for a Selenium script \u274c <code>seleniumScript</code> <code>dict[str, str]</code>, like: <code>{\"name\": \"my_script\", \"data\": &lt;script_as_XML_string&gt;}</code> Selenium script data \u274c <code>tags</code> <code>list[Union[str, int]]</code> List of tag IDs \u274c <code>comments</code> <code>list[str]</code> List of comments \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import create_authentication_record\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# EXAMPLE OAuth2 record:\nnew_auth_record = create_authentication_record(\n    auth,\n    name=\"My New OAuth2 Auth Record\",\n    recordType=\"oauth2Record\",\n    subType=\"CLIENT_CREDS\",\n    clientId=\"my_client_id\",\n    clientSecret=\"my_client_secret\",\n    accessTokenUrl=\"https://example.com/token\",\n    scope=\"scope\",\n    tags=[12345, 54321],\n    comments=[\"This is my new OAuth2 auth record\"],\n)\n</code></pre>"},{"location":"was/#delete-authentication-record-api","title":"Delete Authentication Record API","text":"<p><code>delete_authentication_record</code> deletes an authentication record in the subscription.</p> <p>Returns a list of auth record IDs that were deleted as a dictionary: <code>{\"id\": &lt;id&gt;}</code></p> <p>Head's Up!: Using this API may only remove the WAS-specific asset in the subscription. It may still be active in other Qualys modules, such as Global AssetView's web application view.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>id</code> <code>Union[str, int]</code> Auth record ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>name</code> <code>str</code> Auth record name \u274c <code>name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the name filter \u274c <code>tags</code> <code>Union[str, int]</code> Tag ID \u274c <code>tags_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the tags filter \u274c <code>tags_name</code> <code>str</code> Tag name \u274c <code>tags_name_operator</code> <code>Literal[\"CONTAINS\", \"EQUALS\", \"NOT EQUALS\"]</code> Operator for the tag name filter \u274c <code>tags_id</code> <code>Union[str, int]</code> Tag ID \u274c <code>tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the tag ID filter \u274c <code>createdDate</code> <code>str</code> Date created \u274c <code>createdDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the created date filter \u274c <code>updatedDate</code> <code>str</code> Date updated \u274c <code>updatedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the updated date filter \u274c <code>lastScan_date</code> <code>str</code> Date of the last scan in UTC date/time format \u274c <code>lastScan_date_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the lastScan_date filter \u274c <code>lastScan_authStatus</code> <code>Literal[\"NONE\", \"NOT_USED\", \"PARTIAL\", \"FAILED\", \"SUCCESSFUL\"]</code> Status of the last scan \u274c <code>lastScan_authStatus_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the lastScan_authStatus filter \u274c <code>isUsed</code> <code>bool</code> If the auth record is in use \u274c <code>contents</code> <code>Literal[\"FORM_STANDARD\", \"FORM_CUSTOM\", \"FORM_SELENIUM\", \"SERVER_BASIC\", \"SERVER_DIGEST\", \"SERVER_NTLM\", \"CERTIFICATE\", \"OAUTH2_AUTH_CODE\", \"OAUTH2_IMPLICIT\", \"OAUTH2_PASSWORD\", \"OAUTH2_CLIENT_CREDS\"]</code> Auth record type \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import delete_authentication_record\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Delete an auth record by ID:\ndelete_authentication_record(auth, id=12345678)\n\n# Delete all auth record with the PURGE tag:\ndelete_authentication_record(auth, tags_name=\"PURGE\", tags_name_operator=\"EQUALS\")\n&gt;&gt;&gt;[{\"id\": 12345678}, {\"id\": 98765432}, ...]\n</code></pre>"},{"location":"was/#count-findings-api","title":"Count Findings API","text":"<p><code>count_findings</code> returns the number of findings in the subscription that match the given kwargs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>id</code> <code>Union[str, int]</code> Finding ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>uniqueId</code> <code>str</code> Unique ID of the finding \u274c <code>qid</code> <code>int</code> Qualys ID of the finding \u274c <code>qid_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the QID filter \u274c <code>name</code> <code>str</code> Name of the finding \u274c <code>name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the name filter \u274c <code>type</code> <code>Literal[\"VULNERABILITY\", \"SENSITIVE_CONTENT\", \"INFORMATION_GATHERED\"]</code> Type of the finding \u274c <code>type_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the type filter \u274c <code>url</code> <code>str</code> URL of the finding's webapp \u274c <code>url_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the URL filter \u274c <code>webApp_tags_id</code> <code>int</code> A tag ID on the webapp \u274c <code>webApp_tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the webApp_tags_id filter \u274c <code>webApp_tags_name</code> <code>str</code> A tag name on the webapp \u274c <code>webApp_tags_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the webApp_tags_name filter \u274c <code>status</code> <code>Literal[\"NEW\", \"ACTIVE\", \"REOPENED\", \"PROTECTED\", \"FIXED\"]</code> Status of the finding \u274c <code>status_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the status filter \u274c <code>patch</code> <code>int</code> Patch ID for WAF module \u274c <code>patch_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the patch filter \u274c <code>webApp_id</code> <code>int</code> Webapp ID \u274c <code>webApp_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the webApp_id filter \u274c <code>webApp_name</code> <code>str</code> Webapp name \u274c <code>webApp_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the webApp_name filter \u274c <code>severity</code> <code>Literal[1, 2, 3, 4, 5]</code> Severity of the finding \u274c <code>severity_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the severity filter \u274c <code>externalRef</code> <code>str</code> External reference of the finding \u274c <code>externalRef_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the externalRef filter \u274c <code>ignoredDate</code> <code>str</code> Date the finding was ignored \u274c <code>ignoredDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ignoredDate filter \u274c <code>ignoredReason</code> <code>Literal[\"FALSE_POSITIVE\", \"RISK_ACCEPTED\", \"NOT_APPLICABLE\"]</code> Reason the finding was ignored \u274c <code>ignoredReason_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the ignoredReason filter \u274c <code>group</code> <code>Literal[\"XSS\", \"SQL\", \"INFO\", \"PATH\", \"CC\", \"SSN_US\", \"CUSTOM\"]</code> Group of the finding \u274c <code>group_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the group filter \u274c <code>owasp_name</code> <code>str</code> OWASP name of the finding \u274c <code>owasp_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the owasp_name filter \u274c <code>owasp_code</code> <code>int</code> OWASP code of the finding \u274c <code>owasp_code_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the owasp_code filter \u274c <code>wasc_name</code> <code>str</code> WASC name of the finding \u274c <code>wasc_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the wasc_name filter \u274c <code>wasc_code</code> <code>int</code> WASC code of the finding \u274c <code>wasc_code_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the wasc_code filter \u274c <code>cwe_id</code> <code>int</code> CWE ID of the finding \u274c <code>cwe_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the cwe_id filter \u274c <code>firstDetectedDate</code> <code>str</code> Date the finding was first detected \u274c <code>firstDetectedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the firstDetectedDate filter \u274c <code>lastDetectedDate</code> <code>str</code> Date the finding was last detected \u274c <code>lastDetectedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the lastDetectedDate filter \u274c <code>lastTestedDate</code> <code>str</code> Date the finding was last tested \u274c <code>lastTestedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the lastTestedDate filter \u274c <code>timesDetected</code> <code>int</code> Number of times the finding was detected \u274c <code>timesDetected_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the timesDetected filter \u274c <code>fixedDate</code> <code>str</code> Date the finding was fixed \u274c <code>fixedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the fixedDate filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import count_findings\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Get the number of findings with a severity of 5:\ncount = count_findings(auth, severity=5)\n\n# Get XSS findings that are severity 4 or 5,\n# and have been detected 5+ times\n# on assets with the PROD tag:\n\ncount = count_findings(\n    auth,\n    group=\"XSS\",\n    severity=\"4,5\",\n    severity_operator=\"IN\",\n    timesDetected=4,\n    timesDetected_operator=\"GREATER\",\n    webApp_tags_name=\"PROD\",\n)\n&gt;&gt;&gt; 5\n</code></pre>"},{"location":"was/#list-findings-api","title":"List Findings API","text":"<p><code>get_findings</code> returns a list of findings in the subscription that match the given kwargs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> Number of pages to return. If 'all', returns all pages \u274c <code>verbose</code> <code>bool</code> Whether to return verbose output \u274c <code>id</code> <code>Union[str, int]</code> Finding ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>uniqueId</code> <code>str</code> Unique ID of the finding \u274c <code>qid</code> <code>int</code> Qualys ID of the finding \u274c <code>qid_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the QID filter \u274c <code>name</code> <code>str</code> Name of the finding \u274c <code>name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the name filter \u274c <code>type</code> <code>Literal[\"VULNERABILITY\", \"SENSITIVE_CONTENT\", \"INFORMATION_GATHERED\"]</code> Type of the finding \u274c <code>type_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the type filter \u274c <code>url</code> <code>str</code> URL of the finding's webapp \u274c <code>url_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the URL filter \u274c <code>webApp_tags_id</code> <code>int</code> A tag ID on the webapp \u274c <code>webApp_tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the webApp_tags_id filter \u274c <code>webApp_tags_name</code> <code>str</code> A tag name on the webapp \u274c <code>webApp_tags_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the webApp_tags_name filter \u274c <code>status</code> <code>Literal[\"NEW\", \"ACTIVE\", \"REOPENED\", \"PROTECTED\", \"FIXED\"]</code> Status of the finding \u274c <code>status_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the status filter \u274c <code>patch</code> <code>int</code> Patch ID for WAF module \u274c <code>patch_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the patch filter \u274c <code>webApp_id</code> <code>int</code> Webapp ID \u274c <code>webApp_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the webApp_id filter \u274c <code>webApp_name</code> <code>str</code> Webapp name \u274c <code>webApp_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the webApp_name filter \u274c <code>severity</code> <code>Literal[1, 2, 3, 4, 5]</code> Severity of the finding \u274c <code>severity_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the severity filter \u274c <code>externalRef</code> <code>str</code> External reference of the finding \u274c <code>externalRef_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the externalRef filter \u274c <code>ignoredDate</code> <code>str</code> Date the finding was ignored \u274c <code>ignoredDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ignoredDate filter \u274c <code>ignoredReason</code> <code>Literal[\"FALSE_POSITIVE\", \"RISK_ACCEPTED\", \"NOT_APPLICABLE\"]</code> Reason the finding was ignored \u274c <code>ignoredReason_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the ignoredReason filter \u274c <code>group</code> <code>Literal[\"XSS\", \"SQL\", \"INFO\", \"PATH\", \"CC\", \"SSN_US\", \"CUSTOM\"]</code> Group of the finding \u274c <code>group_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the group filter \u274c <code>owasp_name</code> <code>str</code> OWASP name of the finding \u274c <code>owasp_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the owasp_name filter \u274c <code>owasp_code</code> <code>int</code> OWASP code of the finding \u274c <code>owasp_code_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the owasp_code filter \u274c <code>wasc_name</code> <code>str</code> WASC name of the finding \u274c <code>wasc_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the wasc_name filter \u274c <code>wasc_code</code> <code>int</code> WASC code of the finding \u274c <code>wasc_code_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the wasc_code filter \u274c <code>cwe_id</code> <code>int</code> CWE ID of the finding \u274c <code>cwe_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the cwe_id filter \u274c <code>firstDetectedDate</code> <code>str</code> Date the finding was first detected \u274c <code>firstDetectedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the firstDetectedDate filter \u274c <code>lastDetectedDate</code> <code>str</code> Date the finding was last detected \u274c <code>lastDetectedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the lastDetectedDate filter \u274c <code>lastTestedDate</code> <code>str</code> Date the finding was last tested \u274c <code>lastTestedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the lastTestedDate filter \u274c <code>timesDetected</code> <code>int</code> Number of times the finding was detected \u274c <code>timesDetected_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the timesDetected filter \u274c <code>fixedDate</code> <code>str</code> Date the finding was fixed \u274c <code>fixedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the fixedDate filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_findings\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Get all findings, with all details:\nfindings = get_findings(auth, verbose=True)\n&gt;&gt;&gt;[\n    WASFinding(\n        id=123456789, \n        uniqueId='aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee', \n        qid=86002, \n        detectionScore=0, \n        name='SSL Certificate - Information', \n        type='INFORMATION_GATHERED', \n        potential=True, \n        findingType='QUALYS', \n        severity=1,\n        ...\n    ),\n    ...\n]\n\n# Get all XSS &amp; SQL findings \n# with a severity of 4 or 5\n# that have been detected \n# 5+ times on assets with the PROD tag:\nfindings = get_findings(\n    auth,\n    group=\"XSS,SQL\",\n    group_operator=\"IN\",\n    severity=\"4,5\",\n    severity_operator=\"IN\",\n    timesDetected=4,\n    timesDetected_operator=\"GREATER\",\n    webApp_tags_name=\"PROD\",\n)\n</code></pre>"},{"location":"was/#get-finding-details-api","title":"Get Finding Details API","text":"<p><code>get_finding_details</code> returns the details of a single finding in the subscription.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>findingId</code> <code>Union[str, int]</code> Finding # or unique ID \u2705 <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_finding_details\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\nfinding = get_finding_details(auth, findingId=123456789)\nfinding2 = get_finding_details(auth, findingId=\"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\")\n</code></pre>"},{"location":"was/#get-findings-verbose-api","title":"Get Findings Verbose API","text":"<p><code>get_findings_verbose</code> returns a list of findings in the subscription with all attributes. This method uses threading to speed up the process. Number of threads can be set with the <code>thread_count</code> parameter.</p> <p>Head's Up!: Unlike the other <code>get_&lt;thing&gt;_verbose</code> methods, this method is not always faster than the non-verbose version. It is recommended to use the non-verbose version unless you need data specifically related to SSL/TLS certificates.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>thread_count</code> <code>int</code> Number of threads to use for the request \u274c <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> Number of pages to return. If 'all', returns all pages \u274c <code>verbose</code> <code>bool</code> Whether to return verbose output \u274c <code>id</code> <code>Union[str, int]</code> Finding ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>uniqueId</code> <code>str</code> Unique ID of the finding \u274c <code>qid</code> <code>int</code> Qualys ID of the finding \u274c <code>qid_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the QID filter \u274c <code>name</code> <code>str</code> Name of the finding \u274c <code>name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the name filter \u274c <code>type</code> <code>Literal[\"VULNERABILITY\", \"SENSITIVE_CONTENT\", \"INFORMATION_GATHERED\"]</code> Type of the finding \u274c <code>type_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the type filter \u274c <code>url</code> <code>str</code> URL of the finding's webapp \u274c <code>url_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the URL filter \u274c <code>webApp_tags_id</code> <code>int</code> A tag ID on the webapp \u274c <code>webApp_tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the webApp_tags_id filter \u274c <code>webApp_tags_name</code> <code>str</code> A tag name on the webapp \u274c <code>webApp_tags_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the webApp_tags_name filter \u274c <code>status</code> <code>Literal[\"NEW\", \"ACTIVE\", \"REOPENED\", \"PROTECTED\", \"FIXED\"]</code> Status of the finding \u274c <code>status_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the status filter \u274c <code>patch</code> <code>int</code> Patch ID for WAF module \u274c <code>patch_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the patch filter \u274c <code>webApp_id</code> <code>int</code> Webapp ID \u274c <code>webApp_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the webApp_id filter \u274c <code>webApp_name</code> <code>str</code> Webapp name \u274c <code>webApp_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the webApp_name filter \u274c <code>severity</code> <code>Literal[1, 2, 3, 4, 5]</code> Severity of the finding \u274c <code>severity_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the severity filter \u274c <code>externalRef</code> <code>str</code> External reference of the finding \u274c <code>externalRef_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the externalRef filter \u274c <code>ignoredDate</code> <code>str</code> Date the finding was ignored \u274c <code>ignoredDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ignoredDate filter \u274c <code>ignoredReason</code> <code>Literal[\"FALSE_POSITIVE\", \"RISK_ACCEPTED\", \"NOT_APPLICABLE\"]</code> Reason the finding was ignored \u274c <code>ignoredReason_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the ignoredReason filter \u274c <code>group</code> <code>Literal[\"XSS\", \"SQL\", \"INFO\", \"PATH\", \"CC\", \"SSN_US\", \"CUSTOM\"]</code> Group of the finding \u274c <code>group_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the group filter \u274c <code>owasp_name</code> <code>str</code> OWASP name of the finding \u274c <code>owasp_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the owasp_name filter \u274c <code>owasp_code</code> <code>int</code> OWASP code of the finding \u274c <code>owasp_code_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the owasp_code filter \u274c <code>wasc_name</code> <code>str</code> WASC name of the finding \u274c <code>wasc_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the wasc_name filter \u274c <code>wasc_code</code> <code>int</code> WASC code of the finding \u274c <code>wasc_code_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the wasc_code filter \u274c <code>cwe_id</code> <code>int</code> CWE ID of the finding \u274c <code>cwe_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the cwe_id filter \u274c <code>firstDetectedDate</code> <code>str</code> Date the finding was first detected \u274c <code>firstDetectedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the firstDetectedDate filter \u274c <code>lastDetectedDate</code> <code>str</code> Date the finding was last detected \u274c <code>lastDetectedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the lastDetectedDate filter \u274c <code>lastTestedDate</code> <code>str</code> Date the finding was last tested \u274c <code>lastTestedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the lastTestedDate filter \u274c <code>timesDetected</code> <code>int</code> Number of times the finding was detected \u274c <code>timesDetected_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the timesDetected filter \u274c <code>fixedDate</code> <code>str</code> Date the finding was fixed \u274c <code>fixedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the fixedDate filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_findings_verbose\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\nfindings = get_findings_verbose(auth, severity=5)\n</code></pre>"},{"location":"was/#count-scans-api","title":"Count Scans API","text":"<p><code>count_scans</code> returns the number of scans in the subscription that match given kwargs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>id</code> <code>Union[str, int]</code> Scan ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>name</code> <code>str</code> Scan name \u274c <code>name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the name filter \u274c <code>reference</code> <code>str</code> Scan reference \u274c <code>reference_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the reference filter \u274c <code>type</code> <code>Literal[\"DISCOVERY\", \"VULNERABILITY\"]</code> Scan type \u274c <code>type_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the type filter \u274c <code>mode</code> <code>Literal[\"ONDEMAND\", \"SCHEDULED\", \"API\"]</code> Scan mode \u274c <code>mode_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the mode filter \u274c <code>status</code> <code>Literal[\"SUBMITTED\", \"RUNNING\", \"FINISHED\", \"ERROR\", \"CANCELLED\", \"PROCESSING\"]</code> Scan status \u274c <code>status_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the status filter \u274c <code>webApp_id</code> <code>int</code> Webapp ID \u274c <code>webApp_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the webApp_id filter \u274c <code>webApp_name</code> <code>str</code> Webapp name \u274c <code>webApp_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the webApp_name filter \u274c <code>webApp_tags_id</code> <code>int</code> Webapp tag ID \u274c <code>webApp_tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the webApp_tags_id filter \u274c <code>resultsStatus</code> <code>Literal[\"NOT_USED\", \"TO_BE_PROCESSED\", \"NO_HOST_ALIVE\", \"NO_WEB_SERVICE\", \"SERVICE_ERROR\", \"TIME_LIMIT_REACHED\", \"SCAN_INTERNAL_ERROR\", \"SCAN_RESULTS_INVALID\", \"SUCCESSFUL\", \"PROCESSING\", \"TIME_LIMIT_EXCEEDED\", \"SCAN_NOT_LAUNCHED\", \"SCANNER_NOT_AVAILABLE\", \"SUBMITTED\", \"RUNNING\", \"CANCELED\", \"CANCELING\", \"ERROR\", \"DELETED\", \"CANCELED_WITH_RESULTS\"]</code> Results status \u274c <code>resultsStatus_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the resultsStatus filter \u274c <code>authStatus</code> <code>Literal[\"NONE\", \"NOT_USED\", \"SUCCESSFUL\", \"FAILED\", \"PARTIAL\"]</code> Authentication status \u274c <code>authStatus_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the authStatus filter \u274c <code>launchedDate</code> <code>str</code> Scan launch date in UTC: YYYY-MM-DDTHH:MM:SSZ \u274c <code>launchedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the launchedDate filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import count_scans\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\ncount = count_scans(\n    auth,\n    type=\"VULNERABILITY\",\n    mode=\"API,SCHEDULED\",\n    mode_operator=\"IN\",\n    status=\"RUNNING,FINISHED\",\n    status_operator=\"IN\",\n    webApp_tags_id=123456789,\n    authStatus=\"NOT_USED\"    \n)\n&gt;&gt;&gt; 5\n</code></pre>"},{"location":"was/#list-scans-api","title":"List Scans API","text":"<p><code>get_scans</code> returns a list of scans in the subscription that match given kwargs.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> Number of pages to return. If 'all', returns all pages \u274c <code>id</code> <code>Union[str, int]</code> Scan ID \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\", \"IN\"]</code> Operator for the ID filter \u274c <code>name</code> <code>str</code> Scan name \u274c <code>name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the name filter \u274c <code>reference</code> <code>str</code> Scan reference \u274c <code>reference_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the reference filter \u274c <code>type</code> <code>Literal[\"DISCOVERY\", \"VULNERABILITY\"]</code> Scan type \u274c <code>type_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the type filter \u274c <code>mode</code> <code>Literal[\"ONDEMAND\", \"SCHEDULED\", \"API\"]</code> Scan mode \u274c <code>mode_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the mode filter \u274c <code>status</code> <code>Literal[\"SUBMITTED\", \"RUNNING\", \"FINISHED\", \"ERROR\", \"CANCELLED\", \"PROCESSING\"]</code> Scan status \u274c <code>status_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the status filter \u274c <code>webApp_id</code> <code>int</code> Webapp ID \u274c <code>webApp_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the webApp_id filter \u274c <code>webApp_name</code> <code>str</code> Webapp name \u274c <code>webApp_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the webApp_name filter \u274c <code>webApp_tags_id</code> <code>int</code> Webapp tag ID \u274c <code>webApp_tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the webApp_tags_id filter \u274c <code>resultsStatus</code> <code>Literal[\"NOT_USED\", \"TO_BE_PROCESSED\", \"NO_HOST_ALIVE\", \"NO_WEB_SERVICE\", \"SERVICE_ERROR\", \"TIME_LIMIT_REACHED\", \"SCAN_INTERNAL_ERROR\", \"SCAN_RESULTS_INVALID\", \"SUCCESSFUL\", \"PROCESSING\", \"TIME_LIMIT_EXCEEDED\", \"SCAN_NOT_LAUNCHED\", \"SCANNER_NOT_AVAILABLE\", \"SUBMITTED\", \"RUNNING\", \"CANCELED\", \"CANCELING\", \"ERROR\", \"DELETED\", \"CANCELED_WITH_RESULTS\"]</code> Results status \u274c <code>resultsStatus_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the resultsStatus filter \u274c <code>authStatus</code> <code>Literal[\"NONE\", \"NOT_USED\", \"SUCCESSFUL\", \"FAILED\", \"PARTIAL\"]</code> Authentication status \u274c <code>authStatus_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the authStatus filter \u274c <code>launchedDate</code> <code>str</code> Scan launch date in UTC: YYYY-MM-DDTHH:MM:SSZ \u274c <code>launchedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the launchedDate filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_scans\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\nscans = get_scans(\n    auth,\n    type=\"VULNERABILITY\",\n    mode=\"API,SCHEDULED\",\n    mode_operator=\"IN\",\n    status=\"RUNNING,FINISHED\",\n    status_operator=\"IN\",\n    webApp_tags_id=123456789,\n    authStatus=\"NOT_USED\"    \n)\n&gt;&gt;&gt;[\n    WASScan(\n        id=123456789, \n        name='Test Scan', \n        reference='test_scan', \n        type='VULNERABILITY', \n        mode='API', \n        status='RUNNING', \n        launchedDate='2023-10-01T12:00:00Z',\n        ...\n    ),\n    ...\n]\n</code></pre>"},{"location":"was/#get-scan-details-api","title":"Get Scan Details API","text":"<p><code>get_scan_details</code> returns the details of a single scan in the subscription.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>scanId</code> <code>Union[str, int]</code> Scan # \u2705 <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_scan_details, get_scans\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Get some scans:\nscans = get_scans(auth, type=\"VULNERABILITY\")\n\n# Get details for the first scan:\nscan = get_scan_details(auth, scanId=scans[0].id)\n&gt;&gt;&gt; WASScan(\n    id=123456789, \n    name='Test Scan', \n    reference='test_scan', \n    type='VULNERABILITY', \n    mode='API', \n    status='RUNNING', \n    launchedDate='2023-10-01T12:00:00Z',\n    ...\n)\n</code></pre>"},{"location":"was/#get-scans-verbose-api","title":"Get Scans Verbose API","text":"<p><code>get_scans_verbose</code> combines the <code>get_scan_details</code> and <code>get_scans</code> methods to return a list of scans with all attributes. This method uses threading to speed up the process. Number of threads can be set with the <code>thread_count</code> parameter.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>thread_count</code> <code>int=5</code> Number of threads to use for the request \u274c <code>page_count</code> <code>Union[int, 'all'] = 'all'</code> Number of pages to return. If 'all', returns all pages \u274c <code>type</code> <code>Literal[\"DISCOVERY\", \"VULNERABILITY\"]</code> Scan type \u274c <code>type_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the type filter \u274c <code>mode</code> <code>Literal[\"ONDEMAND\", \"SCHEDULED\", \"API\"]</code> Scan mode \u274c <code>mode_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the mode filter \u274c <code>status</code> <code>Literal[\"SUBMITTED\", \"RUNNING\", \"FINISHED\", \"ERROR\", \"CANCELLED\", \"PROCESSING\"]</code> Scan status \u274c <code>status_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the status filter \u274c <code>webApp_id</code> <code>int</code> Webapp ID \u274c <code>webApp_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the webApp_id filter \u274c <code>webApp_name</code> <code>str</code> Webapp name \u274c <code>webApp_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the webApp_name filter \u274c <code>webApp_tags_id</code> <code>int</code> Webapp tag ID \u274c <code>webApp_tags_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the webApp_tags_id filter \u274c <code>resultsStatus</code> <code>Literal[\"NOT_USED\", \"TO_BE_PROCESSED\", \"NO_HOST_ALIVE\", \"NO_WEB_SERVICE\", \"SERVICE_ERROR\", \"TIME_LIMIT_REACHED\", \"SCAN_INTERNAL_ERROR\", \"SCAN_RESULTS_INVALID\", \"SUCCESSFUL\", \"PROCESSING\", \"TIME_LIMIT_EXCEEDED\", \"SCAN_NOT_LAUNCHED\", \"SCANNER_NOT_AVAILABLE\", \"SUBMITTED\", \"RUNNING\", \"CANCELED\", \"CANCELING\", \"ERROR\", \"DELETED\", \"CANCELED_WITH_RESULTS\"]</code> Results status \u274c <code>resultsStatus_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the resultsStatus filter \u274c <code>authStatus</code> <code>Literal[\"NONE\", \"NOT_USED\", \"SUCCESSFUL\", \"FAILED\", \"PARTIAL\"]</code> Authentication status \u274c <code>authStatus_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the authStatus filter \u274c <code>launchedDate</code> <code>str</code> Scan launch date in UTC: YYYY-MM-DDTHH:MM:SSZ \u274c <code>launchedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the launchedDate filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_scans_verbose\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\nscans = get_scans_verbose(auth, type=\"VULNERABILITY\")\n&gt;&gt;&gt;[\n    WASScan(\n        id=123456789, \n        name='Test Scan', \n        reference='test_scan', \n        type='VULNERABILITY', \n        mode='API', \n        status='RUNNING', \n        launchedDate='2023-10-01T12:00:00Z',\n        ...\n    ),\n    ...\n]\n</code></pre>"},{"location":"was/#launch-scan-api","title":"Launch Scan API","text":"<p><code>launch_scan</code> launches a scan on webapps either by specifying webapp IDs or tags.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>name</code> <code>str</code> Name of the scan \u2705 <code>scan_type</code> <code>Literal[\"DISCOVERY\", \"VULNERABILITY\"]</code> Scan type \u2705 <code>profile_id</code> <code>int</code> Scan profile ID \u2705 <code>web_app_ids</code> <code>Union[str, int, list[str, int]]</code> Webapp ID(s) to scan \u26a0\ufe0f required if <code>included_tag_ids</code> not specified <code>included_tag_ids</code> <code>Union[str, int, list[str, int]]</code> Tag ID(s) to scan \u26a0\ufe0f required if <code>web_app_ids</code> not specified <code>included_tag_options</code> <code>Literal[\"ALL\", \"ANY\"]</code> Whether to scan all or any tags \u274c <code>scanner_appliance_type</code> <code>Literal[\"EXTERNAL\", \"INTERNAL\"]</code> Scanner appliance type \u274c <code>auth_record_option</code> <code>Union[str, int]</code> Authentication record ID \u274c <code>profile_option</code> <code>Literal[\"DEFAULT\", \"ANY\", \"ALL\"]</code> Profile option \u274c <code>scanner_option</code> <code>Union[str, int]</code> Scanner appliance ID \u274c <code>send_mail</code> <code>bool</code> Whether to send an email \u274c <code>send_one_mail</code> <code>bool</code> Whether to send one email \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import launch_scan\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Launch a scan on a single webapp:\nlaunch_scan(\n    auth,\n    name=\"Test Scan\",\n    scan_type=\"VULNERABILITY\",\n    profile_id=123456789,\n    web_app_ids=123456789\n)\n&gt;&gt;&gt; 123456789 # Scan ID\n\n# Launch a scan on all webapps with a specific tag:\nlaunch_scan(\n    auth,\n    name=\"Test Scan\",\n    scan_type=\"DISCOVERY\",\n    profile_id=123456789,\n    included_tag_ids=123456789\n)\n&gt;&gt;&gt; 123456789\n</code></pre>"},{"location":"was/#cancel-scan-api","title":"Cancel Scan API","text":"<p><code>cancel_scan</code> cancels a scan, optionally retaining the results up to the point of cancellation.</p> <p>This API returns a string of \"SUCCESS\" if the scan was successfully cancelled, or error details as a string if the scan could not be cancelled. See below example for such cases.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>scanId</code> <code>Union[str, int]</code> Scan ID \u2705 <code>retain_results</code> <code>bool</code> Whether to retain results. Defaults to <code>False</code> \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import cancel_scan, get_scans\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Find some scans to cancel:\nscans = get_scan_details(auth, status=\"RUNNING\", type=\"VULNERABILITY\")\n\n# Cancel the scan(s), saving the results so far:\nfor scan in scans:\n    cancel_scan(auth, scan.id, retain_results=True)\n&gt;&gt;&gt;\"SUCCESS\"\n\n# Example of an error:\ncancel_scan(auth, 123456789)\n&gt;&gt;&gt; \"Error cancelling scan: Scan is not in a running state. Scan status: CANCELED - Verify the WasScan ID passed to the request and that this scan is still running.\"\n</code></pre>"},{"location":"was/#get-scan-status-api","title":"Get Scan Status API","text":"<p><code>get_scan_status</code> returns the status of a scan as well as the status/result of trying to authenticate to the target webapp.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>scanId</code> <code>Union[str, int]</code> Scan ID \u2705 <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_scan_status\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\nscanId = 123456789\n\nstatus = get_scan_status(auth, scanId)\n&gt;&gt;&gt;{\n  \"@{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation\": \"https://qualysapi.qg3.apps.qualys.com/qps/xsd/3.0/was/wasscan.xsd\",\n  \"responseCode\": \"SUCCESS\",\n  \"count\": \"1\",\n  \"data\": {\n    \"WasScan\": {\n      \"id\": \"123456789\",\n      \"status\": \"RUNNING\",\n      \"consolidatedStatus\": \"RUNNING\"\n    }\n  }\n}\n</code></pre>"},{"location":"was/#launch-a-re-scan-api","title":"Launch a Re-Scan API","text":"<p><code>scan_again</code> re-launches a scan, optionally with a new name.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>scanId</code> <code>Union[str, int]</code> Scan ID \u2705 <code>newName</code> <code>str</code> New name for the scan \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import scan_again\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\nscanId = 123456789\n\nscan_again(auth, scanId, newName=\"New Scan Name\")\n&gt;&gt;&gt;123456789\n</code></pre>"},{"location":"was/#delete-scan-api","title":"Delete Scan API","text":"<p><code>delete_scan</code> deletes 1+ scans from the subscription. </p> <p>For _operator fields that support <code>IN</code>, pass the value as a comma-separated string. For example, to delete multiple scan IDs 12345, 54321, and 98765, pass <code>id=\"12345,54321,98765\"</code> &amp; <code>id_operator=\"IN\"</code>. <p>Head's Up!: At least one kwarg is required to make the request and the scan must be in a terminal state (FINISHED, ERROR, CANCELLED, etc.) to be deleted.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>id</code> <code>Union[str, int, list[str, int]]</code> Scan ID(s) \u274c <code>id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the ID filter \u274c <code>name</code> <code>str</code> Scan name \u274c <code>name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the name filter \u274c <code>webApp_id</code> <code>Union[str, int]</code> Webapp IDs \u274c <code>webApp_id_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the webApp_id filter \u274c <code>webApp_name</code> <code>str</code> Webapp name \u274c <code>webApp_name_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the webApp_name filter \u274c <code>reference</code> <code>str</code> Scan reference \u274c <code>reference_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"CONTAINS\"]</code> Operator for the reference filter \u274c <code>launchedDate</code> <code>str</code> Scan launch date in UTC: YYYY-MM-DDTHH:MM:SSZ \u274c <code>launchedDate_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"GREATER\", \"LESSER\"]</code> Operator for the launchedDate filter \u274c <code>type</code> <code>Literal[\"DISCOVERY\", \"VULNERABILITY\"]</code> Scan type \u274c <code>type_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the type filter \u274c <code>mode</code> <code>Literal[\"ONDEMAND\", \"SCHEDULED\", \"API\"]</code> Scan mode \u274c <code>mode_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the mode filter \u274c <code>status</code> <code>Literal[\"SUBMITTED\", \"RUNNING\", \"FINISHED\", \"ERROR\", \"CANCELLED\", \"PROCESSING\"]</code> Scan status \u274c <code>status_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the status filter \u274c <code>authStatus</code> <code>Literal[\"NONE\", \"NOT_USED\", \"SUCCESSFUL\", \"FAILED\", \"PARTIAL\"]</code> Authentication status \u274c <code>authStatus_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the authStatus filter \u274c <code>resultsStatus</code> <code>Literal[\"NOT_USED\", \"TO_BE_PROCESSED\", \"NO_HOST_ALIVE\", \"NO_WEB_SERVICE\", \"SERVICE_ERROR\", \"TIME_LIMIT_REACHED\", \"SCAN_INTERNAL_ERROR\", \"SCAN_RESULTS_INVALID\", \"SUCCESSFUL\", \"PROCESSING\", \"TIME_LIMIT_EXCEEDED\", \"SCAN_NOT_LAUNCHED\", \"SCANNER_NOT_AVAILABLE\", \"SUBMITTED\", \"RUNNING\", \"CANCELED\", \"CANCELING\", \"ERROR\", \"DELETED\", \"CANCELED_WITH_RESULTS\"]</code> Results status \u274c <code>resultsStatus_operator</code> <code>Literal[\"EQUALS\", \"NOT EQUALS\", \"IN\"]</code> Operator for the resultsStatus filter \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import delete_scan\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\n\n# Delete a single scan by ID:\ndelete_scan(auth, id=123456789)\n&gt;&gt;&gt;[123456789]\n\n# Delete multiple scans by ID:\ndelete_scan(\n    auth, \n    id=\"123456789,987654321\", \n    id_operator=\"IN\"\n)\n&gt;&gt;&gt;[123456789, 987654321]\n\n# Delete all on-demand discovery \n# scans that have an error or are cancelled:\n\ndelete_scan(\n    auth,\n    type=\"DISCOVERY\",\n    mode=\"ONDEMAND\",\n    status=\"ERROR,CANCELLED\"\n    status_operator=\"IN\"\n)\n&gt;&gt;&gt;[123456789, 987654321, 246813579, ...]\n</code></pre>"},{"location":"was/#get-scan-results-api","title":"Get Scan Results API","text":"<p><code>get_scan_results</code> returns the results of a scan, optionally writing the results to an XML file.</p> Parameter Possible Values Description Required <code>auth</code> <code>qualysdk.auth.BasicAuth</code> Authentication object \u2705 <code>scanId</code> <code>Union[str, int]</code> Scan ID \u2705 <code>writeToFile</code> <code>str</code> File path to write results to \u274c <pre><code>from qualysdk import BasicAuth\nfrom qualysdk.was import get_scan_results\n\nauth = BasicAuth(&lt;username&gt;, &lt;password&gt;)\nscanId = 123456789\n\n# Get the results of a scan, do not write to file:\nresults = get_scan_results(auth, scanId)\n&gt;&gt;&gt;{\n    \"id\": \"123456789\",\n    \"stats\": ...,\n    \"vulns\": ...,\n    \"target\": ...,\n    ...\n}\n\n# Get the results of a scan, write to file:\nresults = get_scan_results(auth, scanId, writeToFile=\"/foo/bar/scan_results.xml\")\n&gt;&gt;&gt;Wrote scan results to /foo/bar/scan_results.xml.\n&gt;&gt;&gt;{\n    \"id\": \"123456789\",\n    \"stats\": ...,\n    \"vulns\": ...,\n    \"target\": ...,\n    ...\n}\n</code></pre>"},{"location":"was/#qualysdk-was-cli-tool","title":"<code>qualysdk-was</code> CLI tool","text":"<p>The <code>qualysdk-was</code> CLI tool is a command-line interface for the WAS portion of the SDK. It allows you to quickly pull down results from WAS APIs and save them to an XLSX file.</p>"},{"location":"was/#usage","title":"Usage","text":"<pre><code>usage: qualysdk-was [-h] -u USERNAME -p PASSWORD [-P {qg1,qg2,qg3,qg4}] {get_findings,get_scans} ...\n\nCLI script to quickly perform Web Application Scanning (WAS) operations using qualysdk\n\npositional arguments:\n  {get_findings,get_scans}\n                        Action to perform\n    get_findings        Get a list of WAS findings.\n    get_scans           Get a list of WAS scans.\n\noptions:\n  -h, --help            show this help message and exit\n  -u, --username USERNAME\n                        Qualys username\n  -p, --password PASSWORD\n                        Qualys password\n  -P, --platform {qg1,qg2,qg3,qg4}\n                        Qualys platform\n</code></pre>"},{"location":"was/#get-findings","title":"Get Findings","text":"<pre><code>usage: qualysdk-was get_findings [-h] [-o OUTPUT] [--kwarg key value]\n\noptions:\n  -h, --help            show this help message and exit\n  -o OUTPUT, --output OUTPUT\n                        Output xlsx file to write results to\n  --kwarg key value     Specify a keyword argument to pass to the get_findings function. Can be used multiple times\n\n# Example with a few kwargs:\nqualysdk-was -u &lt;username&gt; -p &lt;password&gt; -P qg1 get_findings --kwarg verbose true --kwarg group XSS --output xss_findings.xlsx\n&gt;&gt;&gt;Data written to xss_findings.xlsx.\n</code></pre>"},{"location":"was/#get-scans","title":"Get Scans","text":"<pre><code>usage: qualysdk-was get_scans [-h] [-o OUTPUT] [--kwarg key value]\n\noptions:\n  -h, --help           show this help message and exit\n  -o, --output OUTPUT  Output xlsx file to write results to\n  --kwarg key value    Specify a keyword argument to pass to the action. Can be used multiple times\n</code></pre>"}]}